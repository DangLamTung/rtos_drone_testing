
drone_board_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aff0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800b180  0800b180  0001b180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2cc  0800b2cc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2cc  0800b2cc  0001b2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2d4  0800b2d4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2d4  0800b2d4  0001b2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2d8  0800b2d8  0001b2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b2dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044b4  20000078  0800b354  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000452c  0800b354  0002452c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3b1  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003965  00000000  00000000  0003c459  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017e0  00000000  00000000  0003fdc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001648  00000000  00000000  000415a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020efe  00000000  00000000  00042be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001271d  00000000  00000000  00063ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc61c  00000000  00000000  00076203  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014281f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068e0  00000000  00000000  0014289c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b168 	.word	0x0800b168

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800b168 	.word	0x0800b168

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ef8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <vApplicationGetIdleTaskMemory+0x30>)
 8000efe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2280      	movs	r2, #128	; 0x80
 8000f04:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000094 	.word	0x20000094
 8000f18:	200000e8 	.word	0x200000e8

08000f1c <init_ESC>:

      /* Infinite loop */


}
void init_ESC(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start(&htim4);
 8000f20:	481f      	ldr	r0, [pc, #124]	; (8000fa0 <init_ESC+0x84>)
 8000f22:	f005 f948 	bl	80061b6 <HAL_TIM_Base_Start>
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000f26:	2100      	movs	r1, #0
 8000f28:	481e      	ldr	r0, [pc, #120]	; (8000fa4 <init_ESC+0x88>)
 8000f2a:	f005 f9b7 	bl	800629c <HAL_TIM_PWM_Start>
	  HAL_TIM_Base_Start_IT(&htim3);
 8000f2e:	481e      	ldr	r0, [pc, #120]	; (8000fa8 <init_ESC+0x8c>)
 8000f30:	f005 f965 	bl	80061fe <HAL_TIM_Base_Start_IT>
	    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000f34:	2104      	movs	r1, #4
 8000f36:	481b      	ldr	r0, [pc, #108]	; (8000fa4 <init_ESC+0x88>)
 8000f38:	f005 f9b0 	bl	800629c <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	4819      	ldr	r0, [pc, #100]	; (8000fa4 <init_ESC+0x88>)
 8000f40:	f005 f9ac 	bl	800629c <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000f44:	210c      	movs	r1, #12
 8000f46:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <init_ESC+0x88>)
 8000f48:	f005 f9a8 	bl	800629c <HAL_TIM_PWM_Start>
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <init_ESC+0x88>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f54:	635a      	str	r2, [r3, #52]	; 0x34
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1000);
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <init_ESC+0x88>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f5e:	639a      	str	r2, [r3, #56]	; 0x38
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1000);
 8000f60:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <init_ESC+0x88>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f68:	63da      	str	r2, [r3, #60]	; 0x3c
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1000);
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <init_ESC+0x88>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f72:	641a      	str	r2, [r3, #64]	; 0x40
	    esc_value1 = 1000;
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <init_ESC+0x90>)
 8000f76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f7a:	801a      	strh	r2, [r3, #0]
	    esc_value2 = 1000;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <init_ESC+0x94>)
 8000f7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f82:	801a      	strh	r2, [r3, #0]
	    esc_value3 = 1000;
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <init_ESC+0x98>)
 8000f86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f8a:	801a      	strh	r2, [r3, #0]
	    esc_value4 = 1000;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <init_ESC+0x9c>)
 8000f8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f92:	801a      	strh	r2, [r3, #0]

	    HAL_Delay(3000);
 8000f94:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f98:	f003 f84c 	bl	8004034 <HAL_Delay>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200041bc 	.word	0x200041bc
 8000fa4:	200043b0 	.word	0x200043b0
 8000fa8:	200042d0 	.word	0x200042d0
 8000fac:	20004078 	.word	0x20004078
 8000fb0:	20004060 	.word	0x20004060
 8000fb4:	200040b4 	.word	0x200040b4
 8000fb8:	200040cc 	.word	0x200040cc

08000fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fbc:	b5b0      	push	{r4, r5, r7, lr}
 8000fbe:	b092      	sub	sp, #72	; 0x48
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc2:	f002 ffc5 	bl	8003f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc6:	f000 f86f 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fca:	f000 fb13 	bl	80015f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000fce:	f000 f94d 	bl	800126c <MX_TIM1_Init>
  MX_I2C1_Init();
 8000fd2:	f000 f8e7 	bl	80011a4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000fd6:	f000 fae3 	bl	80015a0 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000fda:	f000 fa3d 	bl	8001458 <MX_TIM4_Init>
  MX_SPI1_Init();
 8000fde:	f000 f90f 	bl	8001200 <MX_SPI1_Init>
  MX_UART4_Init();
 8000fe2:	f000 fa87 	bl	80014f4 <MX_UART4_Init>
  MX_CRC_Init();
 8000fe6:	f000 f8c9 	bl	800117c <MX_CRC_Init>
  MX_TIM3_Init();
 8000fea:	f000 f9e7 	bl	80013bc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fee:	f000 faad 	bl	800154c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, &Rx_data, 1);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4924      	ldr	r1, [pc, #144]	; (8001088 <main+0xcc>)
 8000ff6:	4825      	ldr	r0, [pc, #148]	; (800108c <main+0xd0>)
 8000ff8:	f006 f914 	bl	8007224 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t *) Rx_data, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4922      	ldr	r1, [pc, #136]	; (8001088 <main+0xcc>)
 8001000:	4823      	ldr	r0, [pc, #140]	; (8001090 <main+0xd4>)
 8001002:	f006 f90f 	bl	8007224 <HAL_UART_Receive_IT>
  init_MPU();
 8001006:	f000 fda3 	bl	8001b50 <init_MPU>
//   initBMP();
   HAL_Delay(100);
 800100a:	2064      	movs	r0, #100	; 0x64
 800100c:	f003 f812 	bl	8004034 <HAL_Delay>

//

   calibration_IMU();
 8001010:	f002 f8f6 	bl	8003200 <calibration_IMU>
   init_ESC();
 8001014:	f7ff ff82 	bl	8000f1c <init_ESC>
//
//
//
//

  osMailQDef(myQueue01, 16, packaget_t);
 8001018:	2310      	movs	r3, #16
 800101a:	63bb      	str	r3, [r7, #56]	; 0x38
 800101c:	2310      	movs	r3, #16
 800101e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001020:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001024:	643b      	str	r3, [r7, #64]	; 0x40
  myQueue01Handle = osMailCreate(osMailQ(myQueue01), NULL);
 8001026:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f007 f8dc 	bl	80081ea <osMailCreate>
 8001032:	4602      	mov	r2, r0
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <main+0xd8>)
 8001036:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <main+0xdc>)
 800103a:	f107 041c 	add.w	r4, r7, #28
 800103e:	461d      	mov	r5, r3
 8001040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001044:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001048:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f006 ff69 	bl	8007f2a <osThreadCreate>
 8001058:	4602      	mov	r2, r0
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <main+0xe0>)
 800105c:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <main+0xe4>)
 8001060:	463c      	mov	r4, r7
 8001062:	461d      	mov	r5, r3
 8001064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001068:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800106c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001070:	463b      	mov	r3, r7
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f006 ff58 	bl	8007f2a <osThreadCreate>
 800107a:	4602      	mov	r2, r0
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <main+0xe8>)
 800107e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001080:	f006 ff4c 	bl	8007f1c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001084:	e7fe      	b.n	8001084 <main+0xc8>
 8001086:	bf00      	nop
 8001088:	200042c0 	.word	0x200042c0
 800108c:	20004204 	.word	0x20004204
 8001090:	20004334 	.word	0x20004334
 8001094:	200044c0 	.word	0x200044c0
 8001098:	0800b18c 	.word	0x0800b18c
 800109c:	200041a4 	.word	0x200041a4
 80010a0:	0800b1b4 	.word	0x0800b1b4
 80010a4:	20004390 	.word	0x20004390

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b094      	sub	sp, #80	; 0x50
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	2230      	movs	r2, #48	; 0x30
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f009 fa45 	bl	800a546 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	4b28      	ldr	r3, [pc, #160]	; (8001174 <SystemClock_Config+0xcc>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	4a27      	ldr	r2, [pc, #156]	; (8001174 <SystemClock_Config+0xcc>)
 80010d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010da:	6413      	str	r3, [r2, #64]	; 0x40
 80010dc:	4b25      	ldr	r3, [pc, #148]	; (8001174 <SystemClock_Config+0xcc>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	4b22      	ldr	r3, [pc, #136]	; (8001178 <SystemClock_Config+0xd0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a21      	ldr	r2, [pc, #132]	; (8001178 <SystemClock_Config+0xd0>)
 80010f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <SystemClock_Config+0xd0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001104:	2301      	movs	r3, #1
 8001106:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001108:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110e:	2302      	movs	r3, #2
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001112:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001116:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001118:	2306      	movs	r3, #6
 800111a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800111c:	23a8      	movs	r3, #168	; 0xa8
 800111e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001120:	2302      	movs	r3, #2
 8001122:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001124:	2307      	movs	r3, #7
 8001126:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001128:	f107 0320 	add.w	r3, r7, #32
 800112c:	4618      	mov	r0, r3
 800112e:	f004 fb77 	bl	8005820 <HAL_RCC_OscConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001138:	f000 fbc8 	bl	80018cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113c:	230f      	movs	r3, #15
 800113e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001140:	2302      	movs	r3, #2
 8001142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001148:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800114c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800114e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001152:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2105      	movs	r1, #5
 800115a:	4618      	mov	r0, r3
 800115c:	f004 fdd0 	bl	8005d00 <HAL_RCC_ClockConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001166:	f000 fbb1 	bl	80018cc <Error_Handler>
  }
}
 800116a:	bf00      	nop
 800116c:	3750      	adds	r7, #80	; 0x50
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40007000 	.word	0x40007000

0800117c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_CRC_Init+0x20>)
 8001182:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <MX_CRC_Init+0x24>)
 8001184:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_CRC_Init+0x20>)
 8001188:	f003 f887 	bl	800429a <HAL_CRC_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001192:	f000 fb9b 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20004268 	.word	0x20004268
 80011a0:	40023000 	.word	0x40023000

080011a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011aa:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <MX_I2C1_Init+0x54>)
 80011ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <MX_I2C1_Init+0x58>)
 80011b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011e2:	f003 fa67 	bl	80046b4 <HAL_I2C_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011ec:	f000 fb6e 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200040d8 	.word	0x200040d8
 80011f8:	40005400 	.word	0x40005400
 80011fc:	00061a80 	.word	0x00061a80

08001200 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MX_SPI1_Init+0x64>)
 8001206:	4a18      	ldr	r2, [pc, #96]	; (8001268 <MX_SPI1_Init+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_SPI1_Init+0x64>)
 800120c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001210:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_SPI1_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_SPI1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_SPI1_Init+0x64>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_SPI1_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_SPI1_Init+0x64>)
 800122c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001230:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_SPI1_Init+0x64>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <MX_SPI1_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_SPI1_Init+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <MX_SPI1_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_SPI1_Init+0x64>)
 800124c:	220a      	movs	r2, #10
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_SPI1_Init+0x64>)
 8001252:	f004 ff21 	bl	8006098 <HAL_SPI_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800125c:	f000 fb36 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20004468 	.word	0x20004468
 8001268:	40013000 	.word	0x40013000

0800126c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b092      	sub	sp, #72	; 0x48
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001272:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	615a      	str	r2, [r3, #20]
 800128e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2220      	movs	r2, #32
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f009 f955 	bl	800a546 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800129c:	4b45      	ldr	r3, [pc, #276]	; (80013b4 <MX_TIM1_Init+0x148>)
 800129e:	4a46      	ldr	r2, [pc, #280]	; (80013b8 <MX_TIM1_Init+0x14c>)
 80012a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 80012a2:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <MX_TIM1_Init+0x148>)
 80012a4:	22a7      	movs	r2, #167	; 0xa7
 80012a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a8:	4b42      	ldr	r3, [pc, #264]	; (80013b4 <MX_TIM1_Init+0x148>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80012ae:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <MX_TIM1_Init+0x148>)
 80012b0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b6:	4b3f      	ldr	r3, [pc, #252]	; (80013b4 <MX_TIM1_Init+0x148>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012bc:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <MX_TIM1_Init+0x148>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b3c      	ldr	r3, [pc, #240]	; (80013b4 <MX_TIM1_Init+0x148>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012c8:	483a      	ldr	r0, [pc, #232]	; (80013b4 <MX_TIM1_Init+0x148>)
 80012ca:	f004 ffbc 	bl	8006246 <HAL_TIM_PWM_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80012d4:	f000 fafa 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012e4:	4619      	mov	r1, r3
 80012e6:	4833      	ldr	r0, [pc, #204]	; (80013b4 <MX_TIM1_Init+0x148>)
 80012e8:	f005 fdd4 	bl	8006e94 <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80012f2:	f000 faeb 	bl	80018cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f6:	2360      	movs	r3, #96	; 0x60
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001302:	2300      	movs	r3, #0
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001316:	2200      	movs	r2, #0
 8001318:	4619      	mov	r1, r3
 800131a:	4826      	ldr	r0, [pc, #152]	; (80013b4 <MX_TIM1_Init+0x148>)
 800131c:	f005 f904 	bl	8006528 <HAL_TIM_PWM_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001326:	f000 fad1 	bl	80018cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800132a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132e:	2204      	movs	r2, #4
 8001330:	4619      	mov	r1, r3
 8001332:	4820      	ldr	r0, [pc, #128]	; (80013b4 <MX_TIM1_Init+0x148>)
 8001334:	f005 f8f8 	bl	8006528 <HAL_TIM_PWM_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800133e:	f000 fac5 	bl	80018cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001346:	2208      	movs	r2, #8
 8001348:	4619      	mov	r1, r3
 800134a:	481a      	ldr	r0, [pc, #104]	; (80013b4 <MX_TIM1_Init+0x148>)
 800134c:	f005 f8ec 	bl	8006528 <HAL_TIM_PWM_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001356:	f000 fab9 	bl	80018cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	220c      	movs	r2, #12
 8001360:	4619      	mov	r1, r3
 8001362:	4814      	ldr	r0, [pc, #80]	; (80013b4 <MX_TIM1_Init+0x148>)
 8001364:	f005 f8e0 	bl	8006528 <HAL_TIM_PWM_ConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800136e:	f000 faad 	bl	80018cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	4619      	mov	r1, r3
 8001394:	4807      	ldr	r0, [pc, #28]	; (80013b4 <MX_TIM1_Init+0x148>)
 8001396:	f005 fdf9 	bl	8006f8c <HAL_TIMEx_ConfigBreakDeadTime>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80013a0:	f000 fa94 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013a4:	4803      	ldr	r0, [pc, #12]	; (80013b4 <MX_TIM1_Init+0x148>)
 80013a6:	f002 fc1f 	bl	8003be8 <HAL_TIM_MspPostInit>

}
 80013aa:	bf00      	nop
 80013ac:	3748      	adds	r7, #72	; 0x48
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200043b0 	.word	0x200043b0
 80013b8:	40010000 	.word	0x40010000

080013bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	463b      	mov	r3, r7
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <MX_TIM3_Init+0x94>)
 80013da:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <MX_TIM3_Init+0x98>)
 80013dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 80013de:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <MX_TIM3_Init+0x94>)
 80013e0:	22a7      	movs	r2, #167	; 0xa7
 80013e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <MX_TIM3_Init+0x94>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80013ea:	4b19      	ldr	r3, [pc, #100]	; (8001450 <MX_TIM3_Init+0x94>)
 80013ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80013f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <MX_TIM3_Init+0x94>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <MX_TIM3_Init+0x94>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013fe:	4814      	ldr	r0, [pc, #80]	; (8001450 <MX_TIM3_Init+0x94>)
 8001400:	f004 feae 	bl	8006160 <HAL_TIM_Base_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800140a:	f000 fa5f 	bl	80018cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001412:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	4619      	mov	r1, r3
 800141a:	480d      	ldr	r0, [pc, #52]	; (8001450 <MX_TIM3_Init+0x94>)
 800141c:	f005 f94a 	bl	80066b4 <HAL_TIM_ConfigClockSource>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001426:	f000 fa51 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001432:	463b      	mov	r3, r7
 8001434:	4619      	mov	r1, r3
 8001436:	4806      	ldr	r0, [pc, #24]	; (8001450 <MX_TIM3_Init+0x94>)
 8001438:	f005 fd2c 	bl	8006e94 <HAL_TIMEx_MasterConfigSynchronization>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001442:	f000 fa43 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200042d0 	.word	0x200042d0
 8001454:	40000400 	.word	0x40000400

08001458 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	463b      	mov	r3, r7
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001474:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <MX_TIM4_Init+0x94>)
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <MX_TIM4_Init+0x98>)
 8001478:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <MX_TIM4_Init+0x94>)
 800147c:	22a7      	movs	r2, #167	; 0xa7
 800147e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <MX_TIM4_Init+0x94>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <MX_TIM4_Init+0x94>)
 8001488:	f242 7210 	movw	r2, #10000	; 0x2710
 800148c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_TIM4_Init+0x94>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_TIM4_Init+0x94>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800149a:	4814      	ldr	r0, [pc, #80]	; (80014ec <MX_TIM4_Init+0x94>)
 800149c:	f004 fe60 	bl	8006160 <HAL_TIM_Base_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80014a6:	f000 fa11 	bl	80018cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	4619      	mov	r1, r3
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <MX_TIM4_Init+0x94>)
 80014b8:	f005 f8fc 	bl	80066b4 <HAL_TIM_ConfigClockSource>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80014c2:	f000 fa03 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014ce:	463b      	mov	r3, r7
 80014d0:	4619      	mov	r1, r3
 80014d2:	4806      	ldr	r0, [pc, #24]	; (80014ec <MX_TIM4_Init+0x94>)
 80014d4:	f005 fcde 	bl	8006e94 <HAL_TIMEx_MasterConfigSynchronization>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80014de:	f000 f9f5 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200041bc 	.word	0x200041bc
 80014f0:	40000800 	.word	0x40000800

080014f4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_UART4_Init+0x4c>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <MX_UART4_Init+0x50>)
 80014fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <MX_UART4_Init+0x4c>)
 8001500:	4a11      	ldr	r2, [pc, #68]	; (8001548 <MX_UART4_Init+0x54>)
 8001502:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_UART4_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <MX_UART4_Init+0x4c>)
 800150c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001510:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_UART4_Init+0x4c>)
 8001514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001518:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_UART4_Init+0x4c>)
 800151c:	220c      	movs	r2, #12
 800151e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <MX_UART4_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_UART4_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <MX_UART4_Init+0x4c>)
 800152e:	f005 fd93 	bl	8007058 <HAL_UART_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_UART4_Init+0x48>
  {
    Error_Handler();
 8001538:	f000 f9c8 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20004424 	.word	0x20004424
 8001544:	40004c00 	.word	0x40004c00
 8001548:	000186a0 	.word	0x000186a0

0800154c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_USART1_UART_Init+0x4c>)
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <MX_USART1_UART_Init+0x50>)
 8001554:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <MX_USART1_UART_Init+0x4c>)
 8001558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800155c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_USART1_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <MX_USART1_UART_Init+0x4c>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <MX_USART1_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <MX_USART1_UART_Init+0x4c>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <MX_USART1_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_USART1_UART_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_USART1_UART_Init+0x4c>)
 8001584:	f005 fd68 	bl	8007058 <HAL_UART_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800158e:	f000 f99d 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20004334 	.word	0x20004334
 800159c:	40011000 	.word	0x40011000

080015a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <MX_USART3_UART_Init+0x50>)
 80015a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015d8:	f005 fd3e 	bl	8007058 <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015e2:	f000 f973 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20004204 	.word	0x20004204
 80015f0:	40004800 	.word	0x40004800

080015f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b3a      	ldr	r3, [pc, #232]	; (80016f8 <MX_GPIO_Init+0x104>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a39      	ldr	r2, [pc, #228]	; (80016f8 <MX_GPIO_Init+0x104>)
 8001614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <MX_GPIO_Init+0x104>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <MX_GPIO_Init+0x104>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a32      	ldr	r2, [pc, #200]	; (80016f8 <MX_GPIO_Init+0x104>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <MX_GPIO_Init+0x104>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <MX_GPIO_Init+0x104>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a2b      	ldr	r2, [pc, #172]	; (80016f8 <MX_GPIO_Init+0x104>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <MX_GPIO_Init+0x104>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <MX_GPIO_Init+0x104>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a24      	ldr	r2, [pc, #144]	; (80016f8 <MX_GPIO_Init+0x104>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <MX_GPIO_Init+0x104>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IRQ_GPIO_Port, IRQ_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2110      	movs	r1, #16
 800167e:	481f      	ldr	r0, [pc, #124]	; (80016fc <MX_GPIO_Init+0x108>)
 8001680:	f002 ffe4 	bl	800464c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	2130      	movs	r1, #48	; 0x30
 8001688:	481d      	ldr	r0, [pc, #116]	; (8001700 <MX_GPIO_Init+0x10c>)
 800168a:	f002 ffdf 	bl	800464c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	f243 0104 	movw	r1, #12292	; 0x3004
 8001694:	481b      	ldr	r0, [pc, #108]	; (8001704 <MX_GPIO_Init+0x110>)
 8001696:	f002 ffd9 	bl	800464c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 800169a:	2310      	movs	r3, #16
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169e:	2301      	movs	r3, #1
 80016a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a6:	2302      	movs	r3, #2
 80016a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	4812      	ldr	r0, [pc, #72]	; (80016fc <MX_GPIO_Init+0x108>)
 80016b2:	f002 fe31 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 80016b6:	2330      	movs	r3, #48	; 0x30
 80016b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c2:	2302      	movs	r3, #2
 80016c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	480c      	ldr	r0, [pc, #48]	; (8001700 <MX_GPIO_Init+0x10c>)
 80016ce:	f002 fe23 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 80016d2:	f243 0304 	movw	r3, #12292	; 0x3004
 80016d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	4806      	ldr	r0, [pc, #24]	; (8001704 <MX_GPIO_Init+0x110>)
 80016ec:	f002 fe14 	bl	8004318 <HAL_GPIO_Init>

}
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	; 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020000 	.word	0x40020000
 8001700:	40020800 	.word	0x40020800
 8001704:	40020400 	.word	0x40020400

08001708 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001710:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001714:	4839      	ldr	r0, [pc, #228]	; (80017fc <HAL_UART_RxCpltCallback+0xf4>)
 8001716:	f002 ffb2 	bl	800467e <HAL_GPIO_TogglePin>
	if (huart->Instance == USART3)  //current UART
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a38      	ldr	r2, [pc, #224]	; (8001800 <HAL_UART_RxCpltCallback+0xf8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d12b      	bne.n	800177c <HAL_UART_RxCpltCallback+0x74>
	{
		if(Rx_data[0] == 's'){
 8001724:	4b37      	ldr	r3, [pc, #220]	; (8001804 <HAL_UART_RxCpltCallback+0xfc>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b73      	cmp	r3, #115	; 0x73
 800172a:	d111      	bne.n	8001750 <HAL_UART_RxCpltCallback+0x48>
			i = 0;
 800172c:	4b36      	ldr	r3, [pc, #216]	; (8001808 <HAL_UART_RxCpltCallback+0x100>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
             for(int count =0; count< 6; count++)
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	e007      	b.n	8001748 <HAL_UART_RxCpltCallback+0x40>
            	 Rx_buffer[count] = 0x00;
 8001738:	4a34      	ldr	r2, [pc, #208]	; (800180c <HAL_UART_RxCpltCallback+0x104>)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4413      	add	r3, r2
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
             for(int count =0; count< 6; count++)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3301      	adds	r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b05      	cmp	r3, #5
 800174c:	ddf4      	ble.n	8001738 <HAL_UART_RxCpltCallback+0x30>
 800174e:	e015      	b.n	800177c <HAL_UART_RxCpltCallback+0x74>
		}
		else{
			if(Rx_data[0] != 'e'){
 8001750:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <HAL_UART_RxCpltCallback+0xfc>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b65      	cmp	r3, #101	; 0x65
 8001756:	d00b      	beq.n	8001770 <HAL_UART_RxCpltCallback+0x68>
			 Rx_buffer[i] = Rx_data[0];
 8001758:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <HAL_UART_RxCpltCallback+0x100>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a29      	ldr	r2, [pc, #164]	; (8001804 <HAL_UART_RxCpltCallback+0xfc>)
 800175e:	7811      	ldrb	r1, [r2, #0]
 8001760:	4a2a      	ldr	r2, [pc, #168]	; (800180c <HAL_UART_RxCpltCallback+0x104>)
 8001762:	54d1      	strb	r1, [r2, r3]
			 i++;
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <HAL_UART_RxCpltCallback+0x100>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	4a27      	ldr	r2, [pc, #156]	; (8001808 <HAL_UART_RxCpltCallback+0x100>)
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e005      	b.n	800177c <HAL_UART_RxCpltCallback+0x74>
//			 HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);

			}
			else{
				sbus_decode(Rx_buffer);
 8001770:	4826      	ldr	r0, [pc, #152]	; (800180c <HAL_UART_RxCpltCallback+0x104>)
 8001772:	f002 f899 	bl	80038a8 <sbus_decode>
                Rx_data[0] = 0;
 8001776:	4b23      	ldr	r3, [pc, #140]	; (8001804 <HAL_UART_RxCpltCallback+0xfc>)
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
//				HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
			}
		}
	}
	if (huart->Instance == USART1)  //current UART
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a23      	ldr	r2, [pc, #140]	; (8001810 <HAL_UART_RxCpltCallback+0x108>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d12b      	bne.n	80017de <HAL_UART_RxCpltCallback+0xd6>
	{
		if(Rx_data[0] == 's'){
 8001786:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <HAL_UART_RxCpltCallback+0xfc>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b73      	cmp	r3, #115	; 0x73
 800178c:	d111      	bne.n	80017b2 <HAL_UART_RxCpltCallback+0xaa>
			i = 0;
 800178e:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <HAL_UART_RxCpltCallback+0x100>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
             for(int count =0; count< 6; count++)
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	e007      	b.n	80017aa <HAL_UART_RxCpltCallback+0xa2>
            	 Rx_buffer[count] = 0x00;
 800179a:	4a1c      	ldr	r2, [pc, #112]	; (800180c <HAL_UART_RxCpltCallback+0x104>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4413      	add	r3, r2
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
             for(int count =0; count< 6; count++)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	3301      	adds	r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b05      	cmp	r3, #5
 80017ae:	ddf4      	ble.n	800179a <HAL_UART_RxCpltCallback+0x92>
 80017b0:	e015      	b.n	80017de <HAL_UART_RxCpltCallback+0xd6>
		}
		else{
			if(Rx_data[0] != 'e'){
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_UART_RxCpltCallback+0xfc>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b65      	cmp	r3, #101	; 0x65
 80017b8:	d00b      	beq.n	80017d2 <HAL_UART_RxCpltCallback+0xca>
			 Rx_buffer[i] = Rx_data[0];
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <HAL_UART_RxCpltCallback+0x100>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <HAL_UART_RxCpltCallback+0xfc>)
 80017c0:	7811      	ldrb	r1, [r2, #0]
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <HAL_UART_RxCpltCallback+0x104>)
 80017c4:	54d1      	strb	r1, [r2, r3]
			 i++;
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_UART_RxCpltCallback+0x100>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	3301      	adds	r3, #1
 80017cc:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_UART_RxCpltCallback+0x100>)
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	e005      	b.n	80017de <HAL_UART_RxCpltCallback+0xd6>
//			 HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);

			}
			else{
				sbus_decode(Rx_buffer);
 80017d2:	480e      	ldr	r0, [pc, #56]	; (800180c <HAL_UART_RxCpltCallback+0x104>)
 80017d4:	f002 f868 	bl	80038a8 <sbus_decode>
                Rx_data[0] = 0;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_UART_RxCpltCallback+0xfc>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
//				HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
			}
		}
	}
	 HAL_UART_Receive_IT(&huart1, (uint8_t *) Rx_data, 1);
 80017de:	2201      	movs	r2, #1
 80017e0:	4908      	ldr	r1, [pc, #32]	; (8001804 <HAL_UART_RxCpltCallback+0xfc>)
 80017e2:	480c      	ldr	r0, [pc, #48]	; (8001814 <HAL_UART_RxCpltCallback+0x10c>)
 80017e4:	f005 fd1e 	bl	8007224 <HAL_UART_Receive_IT>
	 HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
 80017e8:	2201      	movs	r2, #1
 80017ea:	4906      	ldr	r1, [pc, #24]	; (8001804 <HAL_UART_RxCpltCallback+0xfc>)
 80017ec:	480a      	ldr	r0, [pc, #40]	; (8001818 <HAL_UART_RxCpltCallback+0x110>)
 80017ee:	f005 fd19 	bl	8007224 <HAL_UART_Receive_IT>
}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40020400 	.word	0x40020400
 8001800:	40004800 	.word	0x40004800
 8001804:	200042c0 	.word	0x200042c0
 8001808:	20004328 	.word	0x20004328
 800180c:	200044e4 	.word	0x200044e4
 8001810:	40011000 	.word	0x40011000
 8001814:	20004334 	.word	0x20004334
 8001818:	20004204 	.word	0x20004204

0800181c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d102      	bne.n	8001834 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		print_raw(0);
 800182e:	2000      	movs	r0, #0
 8001830:	f001 ff00 	bl	8003634 <print_raw>
	}
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40000400 	.word	0x40000400

08001840 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  for(;;)
  {


      uint8_t temp;
	  temp = process_MPU();
 8001848:	f000 fb96 	bl	8001f78 <process_MPU>
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
	  packaget_t *data = osMailAlloc(myQueue01Handle, osWaitForever);
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <StartDefaultTask+0x50>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001858:	4618      	mov	r0, r3
 800185a:	f006 fd1e 	bl	800829a <osMailAlloc>
 800185e:	60b8      	str	r0, [r7, #8]
	   data->length = Acc_x;
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <StartDefaultTask+0x54>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	601a      	str	r2, [r3, #0]
	   data->width = 20;
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2214      	movs	r2, #20
 800186c:	605a      	str	r2, [r3, #4]
	   data->height = 5;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2205      	movs	r2, #5
 8001872:	609a      	str	r2, [r3, #8]
	   data->weight = 10;
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	220a      	movs	r2, #10
 8001878:	60da      	str	r2, [r3, #12]
	   osMailPut(myQueue01Handle, data);
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <StartDefaultTask+0x50>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68b9      	ldr	r1, [r7, #8]
 8001880:	4618      	mov	r0, r3
 8001882:	f006 fd1f 	bl	80082c4 <osMailPut>
      osDelay(1);
 8001886:	2001      	movs	r0, #1
 8001888:	f006 fb9b 	bl	8007fc2 <osDelay>
  {
 800188c:	e7dc      	b.n	8001848 <StartDefaultTask+0x8>
 800188e:	bf00      	nop
 8001890:	200044c0 	.word	0x200044c0
 8001894:	20004374 	.word	0x20004374

08001898 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  osEvent mail_event = osMailGet(myQueue01Handle, 0);
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <StartTask02+0x30>)
 80018a2:	6819      	ldr	r1, [r3, #0]
 80018a4:	f107 0308 	add.w	r3, r7, #8
 80018a8:	2200      	movs	r2, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f006 fd48 	bl	8008340 <osMailGet>
	  packaget_t *data = mail_event.value.p;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	617b      	str	r3, [r7, #20]
	  //Use received data, using data->height, data->weight, etc.
	  osMailFree(myQueue01Handle, data);
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <StartTask02+0x30>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6979      	ldr	r1, [r7, #20]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f006 fdb4 	bl	8008428 <osMailFree>
    osDelay(10);
 80018c0:	200a      	movs	r0, #10
 80018c2:	f006 fb7e 	bl	8007fc2 <osDelay>
  {
 80018c6:	e7eb      	b.n	80018a0 <StartTask02+0x8>
 80018c8:	200044c0 	.word	0x200044c0

080018cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	0000      	movs	r0, r0
 80018dc:	0000      	movs	r0, r0
	...

080018e0 <ftoa>:
union float_con{
	float number;
	uint8_t byte_array[4];
};
char * ftoa(double f, char * buf, int precision)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b08b      	sub	sp, #44	; 0x2c
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	ed87 0b02 	vstr	d0, [r7, #8]
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
	char * ptr = buf;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2b0a      	cmp	r3, #10
 80018fa:	dd01      	ble.n	8001900 <ftoa+0x20>
		precision = MAX_PRECISION;
 80018fc:	230a      	movs	r3, #10
 80018fe:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800190c:	f7ff f896 	bl	8000a3c <__aeabi_dcmplt>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00a      	beq.n	800192c <ftoa+0x4c>
	{
		f = -f;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001920:	60fb      	str	r3, [r7, #12]
		*ptr++ = '-';
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	627a      	str	r2, [r7, #36]	; 0x24
 8001928:	222d      	movs	r2, #45	; 0x2d
 800192a:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	da4f      	bge.n	80019d2 <ftoa+0xf2>
	{
		if (f < 1.0) precision = 6;
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	4b80      	ldr	r3, [pc, #512]	; (8001b38 <ftoa+0x258>)
 8001938:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800193c:	f7ff f87e 	bl	8000a3c <__aeabi_dcmplt>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <ftoa+0x6c>
 8001946:	2306      	movs	r3, #6
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	e042      	b.n	80019d2 <ftoa+0xf2>
		else if (f < 10.0) precision = 5;
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	4b7a      	ldr	r3, [pc, #488]	; (8001b3c <ftoa+0x25c>)
 8001952:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001956:	f7ff f871 	bl	8000a3c <__aeabi_dcmplt>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <ftoa+0x86>
 8001960:	2305      	movs	r3, #5
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	e035      	b.n	80019d2 <ftoa+0xf2>
		else if (f < 100.0) precision = 4;
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	4b75      	ldr	r3, [pc, #468]	; (8001b40 <ftoa+0x260>)
 800196c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001970:	f7ff f864 	bl	8000a3c <__aeabi_dcmplt>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <ftoa+0xa0>
 800197a:	2304      	movs	r3, #4
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	e028      	b.n	80019d2 <ftoa+0xf2>
		else if (f < 1000.0) precision = 3;
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	4b6f      	ldr	r3, [pc, #444]	; (8001b44 <ftoa+0x264>)
 8001986:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800198a:	f7ff f857 	bl	8000a3c <__aeabi_dcmplt>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <ftoa+0xba>
 8001994:	2303      	movs	r3, #3
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	e01b      	b.n	80019d2 <ftoa+0xf2>
		else if (f < 10000.0) precision = 2;
 800199a:	a363      	add	r3, pc, #396	; (adr r3, 8001b28 <ftoa+0x248>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019a4:	f7ff f84a 	bl	8000a3c <__aeabi_dcmplt>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <ftoa+0xd4>
 80019ae:	2302      	movs	r3, #2
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	e00e      	b.n	80019d2 <ftoa+0xf2>
		else if (f < 100000.0) precision = 1;
 80019b4:	a35e      	add	r3, pc, #376	; (adr r3, 8001b30 <ftoa+0x250>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019be:	f7ff f83d 	bl	8000a3c <__aeabi_dcmplt>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <ftoa+0xee>
 80019c8:	2301      	movs	r3, #1
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	e001      	b.n	80019d2 <ftoa+0xf2>
		else precision = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00f      	beq.n	80019f8 <ftoa+0x118>
		f += rounders[precision];
 80019d8:	4a5b      	ldr	r2, [pc, #364]	; (8001b48 <ftoa+0x268>)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4413      	add	r3, r2
 80019e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4623      	mov	r3, r4
 80019e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019ec:	f7fe fbfe 	bl	80001ec <__adddf3>
 80019f0:	4603      	mov	r3, r0
 80019f2:	460c      	mov	r4, r1
 80019f4:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// integer part...
	intPart = f;
 80019f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019fc:	f7ff f85c 	bl	8000ab8 <__aeabi_d2iz>
 8001a00:	4603      	mov	r3, r0
 8001a02:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 8001a04:	69f8      	ldr	r0, [r7, #28]
 8001a06:	f7fe fd3d 	bl	8000484 <__aeabi_i2d>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	460c      	mov	r4, r1
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4623      	mov	r3, r4
 8001a12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a16:	f7fe fbe7 	bl	80001e8 <__aeabi_dsub>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	460c      	mov	r4, r1
 8001a1e:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (!intPart)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <ftoa+0x154>
		*ptr++ = '0';
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	627a      	str	r2, [r7, #36]	; 0x24
 8001a2e:	2230      	movs	r2, #48	; 0x30
 8001a30:	701a      	strb	r2, [r3, #0]
 8001a32:	e038      	b.n	8001aa6 <ftoa+0x1c6>
	else
	{
		// save start pointer
		p = ptr;
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 8001a38:	e01a      	b.n	8001a70 <ftoa+0x190>
		{
			*p++ = '0' + intPart % 10;
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	4b43      	ldr	r3, [pc, #268]	; (8001b4c <ftoa+0x26c>)
 8001a3e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a42:	1099      	asrs	r1, r3, #2
 8001a44:	17d3      	asrs	r3, r2, #31
 8001a46:	1ac9      	subs	r1, r1, r3
 8001a48:	460b      	mov	r3, r1
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	1ad1      	subs	r1, r2, r3
 8001a52:	b2ca      	uxtb	r2, r1
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	1c59      	adds	r1, r3, #1
 8001a58:	6239      	str	r1, [r7, #32]
 8001a5a:	3230      	adds	r2, #48	; 0x30
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	4a3a      	ldr	r2, [pc, #232]	; (8001b4c <ftoa+0x26c>)
 8001a64:	fb82 1203 	smull	r1, r2, r2, r3
 8001a68:	1092      	asrs	r2, r2, #2
 8001a6a:	17db      	asrs	r3, r3, #31
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	61fb      	str	r3, [r7, #28]
		while (intPart)
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1e1      	bne.n	8001a3a <ftoa+0x15a>
		}

		// save end pos
		p1 = p;
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 8001a7a:	e00e      	b.n	8001a9a <ftoa+0x1ba>
		{
			c = *--p;
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	623b      	str	r3, [r7, #32]
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	627a      	str	r2, [r7, #36]	; 0x24
 8001a96:	7dfa      	ldrb	r2, [r7, #23]
 8001a98:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8001a9a:	6a3a      	ldr	r2, [r7, #32]
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d8ec      	bhi.n	8001a7c <ftoa+0x19c>
		}

		// restore end pos
		ptr = p1;
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d032      	beq.n	8001b12 <ftoa+0x232>
	{
		// place decimal point
		*ptr++ = '.';
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	627a      	str	r2, [r7, #36]	; 0x24
 8001ab2:	222e      	movs	r2, #46	; 0x2e
 8001ab4:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 8001ab6:	e027      	b.n	8001b08 <ftoa+0x228>
		{
			f *= 10.0;
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <ftoa+0x25c>)
 8001abe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ac2:	f7fe fd49 	bl	8000558 <__aeabi_dmul>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	460c      	mov	r4, r1
 8001aca:	e9c7 3402 	strd	r3, r4, [r7, #8]
			c = f;
 8001ace:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ad2:	f7ff f819 	bl	8000b08 <__aeabi_d2uiz>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	627a      	str	r2, [r7, #36]	; 0x24
 8001ae0:	7dfa      	ldrb	r2, [r7, #23]
 8001ae2:	3230      	adds	r2, #48	; 0x30
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	701a      	strb	r2, [r3, #0]
			f -= c;
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fcca 	bl	8000484 <__aeabi_i2d>
 8001af0:	4603      	mov	r3, r0
 8001af2:	460c      	mov	r4, r1
 8001af4:	461a      	mov	r2, r3
 8001af6:	4623      	mov	r3, r4
 8001af8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001afc:	f7fe fb74 	bl	80001e8 <__aeabi_dsub>
 8001b00:	4603      	mov	r3, r0
 8001b02:	460c      	mov	r4, r1
 8001b04:	e9c7 3402 	strd	r3, r4, [r7, #8]
		while (precision--)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	1e5a      	subs	r2, r3, #1
 8001b0c:	603a      	str	r2, [r7, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1d2      	bne.n	8001ab8 <ftoa+0x1d8>
		}
	}

	// terminating zero
	*ptr = 0;
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]

	return buf;
 8001b18:	687b      	ldr	r3, [r7, #4]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	372c      	adds	r7, #44	; 0x2c
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd90      	pop	{r4, r7, pc}
 8001b22:	bf00      	nop
 8001b24:	f3af 8000 	nop.w
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	40c38800 	.word	0x40c38800
 8001b30:	00000000 	.word	0x00000000
 8001b34:	40f86a00 	.word	0x40f86a00
 8001b38:	3ff00000 	.word	0x3ff00000
 8001b3c:	40240000 	.word	0x40240000
 8001b40:	40590000 	.word	0x40590000
 8001b44:	408f4000 	.word	0x408f4000
 8001b48:	0800b210 	.word	0x0800b210
 8001b4c:	66666667 	.word	0x66666667

08001b50 <init_MPU>:
  memcpy(bytes_temp, thing.bytes, 4);
}



char init_MPU(){
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b091      	sub	sp, #68	; 0x44
 8001b54:	af02      	add	r7, sp, #8
    char status = 1;
 8001b56:	2301      	movs	r3, #1
 8001b58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 8001b5c:	23d0      	movs	r3, #208	; 0xd0
 8001b5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t magnet_address = MAG_ADRRESS;
 8001b62:	2318      	movs	r3, #24
 8001b64:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

    qr0 = 1.0;
 8001b68:	4b89      	ldr	r3, [pc, #548]	; (8001d90 <init_MPU+0x240>)
 8001b6a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b6e:	601a      	str	r2, [r3, #0]

  	char rx_data[25];
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8001b70:	e00f      	b.n	8001b92 <init_MPU+0x42>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8001b72:	2201      	movs	r2, #1
 8001b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b78:	4886      	ldr	r0, [pc, #536]	; (8001d94 <init_MPU+0x244>)
 8001b7a:	f002 fd67 	bl	800464c <HAL_GPIO_WritePin>
    	HAL_Delay(500);
 8001b7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b82:	f002 fa57 	bl	8004034 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b8c:	4881      	ldr	r0, [pc, #516]	; (8001d94 <init_MPU+0x244>)
 8001b8e:	f002 fd5d 	bl	800464c <HAL_GPIO_WritePin>
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8001b92:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001b96:	b299      	uxth	r1, r3
 8001b98:	2302      	movs	r3, #2
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	487e      	ldr	r0, [pc, #504]	; (8001d98 <init_MPU+0x248>)
 8001b9e:	f003 f9e5 	bl	8004f6c <HAL_I2C_IsDeviceReady>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1e4      	bne.n	8001b72 <init_MPU+0x22>
      }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bae:	4879      	ldr	r0, [pc, #484]	; (8001d94 <init_MPU+0x244>)
 8001bb0:	f002 fd4c 	bl	800464c <HAL_GPIO_WritePin>


//    HAL_UART_Transmit(&huart3,rx_data, strlen(rx_data),1000);

	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 8001bb4:	236b      	movs	r3, #107	; 0x6b
 8001bb6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    d[1] = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8001bc0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001bc4:	b299      	uxth	r1, r3
 8001bc6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	4871      	ldr	r0, [pc, #452]	; (8001d98 <init_MPU+0x248>)
 8001bd4:	f002 fea6 	bl	8004924 <HAL_I2C_Master_Transmit>
	{

	}

	/* Set data sample rate */
	d[0] = SAMPLE_RATE;
 8001bd8:	2319      	movs	r3, #25
 8001bda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = sample_1khz;
 8001bde:	2307      	movs	r3, #7
 8001be0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001be4:	bf00      	nop
 8001be6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001bea:	b299      	uxth	r1, r3
 8001bec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001bf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	4867      	ldr	r0, [pc, #412]	; (8001d98 <init_MPU+0x248>)
 8001bfa:	f002 fe93 	bl	8004924 <HAL_I2C_Master_Transmit>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f0      	bne.n	8001be6 <init_MPU+0x96>

	d[0] = GYRO_CONFIG;
 8001c04:	231b      	movs	r3, #27
 8001c06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = gyro_con;
 8001c0a:	2318      	movs	r3, #24
 8001c0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001c10:	bf00      	nop
 8001c12:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001c16:	b299      	uxth	r1, r3
 8001c18:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001c1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2302      	movs	r3, #2
 8001c24:	485c      	ldr	r0, [pc, #368]	; (8001d98 <init_MPU+0x248>)
 8001c26:	f002 fe7d 	bl	8004924 <HAL_I2C_Master_Transmit>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f0      	bne.n	8001c12 <init_MPU+0xc2>

	d[0] = ACCEL_CONFIG;
 8001c30:	231c      	movs	r3, #28
 8001c32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = 0x00;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001c3c:	bf00      	nop
 8001c3e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001c42:	b299      	uxth	r1, r3
 8001c44:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2302      	movs	r3, #2
 8001c50:	4851      	ldr	r0, [pc, #324]	; (8001d98 <init_MPU+0x248>)
 8001c52:	f002 fe67 	bl	8004924 <HAL_I2C_Master_Transmit>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f0      	bne.n	8001c3e <init_MPU+0xee>

	d[0] = ACCEL_CONFIG2;
 8001c5c:	231d      	movs	r3, #29
 8001c5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = 0x0A;
 8001c62:	230a      	movs	r3, #10
 8001c64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001c68:	bf00      	nop
 8001c6a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001c6e:	b299      	uxth	r1, r3
 8001c70:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	4846      	ldr	r0, [pc, #280]	; (8001d98 <init_MPU+0x248>)
 8001c7e:	f002 fe51 	bl	8004924 <HAL_I2C_Master_Transmit>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <init_MPU+0x11a>


	d[0] = INIT_ENB;
 8001c88:	2338      	movs	r3, #56	; 0x38
 8001c8a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = inter;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001c94:	bf00      	nop
 8001c96:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001c9a:	b299      	uxth	r1, r3
 8001c9c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	483b      	ldr	r0, [pc, #236]	; (8001d98 <init_MPU+0x248>)
 8001caa:	f002 fe3b 	bl	8004924 <HAL_I2C_Master_Transmit>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <init_MPU+0x146>

	d[0] = USER_CTRL;
 8001cb4:	236a      	movs	r3, #106	; 0x6a
 8001cb6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    d[1] = zero;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001cc0:	bf00      	nop
 8001cc2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001cc6:	b299      	uxth	r1, r3
 8001cc8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	4830      	ldr	r0, [pc, #192]	; (8001d98 <init_MPU+0x248>)
 8001cd6:	f002 fe25 	bl	8004924 <HAL_I2C_Master_Transmit>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f0      	bne.n	8001cc2 <init_MPU+0x172>

	d[0] = INT_BYPASS;
 8001ce0:	2337      	movs	r3, #55	; 0x37
 8001ce2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = stop_i2c_master;
 8001ce6:	2322      	movs	r3, #34	; 0x22
 8001ce8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001cec:	bf00      	nop
 8001cee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001cf2:	b299      	uxth	r1, r3
 8001cf4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2302      	movs	r3, #2
 8001d00:	4825      	ldr	r0, [pc, #148]	; (8001d98 <init_MPU+0x248>)
 8001d02:	f002 fe0f 	bl	8004924 <HAL_I2C_Master_Transmit>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <init_MPU+0x19e>

	if (HAL_I2C_IsDeviceReady(&hi2c1, magnet_address, 3, 200) != HAL_OK) {
 8001d0c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001d10:	b299      	uxth	r1, r3
 8001d12:	23c8      	movs	r3, #200	; 0xc8
 8001d14:	2203      	movs	r2, #3
 8001d16:	4820      	ldr	r0, [pc, #128]	; (8001d98 <init_MPU+0x248>)
 8001d18:	f003 f928 	bl	8004f6c <HAL_I2C_IsDeviceReady>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d01e      	beq.n	8001d60 <init_MPU+0x210>
	    	strcpy( rx_data, "No Device \r \n");
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <init_MPU+0x24c>)
 8001d28:	461c      	mov	r4, r3
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d2e:	c407      	stmia	r4!, {r0, r1, r2}
 8001d30:	8023      	strh	r3, [r4, #0]
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8001d32:	2200      	movs	r2, #0
 8001d34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d38:	4816      	ldr	r0, [pc, #88]	; (8001d94 <init_MPU+0x244>)
 8001d3a:	f002 fc87 	bl	800464c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d44:	4813      	ldr	r0, [pc, #76]	; (8001d94 <init_MPU+0x244>)
 8001d46:	f002 fc81 	bl	800464c <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 8001d4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d4e:	f002 f971 	bl	8004034 <HAL_Delay>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d58:	480e      	ldr	r0, [pc, #56]	; (8001d94 <init_MPU+0x244>)
 8001d5a:	f002 fc77 	bl	800464c <HAL_GPIO_WritePin>
 8001d5e:	e0f4      	b.n	8001f4a <init_MPU+0x3fa>
	      }
	      else{
	    	    d[0] = CNTL1_AD;
 8001d60:	230a      	movs	r3, #10
 8001d62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	  	d[1] = ROM_MODE;
 8001d66:	231f      	movs	r3, #31
 8001d68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	  	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) magnet_address,(uint8_t *)d,2,2)!=HAL_OK);
 8001d6c:	bf00      	nop
 8001d6e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001d72:	b299      	uxth	r1, r3
 8001d74:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001d78:	2302      	movs	r3, #2
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	4806      	ldr	r0, [pc, #24]	; (8001d98 <init_MPU+0x248>)
 8001d80:	f002 fdd0 	bl	8004924 <HAL_I2C_Master_Transmit>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f1      	bne.n	8001d6e <init_MPU+0x21e>

	    	  //	HAL_Delay(100);
	    	  	 for(long i = 1000000; i>0 ;i--){
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <init_MPU+0x250>)
 8001d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d8e:	e00c      	b.n	8001daa <init_MPU+0x25a>
 8001d90:	20004050 	.word	0x20004050
 8001d94:	40020400 	.word	0x40020400
 8001d98:	200040d8 	.word	0x200040d8
 8001d9c:	0800b1d0 	.word	0x0800b1d0
 8001da0:	000f4240 	.word	0x000f4240
 8001da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da6:	3b01      	subs	r3, #1
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
 8001daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	dcf9      	bgt.n	8001da4 <init_MPU+0x254>

	    	  		    	      }

	    	  	uint8_t sensitive = ASAX_AD;
 8001db0:	2310      	movs	r3, #16
 8001db2:	71fb      	strb	r3, [r7, #7]
	    	  	uint8_t asa [3];
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &sensitive, 1, 1000) != HAL_OK);
 8001db4:	bf00      	nop
 8001db6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001dba:	b299      	uxth	r1, r3
 8001dbc:	1dfa      	adds	r2, r7, #7
 8001dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	4864      	ldr	r0, [pc, #400]	; (8001f58 <init_MPU+0x408>)
 8001dc8:	f002 fdac 	bl	8004924 <HAL_I2C_Master_Transmit>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f1      	bne.n	8001db6 <init_MPU+0x266>
	    	      while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &asa,3, 1000) != HAL_OK);
 8001dd2:	bf00      	nop
 8001dd4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001dd8:	b299      	uxth	r1, r3
 8001dda:	1d3a      	adds	r2, r7, #4
 8001ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2303      	movs	r3, #3
 8001de4:	485c      	ldr	r0, [pc, #368]	; (8001f58 <init_MPU+0x408>)
 8001de6:	f002 fe9b 	bl	8004b20 <HAL_I2C_Master_Receive>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f1      	bne.n	8001dd4 <init_MPU+0x284>

	    	      asax = (asa[0]-128)*0.5/128+1;
 8001df0:	793b      	ldrb	r3, [r7, #4]
 8001df2:	3b80      	subs	r3, #128	; 0x80
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fb45 	bl	8000484 <__aeabi_i2d>
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	4b57      	ldr	r3, [pc, #348]	; (8001f5c <init_MPU+0x40c>)
 8001e00:	f7fe fbaa 	bl	8000558 <__aeabi_dmul>
 8001e04:	4603      	mov	r3, r0
 8001e06:	460c      	mov	r4, r1
 8001e08:	4618      	mov	r0, r3
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <init_MPU+0x410>)
 8001e12:	f7fe fccb 	bl	80007ac <__aeabi_ddiv>
 8001e16:	4603      	mov	r3, r0
 8001e18:	460c      	mov	r4, r1
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <init_MPU+0x414>)
 8001e24:	f7fe f9e2 	bl	80001ec <__adddf3>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	4621      	mov	r1, r4
 8001e30:	f7fe fe8a 	bl	8000b48 <__aeabi_d2f>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b4c      	ldr	r3, [pc, #304]	; (8001f68 <init_MPU+0x418>)
 8001e38:	601a      	str	r2, [r3, #0]
	    	      asay = (asa[1]-128)*0.5/128+1;
 8001e3a:	797b      	ldrb	r3, [r7, #5]
 8001e3c:	3b80      	subs	r3, #128	; 0x80
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fb20 	bl	8000484 <__aeabi_i2d>
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	4b44      	ldr	r3, [pc, #272]	; (8001f5c <init_MPU+0x40c>)
 8001e4a:	f7fe fb85 	bl	8000558 <__aeabi_dmul>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	460c      	mov	r4, r1
 8001e52:	4618      	mov	r0, r3
 8001e54:	4621      	mov	r1, r4
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	4b41      	ldr	r3, [pc, #260]	; (8001f60 <init_MPU+0x410>)
 8001e5c:	f7fe fca6 	bl	80007ac <__aeabi_ddiv>
 8001e60:	4603      	mov	r3, r0
 8001e62:	460c      	mov	r4, r1
 8001e64:	4618      	mov	r0, r3
 8001e66:	4621      	mov	r1, r4
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <init_MPU+0x414>)
 8001e6e:	f7fe f9bd 	bl	80001ec <__adddf3>
 8001e72:	4603      	mov	r3, r0
 8001e74:	460c      	mov	r4, r1
 8001e76:	4618      	mov	r0, r3
 8001e78:	4621      	mov	r1, r4
 8001e7a:	f7fe fe65 	bl	8000b48 <__aeabi_d2f>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	4b3a      	ldr	r3, [pc, #232]	; (8001f6c <init_MPU+0x41c>)
 8001e82:	601a      	str	r2, [r3, #0]
	    	      asaz = (asa[2]-128)*0.5/128+1;
 8001e84:	79bb      	ldrb	r3, [r7, #6]
 8001e86:	3b80      	subs	r3, #128	; 0x80
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fafb 	bl	8000484 <__aeabi_i2d>
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <init_MPU+0x40c>)
 8001e94:	f7fe fb60 	bl	8000558 <__aeabi_dmul>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	460c      	mov	r4, r1
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	4621      	mov	r1, r4
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <init_MPU+0x410>)
 8001ea6:	f7fe fc81 	bl	80007ac <__aeabi_ddiv>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	460c      	mov	r4, r1
 8001eae:	4618      	mov	r0, r3
 8001eb0:	4621      	mov	r1, r4
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <init_MPU+0x414>)
 8001eb8:	f7fe f998 	bl	80001ec <__adddf3>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	460c      	mov	r4, r1
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	f7fe fe40 	bl	8000b48 <__aeabi_d2f>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <init_MPU+0x420>)
 8001ecc:	601a      	str	r2, [r3, #0]

	    	      d[0] = CNTL1_AD;
 8001ece:	230a      	movs	r3, #10
 8001ed0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	      d[1] = zero;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001eda:	bf00      	nop
 8001edc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001ee0:	b299      	uxth	r1, r3
 8001ee2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	2302      	movs	r3, #2
 8001eee:	481a      	ldr	r0, [pc, #104]	; (8001f58 <init_MPU+0x408>)
 8001ef0:	f002 fd18 	bl	8004924 <HAL_I2C_Master_Transmit>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <init_MPU+0x38c>

	    	      for(long i = 1000000; i>0 ;i--){
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <init_MPU+0x424>)
 8001efc:	633b      	str	r3, [r7, #48]	; 0x30
 8001efe:	e002      	b.n	8001f06 <init_MPU+0x3b6>
 8001f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f02:	3b01      	subs	r3, #1
 8001f04:	633b      	str	r3, [r7, #48]	; 0x30
 8001f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	dcf9      	bgt.n	8001f00 <init_MPU+0x3b0>

	    	      }

	    	      d[0] = CNTL1_AD;
 8001f0c:	230a      	movs	r3, #10
 8001f0e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	      d[1] = 0x16;
 8001f12:	2316      	movs	r3, #22
 8001f14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001f18:	bf00      	nop
 8001f1a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001f1e:	b299      	uxth	r1, r3
 8001f20:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	480a      	ldr	r0, [pc, #40]	; (8001f58 <init_MPU+0x408>)
 8001f2e:	f002 fcf9 	bl	8004924 <HAL_I2C_Master_Transmit>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f0      	bne.n	8001f1a <init_MPU+0x3ca>
	    	      for(long i = 1000000; i>0 ;i--){
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <init_MPU+0x424>)
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f3c:	e002      	b.n	8001f44 <init_MPU+0x3f4>
 8001f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f40:	3b01      	subs	r3, #1
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	dcf9      	bgt.n	8001f3e <init_MPU+0x3ee>

	    	    }
	    	      //HAL_Delay(100);
	      }
  return status;
 8001f4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	373c      	adds	r7, #60	; 0x3c
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd90      	pop	{r4, r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200040d8 	.word	0x200040d8
 8001f5c:	3fe00000 	.word	0x3fe00000
 8001f60:	40600000 	.word	0x40600000
 8001f64:	3ff00000 	.word	0x3ff00000
 8001f68:	20004518 	.word	0x20004518
 8001f6c:	200043a4 	.word	0x200043a4
 8001f70:	20004510 	.word	0x20004510
 8001f74:	000f4240 	.word	0x000f4240

08001f78 <process_MPU>:


uint8_t process_MPU(){
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b0a0      	sub	sp, #128	; 0x80
 8001f7c:	af02      	add	r7, sp, #8
	uint8_t mag_ava = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	uint8_t data[13];
	uint8_t mag_data[7];

	uint8_t status;
	uint8_t reg = ACCEL_XOUT_H;
 8001f84:	233b      	movs	r3, #59	; 0x3b
 8001f86:	77bb      	strb	r3, [r7, #30]
	uint8_t device_address = MPU_ADDRESS;
 8001f88:	23d0      	movs	r3, #208	; 0xd0
 8001f8a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	uint8_t magnet_address = MAG_ADRRESS;
 8001f8e:	2318      	movs	r3, #24
 8001f90:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	start = htim4.Instance->CNT;
 8001f94:	4bc4      	ldr	r3, [pc, #784]	; (80022a8 <process_MPU+0x330>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4bc3      	ldr	r3, [pc, #780]	; (80022ac <process_MPU+0x334>)
 8001f9e:	601a      	str	r2, [r3, #0]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 8001fa0:	bf00      	nop
 8001fa2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001fa6:	b299      	uxth	r1, r3
 8001fa8:	f107 021e 	add.w	r2, r7, #30
 8001fac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	48be      	ldr	r0, [pc, #760]	; (80022b0 <process_MPU+0x338>)
 8001fb6:	f002 fcb5 	bl	8004924 <HAL_I2C_Master_Transmit>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f0      	bne.n	8001fa2 <process_MPU+0x2a>
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 8001fc0:	bf00      	nop
 8001fc2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001fc6:	b299      	uxth	r1, r3
 8001fc8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	230e      	movs	r3, #14
 8001fd4:	48b6      	ldr	r0, [pc, #728]	; (80022b0 <process_MPU+0x338>)
 8001fd6:	f002 fda3 	bl	8004b20 <HAL_I2C_Master_Receive>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f0      	bne.n	8001fc2 <process_MPU+0x4a>

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 8001fe0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	b21a      	sxth	r2, r3
 8001fe8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001fec:	b21b      	sxth	r3, r3
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ffa:	4bae      	ldr	r3, [pc, #696]	; (80022b4 <process_MPU+0x33c>)
 8001ffc:	edc3 7a00 	vstr	s15, [r3]
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 8002000:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21a      	sxth	r2, r3
 8002008:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800200c:	b21b      	sxth	r3, r3
 800200e:	4313      	orrs	r3, r2
 8002010:	b21b      	sxth	r3, r3
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800201a:	4ba7      	ldr	r3, [pc, #668]	; (80022b8 <process_MPU+0x340>)
 800201c:	edc3 7a00 	vstr	s15, [r3]
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 8002020:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	b21a      	sxth	r2, r3
 8002028:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800202c:	b21b      	sxth	r3, r3
 800202e:	4313      	orrs	r3, r2
 8002030:	b21b      	sxth	r3, r3
 8002032:	ee07 3a90 	vmov	s15, r3
 8002036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800203a:	4ba0      	ldr	r3, [pc, #640]	; (80022bc <process_MPU+0x344>)
 800203c:	edc3 7a00 	vstr	s15, [r3]

    temp = (int16_t)(data[6] << 8 | data[7]);
 8002040:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	b21a      	sxth	r2, r3
 8002048:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800204c:	b21b      	sxth	r3, r3
 800204e:	4313      	orrs	r3, r2
 8002050:	b21b      	sxth	r3, r3
 8002052:	ee07 3a90 	vmov	s15, r3
 8002056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800205a:	4b99      	ldr	r3, [pc, #612]	; (80022c0 <process_MPU+0x348>)
 800205c:	edc3 7a00 	vstr	s15, [r3]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 8002060:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	b21a      	sxth	r2, r3
 8002068:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800206c:	b21b      	sxth	r3, r3
 800206e:	4313      	orrs	r3, r2
 8002070:	b21b      	sxth	r3, r3
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800207a:	4b92      	ldr	r3, [pc, #584]	; (80022c4 <process_MPU+0x34c>)
 800207c:	edc3 7a00 	vstr	s15, [r3]
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 8002080:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	b21a      	sxth	r2, r3
 8002088:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800208c:	b21b      	sxth	r3, r3
 800208e:	4313      	orrs	r3, r2
 8002090:	b21b      	sxth	r3, r3
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209a:	4b8b      	ldr	r3, [pc, #556]	; (80022c8 <process_MPU+0x350>)
 800209c:	edc3 7a00 	vstr	s15, [r3]
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 80020a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	b21a      	sxth	r2, r3
 80020a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	4313      	orrs	r3, r2
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	ee07 3a90 	vmov	s15, r3
 80020b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ba:	4b84      	ldr	r3, [pc, #528]	; (80022cc <process_MPU+0x354>)
 80020bc:	edc3 7a00 	vstr	s15, [r3]

	Acc_x = (Acc_x - bAx )/16384.0;
 80020c0:	4b7c      	ldr	r3, [pc, #496]	; (80022b4 <process_MPU+0x33c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe f9ef 	bl	80004a8 <__aeabi_f2d>
 80020ca:	4b81      	ldr	r3, [pc, #516]	; (80022d0 <process_MPU+0x358>)
 80020cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4623      	mov	r3, r4
 80020d4:	f7fe f888 	bl	80001e8 <__aeabi_dsub>
 80020d8:	4603      	mov	r3, r0
 80020da:	460c      	mov	r4, r1
 80020dc:	4618      	mov	r0, r3
 80020de:	4621      	mov	r1, r4
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	4b7b      	ldr	r3, [pc, #492]	; (80022d4 <process_MPU+0x35c>)
 80020e6:	f7fe fb61 	bl	80007ac <__aeabi_ddiv>
 80020ea:	4603      	mov	r3, r0
 80020ec:	460c      	mov	r4, r1
 80020ee:	4618      	mov	r0, r3
 80020f0:	4621      	mov	r1, r4
 80020f2:	f7fe fd29 	bl	8000b48 <__aeabi_d2f>
 80020f6:	4602      	mov	r2, r0
 80020f8:	4b6e      	ldr	r3, [pc, #440]	; (80022b4 <process_MPU+0x33c>)
 80020fa:	601a      	str	r2, [r3, #0]
	Acc_y = (Acc_y - bAy)/16384.0;
 80020fc:	4b6e      	ldr	r3, [pc, #440]	; (80022b8 <process_MPU+0x340>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe f9d1 	bl	80004a8 <__aeabi_f2d>
 8002106:	4b74      	ldr	r3, [pc, #464]	; (80022d8 <process_MPU+0x360>)
 8002108:	e9d3 3400 	ldrd	r3, r4, [r3]
 800210c:	461a      	mov	r2, r3
 800210e:	4623      	mov	r3, r4
 8002110:	f7fe f86a 	bl	80001e8 <__aeabi_dsub>
 8002114:	4603      	mov	r3, r0
 8002116:	460c      	mov	r4, r1
 8002118:	4618      	mov	r0, r3
 800211a:	4621      	mov	r1, r4
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	4b6c      	ldr	r3, [pc, #432]	; (80022d4 <process_MPU+0x35c>)
 8002122:	f7fe fb43 	bl	80007ac <__aeabi_ddiv>
 8002126:	4603      	mov	r3, r0
 8002128:	460c      	mov	r4, r1
 800212a:	4618      	mov	r0, r3
 800212c:	4621      	mov	r1, r4
 800212e:	f7fe fd0b 	bl	8000b48 <__aeabi_d2f>
 8002132:	4602      	mov	r2, r0
 8002134:	4b60      	ldr	r3, [pc, #384]	; (80022b8 <process_MPU+0x340>)
 8002136:	601a      	str	r2, [r3, #0]
	Acc_z = (Acc_z - bAz)/16384.0;
 8002138:	4b60      	ldr	r3, [pc, #384]	; (80022bc <process_MPU+0x344>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe f9b3 	bl	80004a8 <__aeabi_f2d>
 8002142:	4b66      	ldr	r3, [pc, #408]	; (80022dc <process_MPU+0x364>)
 8002144:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002148:	461a      	mov	r2, r3
 800214a:	4623      	mov	r3, r4
 800214c:	f7fe f84c 	bl	80001e8 <__aeabi_dsub>
 8002150:	4603      	mov	r3, r0
 8002152:	460c      	mov	r4, r1
 8002154:	4618      	mov	r0, r3
 8002156:	4621      	mov	r1, r4
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	4b5d      	ldr	r3, [pc, #372]	; (80022d4 <process_MPU+0x35c>)
 800215e:	f7fe fb25 	bl	80007ac <__aeabi_ddiv>
 8002162:	4603      	mov	r3, r0
 8002164:	460c      	mov	r4, r1
 8002166:	4618      	mov	r0, r3
 8002168:	4621      	mov	r1, r4
 800216a:	f7fe fced 	bl	8000b48 <__aeabi_d2f>
 800216e:	4602      	mov	r2, r0
 8002170:	4b52      	ldr	r3, [pc, #328]	; (80022bc <process_MPU+0x344>)
 8002172:	601a      	str	r2, [r3, #0]

	Gyro_x = (Gyro_x - bGx)/16.4;
 8002174:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <process_MPU+0x34c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe f995 	bl	80004a8 <__aeabi_f2d>
 800217e:	4b58      	ldr	r3, [pc, #352]	; (80022e0 <process_MPU+0x368>)
 8002180:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002184:	461a      	mov	r2, r3
 8002186:	4623      	mov	r3, r4
 8002188:	f7fe f82e 	bl	80001e8 <__aeabi_dsub>
 800218c:	4603      	mov	r3, r0
 800218e:	460c      	mov	r4, r1
 8002190:	4618      	mov	r0, r3
 8002192:	4621      	mov	r1, r4
 8002194:	a33e      	add	r3, pc, #248	; (adr r3, 8002290 <process_MPU+0x318>)
 8002196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219a:	f7fe fb07 	bl	80007ac <__aeabi_ddiv>
 800219e:	4603      	mov	r3, r0
 80021a0:	460c      	mov	r4, r1
 80021a2:	4618      	mov	r0, r3
 80021a4:	4621      	mov	r1, r4
 80021a6:	f7fe fccf 	bl	8000b48 <__aeabi_d2f>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b45      	ldr	r3, [pc, #276]	; (80022c4 <process_MPU+0x34c>)
 80021ae:	601a      	str	r2, [r3, #0]
	Gyro_y = (Gyro_y - bGy)/16.4;
 80021b0:	4b45      	ldr	r3, [pc, #276]	; (80022c8 <process_MPU+0x350>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe f977 	bl	80004a8 <__aeabi_f2d>
 80021ba:	4b4a      	ldr	r3, [pc, #296]	; (80022e4 <process_MPU+0x36c>)
 80021bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80021c0:	461a      	mov	r2, r3
 80021c2:	4623      	mov	r3, r4
 80021c4:	f7fe f810 	bl	80001e8 <__aeabi_dsub>
 80021c8:	4603      	mov	r3, r0
 80021ca:	460c      	mov	r4, r1
 80021cc:	4618      	mov	r0, r3
 80021ce:	4621      	mov	r1, r4
 80021d0:	a32f      	add	r3, pc, #188	; (adr r3, 8002290 <process_MPU+0x318>)
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	f7fe fae9 	bl	80007ac <__aeabi_ddiv>
 80021da:	4603      	mov	r3, r0
 80021dc:	460c      	mov	r4, r1
 80021de:	4618      	mov	r0, r3
 80021e0:	4621      	mov	r1, r4
 80021e2:	f7fe fcb1 	bl	8000b48 <__aeabi_d2f>
 80021e6:	4602      	mov	r2, r0
 80021e8:	4b37      	ldr	r3, [pc, #220]	; (80022c8 <process_MPU+0x350>)
 80021ea:	601a      	str	r2, [r3, #0]
	Gyro_z = (Gyro_z - bGz)/16.4;
 80021ec:	4b37      	ldr	r3, [pc, #220]	; (80022cc <process_MPU+0x354>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f959 	bl	80004a8 <__aeabi_f2d>
 80021f6:	4b3c      	ldr	r3, [pc, #240]	; (80022e8 <process_MPU+0x370>)
 80021f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4623      	mov	r3, r4
 8002200:	f7fd fff2 	bl	80001e8 <__aeabi_dsub>
 8002204:	4603      	mov	r3, r0
 8002206:	460c      	mov	r4, r1
 8002208:	4618      	mov	r0, r3
 800220a:	4621      	mov	r1, r4
 800220c:	a320      	add	r3, pc, #128	; (adr r3, 8002290 <process_MPU+0x318>)
 800220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002212:	f7fe facb 	bl	80007ac <__aeabi_ddiv>
 8002216:	4603      	mov	r3, r0
 8002218:	460c      	mov	r4, r1
 800221a:	4618      	mov	r0, r3
 800221c:	4621      	mov	r1, r4
 800221e:	f7fe fc93 	bl	8000b48 <__aeabi_d2f>
 8002222:	4602      	mov	r2, r0
 8002224:	4b29      	ldr	r3, [pc, #164]	; (80022cc <process_MPU+0x354>)
 8002226:	601a      	str	r2, [r3, #0]


    reg = 0x02;
 8002228:	2302      	movs	r3, #2
 800222a:	77bb      	strb	r3, [r7, #30]

	                w = Acc_x - (-1.9502)*w1 - 0.9514*w2;
 800222c:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <process_MPU+0x33c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe f939 	bl	80004a8 <__aeabi_f2d>
 8002236:	4604      	mov	r4, r0
 8002238:	460d      	mov	r5, r1
 800223a:	4b2c      	ldr	r3, [pc, #176]	; (80022ec <process_MPU+0x374>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe f932 	bl	80004a8 <__aeabi_f2d>
 8002244:	a314      	add	r3, pc, #80	; (adr r3, 8002298 <process_MPU+0x320>)
 8002246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224a:	f7fe f985 	bl	8000558 <__aeabi_dmul>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4620      	mov	r0, r4
 8002254:	4629      	mov	r1, r5
 8002256:	f7fd ffc9 	bl	80001ec <__adddf3>
 800225a:	4603      	mov	r3, r0
 800225c:	460c      	mov	r4, r1
 800225e:	4625      	mov	r5, r4
 8002260:	461c      	mov	r4, r3
 8002262:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <process_MPU+0x378>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f91e 	bl	80004a8 <__aeabi_f2d>
 800226c:	a30c      	add	r3, pc, #48	; (adr r3, 80022a0 <process_MPU+0x328>)
 800226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002272:	f7fe f971 	bl	8000558 <__aeabi_dmul>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4620      	mov	r0, r4
 800227c:	4629      	mov	r1, r5
 800227e:	f7fd ffb3 	bl	80001e8 <__aeabi_dsub>
 8002282:	4603      	mov	r3, r0
 8002284:	460c      	mov	r4, r1
 8002286:	4618      	mov	r0, r3
 8002288:	4621      	mov	r1, r4
 800228a:	f7fe fc5d 	bl	8000b48 <__aeabi_d2f>
 800228e:	e031      	b.n	80022f4 <process_MPU+0x37c>
 8002290:	66666666 	.word	0x66666666
 8002294:	40306666 	.word	0x40306666
 8002298:	ea4a8c15 	.word	0xea4a8c15
 800229c:	3fff3404 	.word	0x3fff3404
 80022a0:	69ad42c4 	.word	0x69ad42c4
 80022a4:	3fee71de 	.word	0x3fee71de
 80022a8:	200041bc 	.word	0x200041bc
 80022ac:	200044ec 	.word	0x200044ec
 80022b0:	200040d8 	.word	0x200040d8
 80022b4:	20004374 	.word	0x20004374
 80022b8:	20004298 	.word	0x20004298
 80022bc:	20004190 	.word	0x20004190
 80022c0:	200042c4 	.word	0x200042c4
 80022c4:	20004200 	.word	0x20004200
 80022c8:	200044d4 	.word	0x200044d4
 80022cc:	20004320 	.word	0x20004320
 80022d0:	20004418 	.word	0x20004418
 80022d4:	40d00000 	.word	0x40d00000
 80022d8:	20004380 	.word	0x20004380
 80022dc:	200044f8 	.word	0x200044f8
 80022e0:	200043f0 	.word	0x200043f0
 80022e4:	20004260 	.word	0x20004260
 80022e8:	20004500 	.word	0x20004500
 80022ec:	200041a8 	.word	0x200041a8
 80022f0:	200043a8 	.word	0x200043a8
 80022f4:	4602      	mov	r2, r0
 80022f6:	4bc6      	ldr	r3, [pc, #792]	; (8002610 <process_MPU+0x698>)
 80022f8:	601a      	str	r2, [r3, #0]
	                y1 = (w*1 + w1*1.7994 + 1*w2)*0.0003;
 80022fa:	4bc5      	ldr	r3, [pc, #788]	; (8002610 <process_MPU+0x698>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f8d2 	bl	80004a8 <__aeabi_f2d>
 8002304:	4604      	mov	r4, r0
 8002306:	460d      	mov	r5, r1
 8002308:	4bc2      	ldr	r3, [pc, #776]	; (8002614 <process_MPU+0x69c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe f8cb 	bl	80004a8 <__aeabi_f2d>
 8002312:	a3ab      	add	r3, pc, #684	; (adr r3, 80025c0 <process_MPU+0x648>)
 8002314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002318:	f7fe f91e 	bl	8000558 <__aeabi_dmul>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4620      	mov	r0, r4
 8002322:	4629      	mov	r1, r5
 8002324:	f7fd ff62 	bl	80001ec <__adddf3>
 8002328:	4603      	mov	r3, r0
 800232a:	460c      	mov	r4, r1
 800232c:	4625      	mov	r5, r4
 800232e:	461c      	mov	r4, r3
 8002330:	4bb9      	ldr	r3, [pc, #740]	; (8002618 <process_MPU+0x6a0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe f8b7 	bl	80004a8 <__aeabi_f2d>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4620      	mov	r0, r4
 8002340:	4629      	mov	r1, r5
 8002342:	f7fd ff53 	bl	80001ec <__adddf3>
 8002346:	4603      	mov	r3, r0
 8002348:	460c      	mov	r4, r1
 800234a:	4618      	mov	r0, r3
 800234c:	4621      	mov	r1, r4
 800234e:	a39e      	add	r3, pc, #632	; (adr r3, 80025c8 <process_MPU+0x650>)
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	f7fe f900 	bl	8000558 <__aeabi_dmul>
 8002358:	4603      	mov	r3, r0
 800235a:	460c      	mov	r4, r1
 800235c:	4618      	mov	r0, r3
 800235e:	4621      	mov	r1, r4
 8002360:	f7fe fbf2 	bl	8000b48 <__aeabi_d2f>
 8002364:	4602      	mov	r2, r0
 8002366:	4bad      	ldr	r3, [pc, #692]	; (800261c <process_MPU+0x6a4>)
 8002368:	601a      	str	r2, [r3, #0]
	                w2 = w1;
 800236a:	4baa      	ldr	r3, [pc, #680]	; (8002614 <process_MPU+0x69c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4aaa      	ldr	r2, [pc, #680]	; (8002618 <process_MPU+0x6a0>)
 8002370:	6013      	str	r3, [r2, #0]
	                w1 = w;
 8002372:	4ba7      	ldr	r3, [pc, #668]	; (8002610 <process_MPU+0x698>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4aa7      	ldr	r2, [pc, #668]	; (8002614 <process_MPU+0x69c>)
 8002378:	6013      	str	r3, [r2, #0]

	                w_ = Acc_y - (-1.9502)*w1_ - 0.9514*w2_;
 800237a:	4ba9      	ldr	r3, [pc, #676]	; (8002620 <process_MPU+0x6a8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f892 	bl	80004a8 <__aeabi_f2d>
 8002384:	4604      	mov	r4, r0
 8002386:	460d      	mov	r5, r1
 8002388:	4ba6      	ldr	r3, [pc, #664]	; (8002624 <process_MPU+0x6ac>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe f88b 	bl	80004a8 <__aeabi_f2d>
 8002392:	a38f      	add	r3, pc, #572	; (adr r3, 80025d0 <process_MPU+0x658>)
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	f7fe f8de 	bl	8000558 <__aeabi_dmul>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4620      	mov	r0, r4
 80023a2:	4629      	mov	r1, r5
 80023a4:	f7fd ff22 	bl	80001ec <__adddf3>
 80023a8:	4603      	mov	r3, r0
 80023aa:	460c      	mov	r4, r1
 80023ac:	4625      	mov	r5, r4
 80023ae:	461c      	mov	r4, r3
 80023b0:	4b9d      	ldr	r3, [pc, #628]	; (8002628 <process_MPU+0x6b0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe f877 	bl	80004a8 <__aeabi_f2d>
 80023ba:	a387      	add	r3, pc, #540	; (adr r3, 80025d8 <process_MPU+0x660>)
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	f7fe f8ca 	bl	8000558 <__aeabi_dmul>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4620      	mov	r0, r4
 80023ca:	4629      	mov	r1, r5
 80023cc:	f7fd ff0c 	bl	80001e8 <__aeabi_dsub>
 80023d0:	4603      	mov	r3, r0
 80023d2:	460c      	mov	r4, r1
 80023d4:	4618      	mov	r0, r3
 80023d6:	4621      	mov	r1, r4
 80023d8:	f7fe fbb6 	bl	8000b48 <__aeabi_d2f>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b93      	ldr	r3, [pc, #588]	; (800262c <process_MPU+0x6b4>)
 80023e0:	601a      	str	r2, [r3, #0]
	                y2 = (w_*1 + w1_*1.7994 + 1*w2_)*0.0003;
 80023e2:	4b92      	ldr	r3, [pc, #584]	; (800262c <process_MPU+0x6b4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f85e 	bl	80004a8 <__aeabi_f2d>
 80023ec:	4604      	mov	r4, r0
 80023ee:	460d      	mov	r5, r1
 80023f0:	4b8c      	ldr	r3, [pc, #560]	; (8002624 <process_MPU+0x6ac>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe f857 	bl	80004a8 <__aeabi_f2d>
 80023fa:	a371      	add	r3, pc, #452	; (adr r3, 80025c0 <process_MPU+0x648>)
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	f7fe f8aa 	bl	8000558 <__aeabi_dmul>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4620      	mov	r0, r4
 800240a:	4629      	mov	r1, r5
 800240c:	f7fd feee 	bl	80001ec <__adddf3>
 8002410:	4603      	mov	r3, r0
 8002412:	460c      	mov	r4, r1
 8002414:	4625      	mov	r5, r4
 8002416:	461c      	mov	r4, r3
 8002418:	4b83      	ldr	r3, [pc, #524]	; (8002628 <process_MPU+0x6b0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f843 	bl	80004a8 <__aeabi_f2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	f7fd fedf 	bl	80001ec <__adddf3>
 800242e:	4603      	mov	r3, r0
 8002430:	460c      	mov	r4, r1
 8002432:	4618      	mov	r0, r3
 8002434:	4621      	mov	r1, r4
 8002436:	a364      	add	r3, pc, #400	; (adr r3, 80025c8 <process_MPU+0x650>)
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	f7fe f88c 	bl	8000558 <__aeabi_dmul>
 8002440:	4603      	mov	r3, r0
 8002442:	460c      	mov	r4, r1
 8002444:	4618      	mov	r0, r3
 8002446:	4621      	mov	r1, r4
 8002448:	f7fe fb7e 	bl	8000b48 <__aeabi_d2f>
 800244c:	4602      	mov	r2, r0
 800244e:	4b78      	ldr	r3, [pc, #480]	; (8002630 <process_MPU+0x6b8>)
 8002450:	601a      	str	r2, [r3, #0]
	                w2_ = w1_;
 8002452:	4b74      	ldr	r3, [pc, #464]	; (8002624 <process_MPU+0x6ac>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a74      	ldr	r2, [pc, #464]	; (8002628 <process_MPU+0x6b0>)
 8002458:	6013      	str	r3, [r2, #0]
	                w1_ = w_;
 800245a:	4b74      	ldr	r3, [pc, #464]	; (800262c <process_MPU+0x6b4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a71      	ldr	r2, [pc, #452]	; (8002624 <process_MPU+0x6ac>)
 8002460:	6013      	str	r3, [r2, #0]



	                w01 = Acc_z - (-1.9861)*w11 - 0.98630*w21;
 8002462:	4b74      	ldr	r3, [pc, #464]	; (8002634 <process_MPU+0x6bc>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe f81e 	bl	80004a8 <__aeabi_f2d>
 800246c:	4604      	mov	r4, r0
 800246e:	460d      	mov	r5, r1
 8002470:	4b71      	ldr	r3, [pc, #452]	; (8002638 <process_MPU+0x6c0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe f817 	bl	80004a8 <__aeabi_f2d>
 800247a:	a359      	add	r3, pc, #356	; (adr r3, 80025e0 <process_MPU+0x668>)
 800247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002480:	f7fe f86a 	bl	8000558 <__aeabi_dmul>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4620      	mov	r0, r4
 800248a:	4629      	mov	r1, r5
 800248c:	f7fd feae 	bl	80001ec <__adddf3>
 8002490:	4603      	mov	r3, r0
 8002492:	460c      	mov	r4, r1
 8002494:	4625      	mov	r5, r4
 8002496:	461c      	mov	r4, r3
 8002498:	4b68      	ldr	r3, [pc, #416]	; (800263c <process_MPU+0x6c4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe f803 	bl	80004a8 <__aeabi_f2d>
 80024a2:	a351      	add	r3, pc, #324	; (adr r3, 80025e8 <process_MPU+0x670>)
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	f7fe f856 	bl	8000558 <__aeabi_dmul>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4620      	mov	r0, r4
 80024b2:	4629      	mov	r1, r5
 80024b4:	f7fd fe98 	bl	80001e8 <__aeabi_dsub>
 80024b8:	4603      	mov	r3, r0
 80024ba:	460c      	mov	r4, r1
 80024bc:	4618      	mov	r0, r3
 80024be:	4621      	mov	r1, r4
 80024c0:	f7fe fb42 	bl	8000b48 <__aeabi_d2f>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b5e      	ldr	r3, [pc, #376]	; (8002640 <process_MPU+0x6c8>)
 80024c8:	601a      	str	r2, [r3, #0]
	                y3_ = (w01*1 + w11*(0.0541986007) + 1*w21)*9.5448458e-05;
 80024ca:	4b5d      	ldr	r3, [pc, #372]	; (8002640 <process_MPU+0x6c8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fd ffea 	bl	80004a8 <__aeabi_f2d>
 80024d4:	4604      	mov	r4, r0
 80024d6:	460d      	mov	r5, r1
 80024d8:	4b57      	ldr	r3, [pc, #348]	; (8002638 <process_MPU+0x6c0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fd ffe3 	bl	80004a8 <__aeabi_f2d>
 80024e2:	a343      	add	r3, pc, #268	; (adr r3, 80025f0 <process_MPU+0x678>)
 80024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e8:	f7fe f836 	bl	8000558 <__aeabi_dmul>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4620      	mov	r0, r4
 80024f2:	4629      	mov	r1, r5
 80024f4:	f7fd fe7a 	bl	80001ec <__adddf3>
 80024f8:	4603      	mov	r3, r0
 80024fa:	460c      	mov	r4, r1
 80024fc:	4625      	mov	r5, r4
 80024fe:	461c      	mov	r4, r3
 8002500:	4b4e      	ldr	r3, [pc, #312]	; (800263c <process_MPU+0x6c4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fd ffcf 	bl	80004a8 <__aeabi_f2d>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4620      	mov	r0, r4
 8002510:	4629      	mov	r1, r5
 8002512:	f7fd fe6b 	bl	80001ec <__adddf3>
 8002516:	4603      	mov	r3, r0
 8002518:	460c      	mov	r4, r1
 800251a:	4618      	mov	r0, r3
 800251c:	4621      	mov	r1, r4
 800251e:	a336      	add	r3, pc, #216	; (adr r3, 80025f8 <process_MPU+0x680>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f7fe f818 	bl	8000558 <__aeabi_dmul>
 8002528:	4603      	mov	r3, r0
 800252a:	460c      	mov	r4, r1
 800252c:	4618      	mov	r0, r3
 800252e:	4621      	mov	r1, r4
 8002530:	f7fe fb0a 	bl	8000b48 <__aeabi_d2f>
 8002534:	4602      	mov	r2, r0
 8002536:	4b43      	ldr	r3, [pc, #268]	; (8002644 <process_MPU+0x6cc>)
 8002538:	601a      	str	r2, [r3, #0]
	                w21 = w11;
 800253a:	4b3f      	ldr	r3, [pc, #252]	; (8002638 <process_MPU+0x6c0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a3f      	ldr	r2, [pc, #252]	; (800263c <process_MPU+0x6c4>)
 8002540:	6013      	str	r3, [r2, #0]
	                w11 = w01;
 8002542:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <process_MPU+0x6c8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a3c      	ldr	r2, [pc, #240]	; (8002638 <process_MPU+0x6c0>)
 8002548:	6013      	str	r3, [r2, #0]
//	                quat2euler(qr0,qr1,qr2,qr3);
//	                end = htim4.Instance->CNT;
	            yaw_mag  +=  Gyro_z*0.001;
 800254a:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <process_MPU+0x6d0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fd ffaa 	bl	80004a8 <__aeabi_f2d>
 8002554:	4604      	mov	r4, r0
 8002556:	460d      	mov	r5, r1
 8002558:	4b3c      	ldr	r3, [pc, #240]	; (800264c <process_MPU+0x6d4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd ffa3 	bl	80004a8 <__aeabi_f2d>
 8002562:	a327      	add	r3, pc, #156	; (adr r3, 8002600 <process_MPU+0x688>)
 8002564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002568:	f7fd fff6 	bl	8000558 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4620      	mov	r0, r4
 8002572:	4629      	mov	r1, r5
 8002574:	f7fd fe3a 	bl	80001ec <__adddf3>
 8002578:	4603      	mov	r3, r0
 800257a:	460c      	mov	r4, r1
 800257c:	4618      	mov	r0, r3
 800257e:	4621      	mov	r1, r4
 8002580:	f7fe fae2 	bl	8000b48 <__aeabi_d2f>
 8002584:	4602      	mov	r2, r0
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <process_MPU+0x6d0>)
 8002588:	601a      	str	r2, [r3, #0]
	            roll_gyro +=  Gyro_x*0.0013065;
 800258a:	4b31      	ldr	r3, [pc, #196]	; (8002650 <process_MPU+0x6d8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fd ff8a 	bl	80004a8 <__aeabi_f2d>
 8002594:	4604      	mov	r4, r0
 8002596:	460d      	mov	r5, r1
 8002598:	4b2e      	ldr	r3, [pc, #184]	; (8002654 <process_MPU+0x6dc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ff83 	bl	80004a8 <__aeabi_f2d>
 80025a2:	a319      	add	r3, pc, #100	; (adr r3, 8002608 <process_MPU+0x690>)
 80025a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a8:	f7fd ffd6 	bl	8000558 <__aeabi_dmul>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4620      	mov	r0, r4
 80025b2:	4629      	mov	r1, r5
 80025b4:	f7fd fe1a 	bl	80001ec <__adddf3>
 80025b8:	e04e      	b.n	8002658 <process_MPU+0x6e0>
 80025ba:	bf00      	nop
 80025bc:	f3af 8000 	nop.w
 80025c0:	a786c227 	.word	0xa786c227
 80025c4:	3ffcca57 	.word	0x3ffcca57
 80025c8:	30553261 	.word	0x30553261
 80025cc:	3f33a92a 	.word	0x3f33a92a
 80025d0:	ea4a8c15 	.word	0xea4a8c15
 80025d4:	3fff3404 	.word	0x3fff3404
 80025d8:	69ad42c4 	.word	0x69ad42c4
 80025dc:	3fee71de 	.word	0x3fee71de
 80025e0:	cb295e9e 	.word	0xcb295e9e
 80025e4:	3fffc710 	.word	0x3fffc710
 80025e8:	04816f00 	.word	0x04816f00
 80025ec:	3fef8fc5 	.word	0x3fef8fc5
 80025f0:	42fdad4a 	.word	0x42fdad4a
 80025f4:	3fabbfeb 	.word	0x3fabbfeb
 80025f8:	05b278dc 	.word	0x05b278dc
 80025fc:	3f190570 	.word	0x3f190570
 8002600:	d2f1a9fc 	.word	0xd2f1a9fc
 8002604:	3f50624d 	.word	0x3f50624d
 8002608:	b16c1e36 	.word	0xb16c1e36
 800260c:	3f5567db 	.word	0x3f5567db
 8002610:	200042b0 	.word	0x200042b0
 8002614:	200041a8 	.word	0x200041a8
 8002618:	200043a8 	.word	0x200043a8
 800261c:	2000451c 	.word	0x2000451c
 8002620:	20004298 	.word	0x20004298
 8002624:	200044f0 	.word	0x200044f0
 8002628:	2000418c 	.word	0x2000418c
 800262c:	200044d0 	.word	0x200044d0
 8002630:	200042cc 	.word	0x200042cc
 8002634:	20004190 	.word	0x20004190
 8002638:	2000429c 	.word	0x2000429c
 800263c:	20004188 	.word	0x20004188
 8002640:	2000419c 	.word	0x2000419c
 8002644:	200043f8 	.word	0x200043f8
 8002648:	200043fc 	.word	0x200043fc
 800264c:	20004320 	.word	0x20004320
 8002650:	200041ac 	.word	0x200041ac
 8002654:	20004200 	.word	0x20004200
 8002658:	4603      	mov	r3, r0
 800265a:	460c      	mov	r4, r1
 800265c:	4618      	mov	r0, r3
 800265e:	4621      	mov	r1, r4
 8002660:	f7fe fa72 	bl	8000b48 <__aeabi_d2f>
 8002664:	4602      	mov	r2, r0
 8002666:	4b56      	ldr	r3, [pc, #344]	; (80027c0 <process_MPU+0x848>)
 8002668:	601a      	str	r2, [r3, #0]
	            pitch_gyro +=  Gyro_y*0.0013065;
 800266a:	4b56      	ldr	r3, [pc, #344]	; (80027c4 <process_MPU+0x84c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd ff1a 	bl	80004a8 <__aeabi_f2d>
 8002674:	4604      	mov	r4, r0
 8002676:	460d      	mov	r5, r1
 8002678:	4b53      	ldr	r3, [pc, #332]	; (80027c8 <process_MPU+0x850>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff13 	bl	80004a8 <__aeabi_f2d>
 8002682:	a34d      	add	r3, pc, #308	; (adr r3, 80027b8 <process_MPU+0x840>)
 8002684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002688:	f7fd ff66 	bl	8000558 <__aeabi_dmul>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4620      	mov	r0, r4
 8002692:	4629      	mov	r1, r5
 8002694:	f7fd fdaa 	bl	80001ec <__adddf3>
 8002698:	4603      	mov	r3, r0
 800269a:	460c      	mov	r4, r1
 800269c:	4618      	mov	r0, r3
 800269e:	4621      	mov	r1, r4
 80026a0:	f7fe fa52 	bl	8000b48 <__aeabi_d2f>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <process_MPU+0x84c>)
 80026a8:	601a      	str	r2, [r3, #0]
	            end = htim4.Instance->CNT;
 80026aa:	4b48      	ldr	r3, [pc, #288]	; (80027cc <process_MPU+0x854>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b47      	ldr	r3, [pc, #284]	; (80027d0 <process_MPU+0x858>)
 80026b4:	601a      	str	r2, [r3, #0]
	            complementary_filter(Gyro_x,Gyro_y,Gyro_z,y1,y2,y3,302/100000.0);
 80026b6:	4b47      	ldr	r3, [pc, #284]	; (80027d4 <process_MPU+0x85c>)
 80026b8:	edd3 7a00 	vldr	s15, [r3]
 80026bc:	4b42      	ldr	r3, [pc, #264]	; (80027c8 <process_MPU+0x850>)
 80026be:	ed93 7a00 	vldr	s14, [r3]
 80026c2:	4b45      	ldr	r3, [pc, #276]	; (80027d8 <process_MPU+0x860>)
 80026c4:	edd3 6a00 	vldr	s13, [r3]
 80026c8:	4b44      	ldr	r3, [pc, #272]	; (80027dc <process_MPU+0x864>)
 80026ca:	ed93 6a00 	vldr	s12, [r3]
 80026ce:	4b44      	ldr	r3, [pc, #272]	; (80027e0 <process_MPU+0x868>)
 80026d0:	edd3 5a00 	vldr	s11, [r3]
 80026d4:	4b43      	ldr	r3, [pc, #268]	; (80027e4 <process_MPU+0x86c>)
 80026d6:	ed93 5a00 	vldr	s10, [r3]
 80026da:	ed9f 3a43 	vldr	s6, [pc, #268]	; 80027e8 <process_MPU+0x870>
 80026de:	eef0 2a45 	vmov.f32	s5, s10
 80026e2:	eeb0 2a65 	vmov.f32	s4, s11
 80026e6:	eef0 1a46 	vmov.f32	s3, s12
 80026ea:	eeb0 1a66 	vmov.f32	s2, s13
 80026ee:	eef0 0a47 	vmov.f32	s1, s14
 80026f2:	eeb0 0a67 	vmov.f32	s0, s15
 80026f6:	f000 fb77 	bl	8002de8 <complementary_filter>
//	            quaternion_rot(Gyro_x/180.0*PI, Gyro_y/180.0*PI,Gyro_z/180.0*PI,Acc_x,Acc_y,Acc_z,302/100000.0);
	            quat2euler(qd0, qd1,qd2, qd3);
 80026fa:	4b3c      	ldr	r3, [pc, #240]	; (80027ec <process_MPU+0x874>)
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	4b3b      	ldr	r3, [pc, #236]	; (80027f0 <process_MPU+0x878>)
 8002702:	ed93 7a00 	vldr	s14, [r3]
 8002706:	4b3b      	ldr	r3, [pc, #236]	; (80027f4 <process_MPU+0x87c>)
 8002708:	edd3 6a00 	vldr	s13, [r3]
 800270c:	4b3a      	ldr	r3, [pc, #232]	; (80027f8 <process_MPU+0x880>)
 800270e:	ed93 6a00 	vldr	s12, [r3]
 8002712:	eef0 1a46 	vmov.f32	s3, s12
 8002716:	eeb0 1a66 	vmov.f32	s2, s13
 800271a:	eef0 0a47 	vmov.f32	s1, s14
 800271e:	eeb0 0a67 	vmov.f32	s0, s15
 8002722:	f000 fc41 	bl	8002fa8 <quat2euler>
//	            }

//	            float2Bytes(buffer,roll_acc);
//	            ftoa(pitch_acc, buffer, 2);

	            med_gyroX += Gyro_x;
 8002726:	4b35      	ldr	r3, [pc, #212]	; (80027fc <process_MPU+0x884>)
 8002728:	ed93 7a00 	vldr	s14, [r3]
 800272c:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <process_MPU+0x85c>)
 800272e:	edd3 7a00 	vldr	s15, [r3]
 8002732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002736:	4b31      	ldr	r3, [pc, #196]	; (80027fc <process_MPU+0x884>)
 8002738:	edc3 7a00 	vstr	s15, [r3]
	            med_gyroY += Gyro_y;
 800273c:	4b30      	ldr	r3, [pc, #192]	; (8002800 <process_MPU+0x888>)
 800273e:	ed93 7a00 	vldr	s14, [r3]
 8002742:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <process_MPU+0x850>)
 8002744:	edd3 7a00 	vldr	s15, [r3]
 8002748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274c:	4b2c      	ldr	r3, [pc, #176]	; (8002800 <process_MPU+0x888>)
 800274e:	edc3 7a00 	vstr	s15, [r3]
	            med_gyroZ += Gyro_z;
 8002752:	4b2c      	ldr	r3, [pc, #176]	; (8002804 <process_MPU+0x88c>)
 8002754:	ed93 7a00 	vldr	s14, [r3]
 8002758:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <process_MPU+0x860>)
 800275a:	edd3 7a00 	vldr	s15, [r3]
 800275e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002762:	4b28      	ldr	r3, [pc, #160]	; (8002804 <process_MPU+0x88c>)
 8002764:	edc3 7a00 	vstr	s15, [r3]
//
	            med_accX += Acc_x;
 8002768:	4b27      	ldr	r3, [pc, #156]	; (8002808 <process_MPU+0x890>)
 800276a:	ed93 7a00 	vldr	s14, [r3]
 800276e:	4b27      	ldr	r3, [pc, #156]	; (800280c <process_MPU+0x894>)
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <process_MPU+0x890>)
 800277a:	edc3 7a00 	vstr	s15, [r3]
	            med_accY += Acc_y;
 800277e:	4b24      	ldr	r3, [pc, #144]	; (8002810 <process_MPU+0x898>)
 8002780:	ed93 7a00 	vldr	s14, [r3]
 8002784:	4b23      	ldr	r3, [pc, #140]	; (8002814 <process_MPU+0x89c>)
 8002786:	edd3 7a00 	vldr	s15, [r3]
 800278a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <process_MPU+0x898>)
 8002790:	edc3 7a00 	vstr	s15, [r3]
	            med_accZ += Acc_z;
 8002794:	4b20      	ldr	r3, [pc, #128]	; (8002818 <process_MPU+0x8a0>)
 8002796:	ed93 7a00 	vldr	s14, [r3]
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <process_MPU+0x8a4>)
 800279c:	edd3 7a00 	vldr	s15, [r3]
 80027a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a4:	4b1c      	ldr	r3, [pc, #112]	; (8002818 <process_MPU+0x8a0>)
 80027a6:	edc3 7a00 	vstr	s15, [r3]
//	            HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
//
//	            ftoa(y2, buffer, 2);
//	            strcat(buffer,"\n");
//	            HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
                count++;
 80027aa:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <process_MPU+0x8a8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	3301      	adds	r3, #1
 80027b0:	4a1b      	ldr	r2, [pc, #108]	; (8002820 <process_MPU+0x8a8>)
 80027b2:	6013      	str	r3, [r2, #0]
while(status != 3){
 80027b4:	e056      	b.n	8002864 <process_MPU+0x8ec>
 80027b6:	bf00      	nop
 80027b8:	b16c1e36 	.word	0xb16c1e36
 80027bc:	3f5567db 	.word	0x3f5567db
 80027c0:	200041ac 	.word	0x200041ac
 80027c4:	200044c4 	.word	0x200044c4
 80027c8:	200044d4 	.word	0x200044d4
 80027cc:	200041bc 	.word	0x200041bc
 80027d0:	2000431c 	.word	0x2000431c
 80027d4:	20004200 	.word	0x20004200
 80027d8:	20004320 	.word	0x20004320
 80027dc:	2000451c 	.word	0x2000451c
 80027e0:	200042cc 	.word	0x200042cc
 80027e4:	20004290 	.word	0x20004290
 80027e8:	3b45eb31 	.word	0x3b45eb31
 80027ec:	20004058 	.word	0x20004058
 80027f0:	20004040 	.word	0x20004040
 80027f4:	20004048 	.word	0x20004048
 80027f8:	2000404c 	.word	0x2000404c
 80027fc:	200041b0 	.word	0x200041b0
 8002800:	200042c8 	.word	0x200042c8
 8002804:	200044e0 	.word	0x200044e0
 8002808:	20004408 	.word	0x20004408
 800280c:	20004374 	.word	0x20004374
 8002810:	20004420 	.word	0x20004420
 8002814:	20004298 	.word	0x20004298
 8002818:	20004314 	.word	0x20004314
 800281c:	20004190 	.word	0x20004190
 8002820:	20004404 	.word	0x20004404
while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &reg, 1, 1000) != HAL_OK);
 8002824:	bf00      	nop
 8002826:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800282a:	b299      	uxth	r1, r3
 800282c:	f107 021e 	add.w	r2, r7, #30
 8002830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	2301      	movs	r3, #1
 8002838:	48c3      	ldr	r0, [pc, #780]	; (8002b48 <process_MPU+0xbd0>)
 800283a:	f002 f873 	bl	8004924 <HAL_I2C_Master_Transmit>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f0      	bne.n	8002826 <process_MPU+0x8ae>
while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &status,1, 1000) != HAL_OK);
 8002844:	bf00      	nop
 8002846:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800284a:	b299      	uxth	r1, r3
 800284c:	f107 021f 	add.w	r2, r7, #31
 8002850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	2301      	movs	r3, #1
 8002858:	48bb      	ldr	r0, [pc, #748]	; (8002b48 <process_MPU+0xbd0>)
 800285a:	f002 f961 	bl	8004b20 <HAL_I2C_Master_Receive>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f0      	bne.n	8002846 <process_MPU+0x8ce>
while(status != 3){
 8002864:	7ffb      	ldrb	r3, [r7, #31]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d1dc      	bne.n	8002824 <process_MPU+0x8ac>
}
    if(status == 3){
 800286a:	7ffb      	ldrb	r3, [r7, #31]
 800286c:	2b03      	cmp	r3, #3
 800286e:	f040 8284 	bne.w	8002d7a <process_MPU+0xe02>
    	reg = 0x03;
 8002872:	2303      	movs	r3, #3
 8002874:	77bb      	strb	r3, [r7, #30]
    	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &reg, 1, 1000) != HAL_OK);
 8002876:	bf00      	nop
 8002878:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800287c:	b299      	uxth	r1, r3
 800287e:	f107 021e 	add.w	r2, r7, #30
 8002882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2301      	movs	r3, #1
 800288a:	48af      	ldr	r0, [pc, #700]	; (8002b48 <process_MPU+0xbd0>)
 800288c:	f002 f84a 	bl	8004924 <HAL_I2C_Master_Transmit>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <process_MPU+0x900>
    	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &mag_data,7, 1000) != HAL_OK);
 8002896:	bf00      	nop
 8002898:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800289c:	b299      	uxth	r1, r3
 800289e:	f107 0220 	add.w	r2, r7, #32
 80028a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2307      	movs	r3, #7
 80028aa:	48a7      	ldr	r0, [pc, #668]	; (8002b48 <process_MPU+0xbd0>)
 80028ac:	f002 f938 	bl	8004b20 <HAL_I2C_Master_Receive>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <process_MPU+0x920>
//    	if(!(mag_data[6]|MAGIC_OVERFLOW_MASK)){
    		Mag_x = (int16_t)(mag_data[0] | (mag_data[1]<<8));
 80028b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028ba:	b21a      	sxth	r2, r3
 80028bc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	b21b      	sxth	r3, r3
 80028c4:	4313      	orrs	r3, r2
 80028c6:	b21b      	sxth	r3, r3
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d0:	4b9e      	ldr	r3, [pc, #632]	; (8002b4c <process_MPU+0xbd4>)
 80028d2:	edc3 7a00 	vstr	s15, [r3]
    		Mag_y = (int16_t)(mag_data[2] | (mag_data[3]<<8));
 80028d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80028da:	b21a      	sxth	r2, r3
 80028dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028e0:	021b      	lsls	r3, r3, #8
 80028e2:	b21b      	sxth	r3, r3
 80028e4:	4313      	orrs	r3, r2
 80028e6:	b21b      	sxth	r3, r3
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f0:	4b97      	ldr	r3, [pc, #604]	; (8002b50 <process_MPU+0xbd8>)
 80028f2:	edc3 7a00 	vstr	s15, [r3]
    		Mag_z = (int16_t)(mag_data[4] | (mag_data[5]<<8));
 80028f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028fa:	b21a      	sxth	r2, r3
 80028fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	b21b      	sxth	r3, r3
 8002904:	4313      	orrs	r3, r2
 8002906:	b21b      	sxth	r3, r3
 8002908:	ee07 3a90 	vmov	s15, r3
 800290c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002910:	4b90      	ldr	r3, [pc, #576]	; (8002b54 <process_MPU+0xbdc>)
 8002912:	edc3 7a00 	vstr	s15, [r3]

            float m[3] = {Mag_x,Mag_y,Mag_z};
 8002916:	4b8d      	ldr	r3, [pc, #564]	; (8002b4c <process_MPU+0xbd4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	4b8c      	ldr	r3, [pc, #560]	; (8002b50 <process_MPU+0xbd8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	4b8c      	ldr	r3, [pc, #560]	; (8002b54 <process_MPU+0xbdc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	61bb      	str	r3, [r7, #24]
//
//            magnet_calib[0] = A_m[0]*temp[0] + A_m[1]*temp[1] +A_m[2]*temp[2];
//            magnet_calib[1] = A_m[3]*temp[0] + A_m[4]*temp[1] +A_m[5]*temp[2];
//            magnet_calib[2] = A_m[6]*temp[0] + A_m[7]*temp[1] +A_m[8]*temp[2];

            med_gyroX /= count;
 8002928:	4b8b      	ldr	r3, [pc, #556]	; (8002b58 <process_MPU+0xbe0>)
 800292a:	edd3 6a00 	vldr	s13, [r3]
 800292e:	4b8b      	ldr	r3, [pc, #556]	; (8002b5c <process_MPU+0xbe4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	ee07 3a90 	vmov	s15, r3
 8002936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800293a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800293e:	4b86      	ldr	r3, [pc, #536]	; (8002b58 <process_MPU+0xbe0>)
 8002940:	edc3 7a00 	vstr	s15, [r3]
            med_gyroY /= count;
 8002944:	4b86      	ldr	r3, [pc, #536]	; (8002b60 <process_MPU+0xbe8>)
 8002946:	edd3 6a00 	vldr	s13, [r3]
 800294a:	4b84      	ldr	r3, [pc, #528]	; (8002b5c <process_MPU+0xbe4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800295a:	4b81      	ldr	r3, [pc, #516]	; (8002b60 <process_MPU+0xbe8>)
 800295c:	edc3 7a00 	vstr	s15, [r3]
            med_gyroZ /= count;
 8002960:	4b80      	ldr	r3, [pc, #512]	; (8002b64 <process_MPU+0xbec>)
 8002962:	edd3 6a00 	vldr	s13, [r3]
 8002966:	4b7d      	ldr	r3, [pc, #500]	; (8002b5c <process_MPU+0xbe4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002976:	4b7b      	ldr	r3, [pc, #492]	; (8002b64 <process_MPU+0xbec>)
 8002978:	edc3 7a00 	vstr	s15, [r3]

            med_accX /= count;
 800297c:	4b7a      	ldr	r3, [pc, #488]	; (8002b68 <process_MPU+0xbf0>)
 800297e:	edd3 6a00 	vldr	s13, [r3]
 8002982:	4b76      	ldr	r3, [pc, #472]	; (8002b5c <process_MPU+0xbe4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	ee07 3a90 	vmov	s15, r3
 800298a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800298e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002992:	4b75      	ldr	r3, [pc, #468]	; (8002b68 <process_MPU+0xbf0>)
 8002994:	edc3 7a00 	vstr	s15, [r3]
            med_accY /= count;
 8002998:	4b74      	ldr	r3, [pc, #464]	; (8002b6c <process_MPU+0xbf4>)
 800299a:	edd3 6a00 	vldr	s13, [r3]
 800299e:	4b6f      	ldr	r3, [pc, #444]	; (8002b5c <process_MPU+0xbe4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ae:	4b6f      	ldr	r3, [pc, #444]	; (8002b6c <process_MPU+0xbf4>)
 80029b0:	edc3 7a00 	vstr	s15, [r3]
            med_accZ /= count;
 80029b4:	4b6e      	ldr	r3, [pc, #440]	; (8002b70 <process_MPU+0xbf8>)
 80029b6:	edd3 6a00 	vldr	s13, [r3]
 80029ba:	4b68      	ldr	r3, [pc, #416]	; (8002b5c <process_MPU+0xbe4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	ee07 3a90 	vmov	s15, r3
 80029c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ca:	4b69      	ldr	r3, [pc, #420]	; (8002b70 <process_MPU+0xbf8>)
 80029cc:	edc3 7a00 	vstr	s15, [r3]
            w__ = med_accZ - (-1.9502)*w1__ - 0.9514*w2__;
 80029d0:	4b67      	ldr	r3, [pc, #412]	; (8002b70 <process_MPU+0xbf8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fd67 	bl	80004a8 <__aeabi_f2d>
 80029da:	4604      	mov	r4, r0
 80029dc:	460d      	mov	r5, r1
 80029de:	4b65      	ldr	r3, [pc, #404]	; (8002b74 <process_MPU+0xbfc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fd60 	bl	80004a8 <__aeabi_f2d>
 80029e8:	a34d      	add	r3, pc, #308	; (adr r3, 8002b20 <process_MPU+0xba8>)
 80029ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ee:	f7fd fdb3 	bl	8000558 <__aeabi_dmul>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	f7fd fbf7 	bl	80001ec <__adddf3>
 80029fe:	4603      	mov	r3, r0
 8002a00:	460c      	mov	r4, r1
 8002a02:	4625      	mov	r5, r4
 8002a04:	461c      	mov	r4, r3
 8002a06:	4b5c      	ldr	r3, [pc, #368]	; (8002b78 <process_MPU+0xc00>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fd4c 	bl	80004a8 <__aeabi_f2d>
 8002a10:	a345      	add	r3, pc, #276	; (adr r3, 8002b28 <process_MPU+0xbb0>)
 8002a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a16:	f7fd fd9f 	bl	8000558 <__aeabi_dmul>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4620      	mov	r0, r4
 8002a20:	4629      	mov	r1, r5
 8002a22:	f7fd fbe1 	bl	80001e8 <__aeabi_dsub>
 8002a26:	4603      	mov	r3, r0
 8002a28:	460c      	mov	r4, r1
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	4621      	mov	r1, r4
 8002a2e:	f7fe f88b 	bl	8000b48 <__aeabi_d2f>
 8002a32:	4602      	mov	r2, r0
 8002a34:	4b51      	ldr	r3, [pc, #324]	; (8002b7c <process_MPU+0xc04>)
 8002a36:	601a      	str	r2, [r3, #0]
            y3 = (w__*1 + w1__*1.7994 + 1*w2__)*0.0003;
 8002a38:	4b50      	ldr	r3, [pc, #320]	; (8002b7c <process_MPU+0xc04>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fd fd33 	bl	80004a8 <__aeabi_f2d>
 8002a42:	4604      	mov	r4, r0
 8002a44:	460d      	mov	r5, r1
 8002a46:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <process_MPU+0xbfc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fd2c 	bl	80004a8 <__aeabi_f2d>
 8002a50:	a337      	add	r3, pc, #220	; (adr r3, 8002b30 <process_MPU+0xbb8>)
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	f7fd fd7f 	bl	8000558 <__aeabi_dmul>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4620      	mov	r0, r4
 8002a60:	4629      	mov	r1, r5
 8002a62:	f7fd fbc3 	bl	80001ec <__adddf3>
 8002a66:	4603      	mov	r3, r0
 8002a68:	460c      	mov	r4, r1
 8002a6a:	4625      	mov	r5, r4
 8002a6c:	461c      	mov	r4, r3
 8002a6e:	4b42      	ldr	r3, [pc, #264]	; (8002b78 <process_MPU+0xc00>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd fd18 	bl	80004a8 <__aeabi_f2d>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f7fd fbb4 	bl	80001ec <__adddf3>
 8002a84:	4603      	mov	r3, r0
 8002a86:	460c      	mov	r4, r1
 8002a88:	4618      	mov	r0, r3
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	a32a      	add	r3, pc, #168	; (adr r3, 8002b38 <process_MPU+0xbc0>)
 8002a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a92:	f7fd fd61 	bl	8000558 <__aeabi_dmul>
 8002a96:	4603      	mov	r3, r0
 8002a98:	460c      	mov	r4, r1
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	f7fe f853 	bl	8000b48 <__aeabi_d2f>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	4b36      	ldr	r3, [pc, #216]	; (8002b80 <process_MPU+0xc08>)
 8002aa6:	601a      	str	r2, [r3, #0]
            w2__ = w1__;
 8002aa8:	4b32      	ldr	r3, [pc, #200]	; (8002b74 <process_MPU+0xbfc>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a32      	ldr	r2, [pc, #200]	; (8002b78 <process_MPU+0xc00>)
 8002aae:	6013      	str	r3, [r2, #0]
            w1__ = w__;
 8002ab0:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <process_MPU+0xc04>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a2f      	ldr	r2, [pc, #188]	; (8002b74 <process_MPU+0xbfc>)
 8002ab6:	6013      	str	r3, [r2, #0]

            roll_acc = atan2(Acc_y,Acc_z)*RAD2DEC;
 8002ab8:	4b32      	ldr	r3, [pc, #200]	; (8002b84 <process_MPU+0xc0c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd fcf3 	bl	80004a8 <__aeabi_f2d>
 8002ac2:	4604      	mov	r4, r0
 8002ac4:	460d      	mov	r5, r1
 8002ac6:	4b30      	ldr	r3, [pc, #192]	; (8002b88 <process_MPU+0xc10>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd fcec 	bl	80004a8 <__aeabi_f2d>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	ec43 2b11 	vmov	d1, r2, r3
 8002ad8:	ec45 4b10 	vmov	d0, r4, r5
 8002adc:	f007 ff3e 	bl	800a95c <atan2>
 8002ae0:	ec51 0b10 	vmov	r0, r1, d0
 8002ae4:	a316      	add	r3, pc, #88	; (adr r3, 8002b40 <process_MPU+0xbc8>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fd35 	bl	8000558 <__aeabi_dmul>
 8002aee:	4603      	mov	r3, r0
 8002af0:	460c      	mov	r4, r1
 8002af2:	4618      	mov	r0, r3
 8002af4:	4621      	mov	r1, r4
 8002af6:	f7fe f827 	bl	8000b48 <__aeabi_d2f>
 8002afa:	4602      	mov	r2, r0
 8002afc:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <process_MPU+0xc14>)
 8002afe:	601a      	str	r2, [r3, #0]
            com_angle_r = alpha*(com_angle_r + 0.0003*med_gyroX) + (1-alpha)*roll_acc;
 8002b00:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <process_MPU+0xc18>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fccf 	bl	80004a8 <__aeabi_f2d>
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	460d      	mov	r5, r1
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <process_MPU+0xbe0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fd fcc8 	bl	80004a8 <__aeabi_f2d>
 8002b18:	e03c      	b.n	8002b94 <process_MPU+0xc1c>
 8002b1a:	bf00      	nop
 8002b1c:	f3af 8000 	nop.w
 8002b20:	ea4a8c15 	.word	0xea4a8c15
 8002b24:	3fff3404 	.word	0x3fff3404
 8002b28:	69ad42c4 	.word	0x69ad42c4
 8002b2c:	3fee71de 	.word	0x3fee71de
 8002b30:	a786c227 	.word	0xa786c227
 8002b34:	3ffcca57 	.word	0x3ffcca57
 8002b38:	30553261 	.word	0x30553261
 8002b3c:	3f33a92a 	.word	0x3f33a92a
 8002b40:	1a5d2372 	.word	0x1a5d2372
 8002b44:	404ca5dc 	.word	0x404ca5dc
 8002b48:	200040d8 	.word	0x200040d8
 8002b4c:	20004330 	.word	0x20004330
 8002b50:	20004400 	.word	0x20004400
 8002b54:	20004310 	.word	0x20004310
 8002b58:	200041b0 	.word	0x200041b0
 8002b5c:	20004404 	.word	0x20004404
 8002b60:	200042c8 	.word	0x200042c8
 8002b64:	200044e0 	.word	0x200044e0
 8002b68:	20004408 	.word	0x20004408
 8002b6c:	20004420 	.word	0x20004420
 8002b70:	20004314 	.word	0x20004314
 8002b74:	20004514 	.word	0x20004514
 8002b78:	20004394 	.word	0x20004394
 8002b7c:	20004464 	.word	0x20004464
 8002b80:	20004290 	.word	0x20004290
 8002b84:	20004298 	.word	0x20004298
 8002b88:	20004190 	.word	0x20004190
 8002b8c:	20004508 	.word	0x20004508
 8002b90:	2000432c 	.word	0x2000432c
 8002b94:	a380      	add	r3, pc, #512	; (adr r3, 8002d98 <process_MPU+0xe20>)
 8002b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9a:	f7fd fcdd 	bl	8000558 <__aeabi_dmul>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	f7fd fb21 	bl	80001ec <__adddf3>
 8002baa:	4603      	mov	r3, r0
 8002bac:	460c      	mov	r4, r1
 8002bae:	4618      	mov	r0, r3
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	a37b      	add	r3, pc, #492	; (adr r3, 8002da0 <process_MPU+0xe28>)
 8002bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb8:	f7fd fcce 	bl	8000558 <__aeabi_dmul>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	460c      	mov	r4, r1
 8002bc0:	4625      	mov	r5, r4
 8002bc2:	461c      	mov	r4, r3
 8002bc4:	4b78      	ldr	r3, [pc, #480]	; (8002da8 <process_MPU+0xe30>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fd fc6d 	bl	80004a8 <__aeabi_f2d>
 8002bce:	a36e      	add	r3, pc, #440	; (adr r3, 8002d88 <process_MPU+0xe10>)
 8002bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd4:	f7fd fcc0 	bl	8000558 <__aeabi_dmul>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4620      	mov	r0, r4
 8002bde:	4629      	mov	r1, r5
 8002be0:	f7fd fb04 	bl	80001ec <__adddf3>
 8002be4:	4603      	mov	r3, r0
 8002be6:	460c      	mov	r4, r1
 8002be8:	4618      	mov	r0, r3
 8002bea:	4621      	mov	r1, r4
 8002bec:	f7fd ffac 	bl	8000b48 <__aeabi_d2f>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b6e      	ldr	r3, [pc, #440]	; (8002dac <process_MPU+0xe34>)
 8002bf4:	601a      	str	r2, [r3, #0]
            roll_acc = atan2(Acc_y,Acc_z)*RAD2DEC;
 8002bf6:	4b6e      	ldr	r3, [pc, #440]	; (8002db0 <process_MPU+0xe38>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fc54 	bl	80004a8 <__aeabi_f2d>
 8002c00:	4604      	mov	r4, r0
 8002c02:	460d      	mov	r5, r1
 8002c04:	4b6b      	ldr	r3, [pc, #428]	; (8002db4 <process_MPU+0xe3c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fd fc4d 	bl	80004a8 <__aeabi_f2d>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	ec43 2b11 	vmov	d1, r2, r3
 8002c16:	ec45 4b10 	vmov	d0, r4, r5
 8002c1a:	f007 fe9f 	bl	800a95c <atan2>
 8002c1e:	ec51 0b10 	vmov	r0, r1, d0
 8002c22:	a35b      	add	r3, pc, #364	; (adr r3, 8002d90 <process_MPU+0xe18>)
 8002c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c28:	f7fd fc96 	bl	8000558 <__aeabi_dmul>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	460c      	mov	r4, r1
 8002c30:	4618      	mov	r0, r3
 8002c32:	4621      	mov	r1, r4
 8002c34:	f7fd ff88 	bl	8000b48 <__aeabi_d2f>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4b5b      	ldr	r3, [pc, #364]	; (8002da8 <process_MPU+0xe30>)
 8002c3c:	601a      	str	r2, [r3, #0]
            com_angle_p = alpha*(com_angle_p + 0.0003*med_gyroY) + (1-alpha)*pitch_acc;
 8002c3e:	4b5e      	ldr	r3, [pc, #376]	; (8002db8 <process_MPU+0xe40>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd fc30 	bl	80004a8 <__aeabi_f2d>
 8002c48:	4604      	mov	r4, r0
 8002c4a:	460d      	mov	r5, r1
 8002c4c:	4b5b      	ldr	r3, [pc, #364]	; (8002dbc <process_MPU+0xe44>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fc29 	bl	80004a8 <__aeabi_f2d>
 8002c56:	a350      	add	r3, pc, #320	; (adr r3, 8002d98 <process_MPU+0xe20>)
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f7fd fc7c 	bl	8000558 <__aeabi_dmul>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4620      	mov	r0, r4
 8002c66:	4629      	mov	r1, r5
 8002c68:	f7fd fac0 	bl	80001ec <__adddf3>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	460c      	mov	r4, r1
 8002c70:	4618      	mov	r0, r3
 8002c72:	4621      	mov	r1, r4
 8002c74:	a34a      	add	r3, pc, #296	; (adr r3, 8002da0 <process_MPU+0xe28>)
 8002c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7a:	f7fd fc6d 	bl	8000558 <__aeabi_dmul>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	460c      	mov	r4, r1
 8002c82:	4625      	mov	r5, r4
 8002c84:	461c      	mov	r4, r3
 8002c86:	4b4e      	ldr	r3, [pc, #312]	; (8002dc0 <process_MPU+0xe48>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fc0c 	bl	80004a8 <__aeabi_f2d>
 8002c90:	a33d      	add	r3, pc, #244	; (adr r3, 8002d88 <process_MPU+0xe10>)
 8002c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c96:	f7fd fc5f 	bl	8000558 <__aeabi_dmul>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	f7fd faa3 	bl	80001ec <__adddf3>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	460c      	mov	r4, r1
 8002caa:	4618      	mov	r0, r3
 8002cac:	4621      	mov	r1, r4
 8002cae:	f7fd ff4b 	bl	8000b48 <__aeabi_d2f>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	4b40      	ldr	r3, [pc, #256]	; (8002db8 <process_MPU+0xe40>)
 8002cb6:	601a      	str	r2, [r3, #0]
         	pitch_acc = atan(y1 /sqrt(y2*y2 + y3*y3))*RAD2DEC;
 8002cb8:	4b42      	ldr	r3, [pc, #264]	; (8002dc4 <process_MPU+0xe4c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fbf3 	bl	80004a8 <__aeabi_f2d>
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	460d      	mov	r5, r1
 8002cc6:	4b40      	ldr	r3, [pc, #256]	; (8002dc8 <process_MPU+0xe50>)
 8002cc8:	ed93 7a00 	vldr	s14, [r3]
 8002ccc:	4b3e      	ldr	r3, [pc, #248]	; (8002dc8 <process_MPU+0xe50>)
 8002cce:	edd3 7a00 	vldr	s15, [r3]
 8002cd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cd6:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <process_MPU+0xe54>)
 8002cd8:	edd3 6a00 	vldr	s13, [r3]
 8002cdc:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <process_MPU+0xe54>)
 8002cde:	edd3 7a00 	vldr	s15, [r3]
 8002ce2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cea:	ee17 0a90 	vmov	r0, s15
 8002cee:	f7fd fbdb 	bl	80004a8 <__aeabi_f2d>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	ec43 2b10 	vmov	d0, r2, r3
 8002cfa:	f007 fe31 	bl	800a960 <sqrt>
 8002cfe:	ec53 2b10 	vmov	r2, r3, d0
 8002d02:	4620      	mov	r0, r4
 8002d04:	4629      	mov	r1, r5
 8002d06:	f7fd fd51 	bl	80007ac <__aeabi_ddiv>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	460c      	mov	r4, r1
 8002d0e:	ec44 3b17 	vmov	d7, r3, r4
 8002d12:	eeb0 0a47 	vmov.f32	s0, s14
 8002d16:	eef0 0a67 	vmov.f32	s1, s15
 8002d1a:	f007 fc1d 	bl	800a558 <atan>
 8002d1e:	ec51 0b10 	vmov	r0, r1, d0
 8002d22:	a31b      	add	r3, pc, #108	; (adr r3, 8002d90 <process_MPU+0xe18>)
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	f7fd fc16 	bl	8000558 <__aeabi_dmul>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	4618      	mov	r0, r3
 8002d32:	4621      	mov	r1, r4
 8002d34:	f7fd ff08 	bl	8000b48 <__aeabi_d2f>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <process_MPU+0xe48>)
 8002d3c:	601a      	str	r2, [r3, #0]
            count = 0;
 8002d3e:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <process_MPU+0xe58>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
//               	    HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
//
//               	    ftoa(magnet_calib[2], buffer, 2);
//               	    strcat(buffer,"\n");
//               	    HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
                    med_gyroX = 0;
 8002d44:	4b23      	ldr	r3, [pc, #140]	; (8002dd4 <process_MPU+0xe5c>)
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
                    med_gyroY = 0;
 8002d4c:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <process_MPU+0xe44>)
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
                    med_gyroZ = 0;
 8002d54:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <process_MPU+0xe60>)
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

                    med_accX = 0;
 8002d5c:	4b1f      	ldr	r3, [pc, #124]	; (8002ddc <process_MPU+0xe64>)
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
                    med_accY = 0;
 8002d64:	4b1e      	ldr	r3, [pc, #120]	; (8002de0 <process_MPU+0xe68>)
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
                    med_accZ = 0;
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <process_MPU+0xe6c>)
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
                    mag_ava = 1;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    }

    return mag_ava;
 8002d7a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3778      	adds	r7, #120	; 0x78
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bdb0      	pop	{r4, r5, r7, pc}
 8002d86:	bf00      	nop
 8002d88:	99999998 	.word	0x99999998
 8002d8c:	3fc99999 	.word	0x3fc99999
 8002d90:	1a5d2372 	.word	0x1a5d2372
 8002d94:	404ca5dc 	.word	0x404ca5dc
 8002d98:	30553261 	.word	0x30553261
 8002d9c:	3f33a92a 	.word	0x3f33a92a
 8002da0:	9999999a 	.word	0x9999999a
 8002da4:	3fe99999 	.word	0x3fe99999
 8002da8:	20004508 	.word	0x20004508
 8002dac:	2000432c 	.word	0x2000432c
 8002db0:	20004298 	.word	0x20004298
 8002db4:	20004190 	.word	0x20004190
 8002db8:	20004324 	.word	0x20004324
 8002dbc:	200042c8 	.word	0x200042c8
 8002dc0:	2000450c 	.word	0x2000450c
 8002dc4:	2000451c 	.word	0x2000451c
 8002dc8:	200042cc 	.word	0x200042cc
 8002dcc:	20004290 	.word	0x20004290
 8002dd0:	20004404 	.word	0x20004404
 8002dd4:	200041b0 	.word	0x200041b0
 8002dd8:	200044e0 	.word	0x200044e0
 8002ddc:	20004408 	.word	0x20004408
 8002de0:	20004420 	.word	0x20004420
 8002de4:	20004314 	.word	0x20004314

08002de8 <complementary_filter>:

void process_float(uint8_t *data, float num){

}
void complementary_filter(float Gyro_x,float Gyro_y,float Gyro_z,float  Acc_x,float Acc_y,float Acc_z, float dt){
 8002de8:	b5b0      	push	{r4, r5, r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	ed87 0a07 	vstr	s0, [r7, #28]
 8002df2:	edc7 0a06 	vstr	s1, [r7, #24]
 8002df6:	ed87 1a05 	vstr	s2, [r7, #20]
 8002dfa:	edc7 1a04 	vstr	s3, [r7, #16]
 8002dfe:	ed87 2a03 	vstr	s4, [r7, #12]
 8002e02:	edc7 2a02 	vstr	s5, [r7, #8]
 8002e06:	ed87 3a01 	vstr	s6, [r7, #4]
	/*Low pass filter*/

	/*Complemetary filter*/

	float roll_acc, pitch_acc,yaw_mag;
    roll_acc = atan2(Acc_y,Acc_z)*RAD2DEC;
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f7fd fb4c 	bl	80004a8 <__aeabi_f2d>
 8002e10:	4604      	mov	r4, r0
 8002e12:	460d      	mov	r5, r1
 8002e14:	68b8      	ldr	r0, [r7, #8]
 8002e16:	f7fd fb47 	bl	80004a8 <__aeabi_f2d>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	ec43 2b11 	vmov	d1, r2, r3
 8002e22:	ec45 4b10 	vmov	d0, r4, r5
 8002e26:	f007 fd99 	bl	800a95c <atan2>
 8002e2a:	ec51 0b10 	vmov	r0, r1, d0
 8002e2e:	a35c      	add	r3, pc, #368	; (adr r3, 8002fa0 <complementary_filter+0x1b8>)
 8002e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e34:	f7fd fb90 	bl	8000558 <__aeabi_dmul>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	460c      	mov	r4, r1
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	4621      	mov	r1, r4
 8002e40:	f7fd fe82 	bl	8000b48 <__aeabi_d2f>
 8002e44:	4603      	mov	r3, r0
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
    pitch_acc = atan(Acc_x/sqrt(Acc_y*Acc_y + Acc_z*Acc_z))*RAD2DEC;
 8002e48:	6938      	ldr	r0, [r7, #16]
 8002e4a:	f7fd fb2d 	bl	80004a8 <__aeabi_f2d>
 8002e4e:	4604      	mov	r4, r0
 8002e50:	460d      	mov	r5, r1
 8002e52:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e56:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e5e:	edd7 6a02 	vldr	s13, [r7, #8]
 8002e62:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e6e:	ee17 0a90 	vmov	r0, s15
 8002e72:	f7fd fb19 	bl	80004a8 <__aeabi_f2d>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	ec43 2b10 	vmov	d0, r2, r3
 8002e7e:	f007 fd6f 	bl	800a960 <sqrt>
 8002e82:	ec53 2b10 	vmov	r2, r3, d0
 8002e86:	4620      	mov	r0, r4
 8002e88:	4629      	mov	r1, r5
 8002e8a:	f7fd fc8f 	bl	80007ac <__aeabi_ddiv>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	460c      	mov	r4, r1
 8002e92:	ec44 3b17 	vmov	d7, r3, r4
 8002e96:	eeb0 0a47 	vmov.f32	s0, s14
 8002e9a:	eef0 0a67 	vmov.f32	s1, s15
 8002e9e:	f007 fb5b 	bl	800a558 <atan>
 8002ea2:	ec51 0b10 	vmov	r0, r1, d0
 8002ea6:	a33e      	add	r3, pc, #248	; (adr r3, 8002fa0 <complementary_filter+0x1b8>)
 8002ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eac:	f7fd fb54 	bl	8000558 <__aeabi_dmul>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	460c      	mov	r4, r1
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	f7fd fe46 	bl	8000b48 <__aeabi_d2f>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	623b      	str	r3, [r7, #32]
//    yaw_mag = atan2(magnet_calib2,magnet_calib1)*RAD2DEC;
	com_angle_r = alpha*(com_angle_r + dt*Gyro_x) + (1-alpha)*roll_acc;
 8002ec0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ec4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ec8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ecc:	4b32      	ldr	r3, [pc, #200]	; (8002f98 <complementary_filter+0x1b0>)
 8002ece:	edd3 7a00 	vldr	s15, [r3]
 8002ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed6:	ee17 0a90 	vmov	r0, s15
 8002eda:	f7fd fae5 	bl	80004a8 <__aeabi_f2d>
 8002ede:	a32a      	add	r3, pc, #168	; (adr r3, 8002f88 <complementary_filter+0x1a0>)
 8002ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee4:	f7fd fb38 	bl	8000558 <__aeabi_dmul>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	460c      	mov	r4, r1
 8002eec:	4625      	mov	r5, r4
 8002eee:	461c      	mov	r4, r3
 8002ef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ef2:	f7fd fad9 	bl	80004a8 <__aeabi_f2d>
 8002ef6:	a326      	add	r3, pc, #152	; (adr r3, 8002f90 <complementary_filter+0x1a8>)
 8002ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efc:	f7fd fb2c 	bl	8000558 <__aeabi_dmul>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4620      	mov	r0, r4
 8002f06:	4629      	mov	r1, r5
 8002f08:	f7fd f970 	bl	80001ec <__adddf3>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	460c      	mov	r4, r1
 8002f10:	4618      	mov	r0, r3
 8002f12:	4621      	mov	r1, r4
 8002f14:	f7fd fe18 	bl	8000b48 <__aeabi_d2f>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	4b1f      	ldr	r3, [pc, #124]	; (8002f98 <complementary_filter+0x1b0>)
 8002f1c:	601a      	str	r2, [r3, #0]
	com_angle_p = alpha*(com_angle_p + dt*Gyro_y) + (1-alpha)*pitch_acc;
 8002f1e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f22:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f2a:	4b1c      	ldr	r3, [pc, #112]	; (8002f9c <complementary_filter+0x1b4>)
 8002f2c:	edd3 7a00 	vldr	s15, [r3]
 8002f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f34:	ee17 0a90 	vmov	r0, s15
 8002f38:	f7fd fab6 	bl	80004a8 <__aeabi_f2d>
 8002f3c:	a312      	add	r3, pc, #72	; (adr r3, 8002f88 <complementary_filter+0x1a0>)
 8002f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f42:	f7fd fb09 	bl	8000558 <__aeabi_dmul>
 8002f46:	4603      	mov	r3, r0
 8002f48:	460c      	mov	r4, r1
 8002f4a:	4625      	mov	r5, r4
 8002f4c:	461c      	mov	r4, r3
 8002f4e:	6a38      	ldr	r0, [r7, #32]
 8002f50:	f7fd faaa 	bl	80004a8 <__aeabi_f2d>
 8002f54:	a30e      	add	r3, pc, #56	; (adr r3, 8002f90 <complementary_filter+0x1a8>)
 8002f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5a:	f7fd fafd 	bl	8000558 <__aeabi_dmul>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4620      	mov	r0, r4
 8002f64:	4629      	mov	r1, r5
 8002f66:	f7fd f941 	bl	80001ec <__adddf3>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	460c      	mov	r4, r1
 8002f6e:	4618      	mov	r0, r3
 8002f70:	4621      	mov	r1, r4
 8002f72:	f7fd fde9 	bl	8000b48 <__aeabi_d2f>
 8002f76:	4602      	mov	r2, r0
 8002f78:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <complementary_filter+0x1b4>)
 8002f7a:	601a      	str	r2, [r3, #0]
//	com_angle_y = alpha*(com_angle_y + dt*Gyro_z) + (1-alpha)*yaw_mag;
}
 8002f7c:	bf00      	nop
 8002f7e:	3728      	adds	r7, #40	; 0x28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bdb0      	pop	{r4, r5, r7, pc}
 8002f84:	f3af 8000 	nop.w
 8002f88:	9999999a 	.word	0x9999999a
 8002f8c:	3fe99999 	.word	0x3fe99999
 8002f90:	99999998 	.word	0x99999998
 8002f94:	3fc99999 	.word	0x3fc99999
 8002f98:	2000432c 	.word	0x2000432c
 8002f9c:	20004324 	.word	0x20004324
 8002fa0:	1a5d2372 	.word	0x1a5d2372
 8002fa4:	404ca5dc 	.word	0x404ca5dc

08002fa8 <quat2euler>:



void quat2euler(float a, float b,float c, float d){
 8002fa8:	b5b0      	push	{r4, r5, r7, lr}
 8002faa:	b08a      	sub	sp, #40	; 0x28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	ed87 0a03 	vstr	s0, [r7, #12]
 8002fb2:	edc7 0a02 	vstr	s1, [r7, #8]
 8002fb6:	ed87 1a01 	vstr	s2, [r7, #4]
 8002fba:	edc7 1a00 	vstr	s3, [r7]

	float sinr = 2*(a*b + c * d);
 8002fbe:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fca:	edd7 6a01 	vldr	s13, [r7, #4]
 8002fce:	edd7 7a00 	vldr	s15, [r7]
 8002fd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fda:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fde:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float cosr = 1 - 2*(b*b + c * c);
 8002fe2:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fee:	edd7 6a01 	vldr	s13, [r7, #4]
 8002ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ff6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300a:	edc7 7a08 	vstr	s15, [r7, #32]
	roll = atan2(sinr, cosr);
 800300e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003010:	f7fd fa4a 	bl	80004a8 <__aeabi_f2d>
 8003014:	4604      	mov	r4, r0
 8003016:	460d      	mov	r5, r1
 8003018:	6a38      	ldr	r0, [r7, #32]
 800301a:	f7fd fa45 	bl	80004a8 <__aeabi_f2d>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	ec43 2b11 	vmov	d1, r2, r3
 8003026:	ec45 4b10 	vmov	d0, r4, r5
 800302a:	f007 fc97 	bl	800a95c <atan2>
 800302e:	ec54 3b10 	vmov	r3, r4, d0
 8003032:	4618      	mov	r0, r3
 8003034:	4621      	mov	r1, r4
 8003036:	f7fd fd87 	bl	8000b48 <__aeabi_d2f>
 800303a:	4602      	mov	r2, r0
 800303c:	4b6a      	ldr	r3, [pc, #424]	; (80031e8 <quat2euler+0x240>)
 800303e:	601a      	str	r2, [r3, #0]


	float sinp = 2*( a*c - d*b);
 8003040:	ed97 7a03 	vldr	s14, [r7, #12]
 8003044:	edd7 7a01 	vldr	s15, [r7, #4]
 8003048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800304c:	edd7 6a00 	vldr	s13, [r7]
 8003050:	edd7 7a02 	vldr	s15, [r7, #8]
 8003054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800305c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003060:	edc7 7a07 	vstr	s15, [r7, #28]
    if (sinp >= 1)
 8003064:	edd7 7a07 	vldr	s15, [r7, #28]
 8003068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800306c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003074:	db03      	blt.n	800307e <quat2euler+0xd6>
        pitch = PI/2;
 8003076:	4b5d      	ldr	r3, [pc, #372]	; (80031ec <quat2euler+0x244>)
 8003078:	4a5d      	ldr	r2, [pc, #372]	; (80031f0 <quat2euler+0x248>)
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	e01e      	b.n	80030bc <quat2euler+0x114>
    else{
    	if(sinp <= -1){
 800307e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003082:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800308a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308e:	d803      	bhi.n	8003098 <quat2euler+0xf0>
        pitch = -PI/2;
 8003090:	4b56      	ldr	r3, [pc, #344]	; (80031ec <quat2euler+0x244>)
 8003092:	4a58      	ldr	r2, [pc, #352]	; (80031f4 <quat2euler+0x24c>)
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e011      	b.n	80030bc <quat2euler+0x114>
    }
    else{
        pitch = asin(sinp);
 8003098:	69f8      	ldr	r0, [r7, #28]
 800309a:	f7fd fa05 	bl	80004a8 <__aeabi_f2d>
 800309e:	4603      	mov	r3, r0
 80030a0:	460c      	mov	r4, r1
 80030a2:	ec44 3b10 	vmov	d0, r3, r4
 80030a6:	f007 fc01 	bl	800a8ac <asin>
 80030aa:	ec54 3b10 	vmov	r3, r4, d0
 80030ae:	4618      	mov	r0, r3
 80030b0:	4621      	mov	r1, r4
 80030b2:	f7fd fd49 	bl	8000b48 <__aeabi_d2f>
 80030b6:	4602      	mov	r2, r0
 80030b8:	4b4c      	ldr	r3, [pc, #304]	; (80031ec <quat2euler+0x244>)
 80030ba:	601a      	str	r2, [r3, #0]
    }
    }


	float siny = 2*( a*d + c*b);
 80030bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80030c0:	edd7 7a00 	vldr	s15, [r7]
 80030c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030c8:	edd7 6a01 	vldr	s13, [r7, #4]
 80030cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80030d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80030dc:	edc7 7a06 	vstr	s15, [r7, #24]
	float cosy = 1 - 2*( b*b + d*d);
 80030e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80030e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80030e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ec:	edd7 6a00 	vldr	s13, [r7]
 80030f0:	edd7 7a00 	vldr	s15, [r7]
 80030f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003100:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003108:	edc7 7a05 	vstr	s15, [r7, #20]
	yaw = atan2(siny, cosy);
 800310c:	69b8      	ldr	r0, [r7, #24]
 800310e:	f7fd f9cb 	bl	80004a8 <__aeabi_f2d>
 8003112:	4604      	mov	r4, r0
 8003114:	460d      	mov	r5, r1
 8003116:	6978      	ldr	r0, [r7, #20]
 8003118:	f7fd f9c6 	bl	80004a8 <__aeabi_f2d>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	ec43 2b11 	vmov	d1, r2, r3
 8003124:	ec45 4b10 	vmov	d0, r4, r5
 8003128:	f007 fc18 	bl	800a95c <atan2>
 800312c:	ec54 3b10 	vmov	r3, r4, d0
 8003130:	4618      	mov	r0, r3
 8003132:	4621      	mov	r1, r4
 8003134:	f7fd fd08 	bl	8000b48 <__aeabi_d2f>
 8003138:	4602      	mov	r2, r0
 800313a:	4b2f      	ldr	r3, [pc, #188]	; (80031f8 <quat2euler+0x250>)
 800313c:	601a      	str	r2, [r3, #0]

    roll = roll*180/PI;
 800313e:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <quat2euler+0x240>)
 8003140:	edd3 7a00 	vldr	s15, [r3]
 8003144:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80031fc <quat2euler+0x254>
 8003148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800314c:	ee17 0a90 	vmov	r0, s15
 8003150:	f7fd f9aa 	bl	80004a8 <__aeabi_f2d>
 8003154:	a322      	add	r3, pc, #136	; (adr r3, 80031e0 <quat2euler+0x238>)
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	f7fd fb27 	bl	80007ac <__aeabi_ddiv>
 800315e:	4603      	mov	r3, r0
 8003160:	460c      	mov	r4, r1
 8003162:	4618      	mov	r0, r3
 8003164:	4621      	mov	r1, r4
 8003166:	f7fd fcef 	bl	8000b48 <__aeabi_d2f>
 800316a:	4602      	mov	r2, r0
 800316c:	4b1e      	ldr	r3, [pc, #120]	; (80031e8 <quat2euler+0x240>)
 800316e:	601a      	str	r2, [r3, #0]
    pitch = pitch*180/PI;
 8003170:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <quat2euler+0x244>)
 8003172:	edd3 7a00 	vldr	s15, [r3]
 8003176:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80031fc <quat2euler+0x254>
 800317a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800317e:	ee17 0a90 	vmov	r0, s15
 8003182:	f7fd f991 	bl	80004a8 <__aeabi_f2d>
 8003186:	a316      	add	r3, pc, #88	; (adr r3, 80031e0 <quat2euler+0x238>)
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	f7fd fb0e 	bl	80007ac <__aeabi_ddiv>
 8003190:	4603      	mov	r3, r0
 8003192:	460c      	mov	r4, r1
 8003194:	4618      	mov	r0, r3
 8003196:	4621      	mov	r1, r4
 8003198:	f7fd fcd6 	bl	8000b48 <__aeabi_d2f>
 800319c:	4602      	mov	r2, r0
 800319e:	4b13      	ldr	r3, [pc, #76]	; (80031ec <quat2euler+0x244>)
 80031a0:	601a      	str	r2, [r3, #0]
    yaw = yaw*180/PI;
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <quat2euler+0x250>)
 80031a4:	edd3 7a00 	vldr	s15, [r3]
 80031a8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80031fc <quat2euler+0x254>
 80031ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031b0:	ee17 0a90 	vmov	r0, s15
 80031b4:	f7fd f978 	bl	80004a8 <__aeabi_f2d>
 80031b8:	a309      	add	r3, pc, #36	; (adr r3, 80031e0 <quat2euler+0x238>)
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	f7fd faf5 	bl	80007ac <__aeabi_ddiv>
 80031c2:	4603      	mov	r3, r0
 80031c4:	460c      	mov	r4, r1
 80031c6:	4618      	mov	r0, r3
 80031c8:	4621      	mov	r1, r4
 80031ca:	f7fd fcbd 	bl	8000b48 <__aeabi_d2f>
 80031ce:	4602      	mov	r2, r0
 80031d0:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <quat2euler+0x250>)
 80031d2:	601a      	str	r2, [r3, #0]
}
 80031d4:	bf00      	nop
 80031d6:	3728      	adds	r7, #40	; 0x28
 80031d8:	46bd      	mov	sp, r7
 80031da:	bdb0      	pop	{r4, r5, r7, pc}
 80031dc:	f3af 8000 	nop.w
 80031e0:	54524550 	.word	0x54524550
 80031e4:	400921fb 	.word	0x400921fb
 80031e8:	200044dc 	.word	0x200044dc
 80031ec:	200044d8 	.word	0x200044d8
 80031f0:	3fc90fdb 	.word	0x3fc90fdb
 80031f4:	bfc90fdb 	.word	0xbfc90fdb
 80031f8:	200044c8 	.word	0x200044c8
 80031fc:	43340000 	.word	0x43340000

08003200 <calibration_IMU>:




void calibration_IMU(){
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	b08f      	sub	sp, #60	; 0x3c
 8003204:	af02      	add	r7, sp, #8
    /*This function is performed when the sensor is fully stationary, we assume that MPU has been inited*/
	    char buffer[8];
	    print_msg("Calibrating the sensor....\n");
 8003206:	48a7      	ldr	r0, [pc, #668]	; (80034a4 <calibration_IMU+0x2a4>)
 8003208:	f000 fb38 	bl	800387c <print_msg>
		uint8_t data[13];
		uint8_t mag_data[7];
		uint8_t status;
		uint8_t reg = ACCEL_XOUT_H;
 800320c:	233b      	movs	r3, #59	; 0x3b
 800320e:	71fb      	strb	r3, [r7, #7]
		uint8_t device_address = MPU_ADDRESS;
 8003210:	23d0      	movs	r3, #208	; 0xd0
 8003212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		uint8_t magnet_address = MAG_ADRRESS;
 8003216:	2318      	movs	r3, #24
 8003218:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        for(int i = 0; i<100; i++){
 800321c:	2300      	movs	r3, #0
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003220:	e0fa      	b.n	8003418 <calibration_IMU+0x218>

		while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 8003222:	bf00      	nop
 8003224:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003228:	b299      	uxth	r1, r3
 800322a:	1dfa      	adds	r2, r7, #7
 800322c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	2301      	movs	r3, #1
 8003234:	489c      	ldr	r0, [pc, #624]	; (80034a8 <calibration_IMU+0x2a8>)
 8003236:	f001 fb75 	bl	8004924 <HAL_I2C_Master_Transmit>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f1      	bne.n	8003224 <calibration_IMU+0x24>
		while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 8003240:	bf00      	nop
 8003242:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003246:	b299      	uxth	r1, r3
 8003248:	f107 0210 	add.w	r2, r7, #16
 800324c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	230e      	movs	r3, #14
 8003254:	4894      	ldr	r0, [pc, #592]	; (80034a8 <calibration_IMU+0x2a8>)
 8003256:	f001 fc63 	bl	8004b20 <HAL_I2C_Master_Receive>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f0      	bne.n	8003242 <calibration_IMU+0x42>

		Acc_x = (int16_t)(data[0] << 8 | data[1]);
 8003260:	7c3b      	ldrb	r3, [r7, #16]
 8003262:	021b      	lsls	r3, r3, #8
 8003264:	b21a      	sxth	r2, r3
 8003266:	7c7b      	ldrb	r3, [r7, #17]
 8003268:	b21b      	sxth	r3, r3
 800326a:	4313      	orrs	r3, r2
 800326c:	b21b      	sxth	r3, r3
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003276:	4b8d      	ldr	r3, [pc, #564]	; (80034ac <calibration_IMU+0x2ac>)
 8003278:	edc3 7a00 	vstr	s15, [r3]
		Acc_y = (int16_t)(data[2] << 8 | data[3]);
 800327c:	7cbb      	ldrb	r3, [r7, #18]
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	b21a      	sxth	r2, r3
 8003282:	7cfb      	ldrb	r3, [r7, #19]
 8003284:	b21b      	sxth	r3, r3
 8003286:	4313      	orrs	r3, r2
 8003288:	b21b      	sxth	r3, r3
 800328a:	ee07 3a90 	vmov	s15, r3
 800328e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003292:	4b87      	ldr	r3, [pc, #540]	; (80034b0 <calibration_IMU+0x2b0>)
 8003294:	edc3 7a00 	vstr	s15, [r3]
		Acc_z = (int16_t)(data[4] << 8 | data[5]);
 8003298:	7d3b      	ldrb	r3, [r7, #20]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	b21a      	sxth	r2, r3
 800329e:	7d7b      	ldrb	r3, [r7, #21]
 80032a0:	b21b      	sxth	r3, r3
 80032a2:	4313      	orrs	r3, r2
 80032a4:	b21b      	sxth	r3, r3
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ae:	4b81      	ldr	r3, [pc, #516]	; (80034b4 <calibration_IMU+0x2b4>)
 80032b0:	edc3 7a00 	vstr	s15, [r3]

	    temp = (int16_t)(data[6] << 8 | data[7]);
 80032b4:	7dbb      	ldrb	r3, [r7, #22]
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	b21a      	sxth	r2, r3
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
 80032bc:	b21b      	sxth	r3, r3
 80032be:	4313      	orrs	r3, r2
 80032c0:	b21b      	sxth	r3, r3
 80032c2:	ee07 3a90 	vmov	s15, r3
 80032c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ca:	4b7b      	ldr	r3, [pc, #492]	; (80034b8 <calibration_IMU+0x2b8>)
 80032cc:	edc3 7a00 	vstr	s15, [r3]

	    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 80032d0:	7e3b      	ldrb	r3, [r7, #24]
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	b21a      	sxth	r2, r3
 80032d6:	7e7b      	ldrb	r3, [r7, #25]
 80032d8:	b21b      	sxth	r3, r3
 80032da:	4313      	orrs	r3, r2
 80032dc:	b21b      	sxth	r3, r3
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e6:	4b75      	ldr	r3, [pc, #468]	; (80034bc <calibration_IMU+0x2bc>)
 80032e8:	edc3 7a00 	vstr	s15, [r3]
	    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 80032ec:	7ebb      	ldrb	r3, [r7, #26]
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	b21a      	sxth	r2, r3
 80032f2:	7efb      	ldrb	r3, [r7, #27]
 80032f4:	b21b      	sxth	r3, r3
 80032f6:	4313      	orrs	r3, r2
 80032f8:	b21b      	sxth	r3, r3
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003302:	4b6f      	ldr	r3, [pc, #444]	; (80034c0 <calibration_IMU+0x2c0>)
 8003304:	edc3 7a00 	vstr	s15, [r3]
	    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 8003308:	7f3b      	ldrb	r3, [r7, #28]
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	b21a      	sxth	r2, r3
 800330e:	7f7b      	ldrb	r3, [r7, #29]
 8003310:	b21b      	sxth	r3, r3
 8003312:	4313      	orrs	r3, r2
 8003314:	b21b      	sxth	r3, r3
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800331e:	4b69      	ldr	r3, [pc, #420]	; (80034c4 <calibration_IMU+0x2c4>)
 8003320:	edc3 7a00 	vstr	s15, [r3]

	    bAx += Acc_x;
 8003324:	4b61      	ldr	r3, [pc, #388]	; (80034ac <calibration_IMU+0x2ac>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd f8bd 	bl	80004a8 <__aeabi_f2d>
 800332e:	4b66      	ldr	r3, [pc, #408]	; (80034c8 <calibration_IMU+0x2c8>)
 8003330:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003334:	461a      	mov	r2, r3
 8003336:	4623      	mov	r3, r4
 8003338:	f7fc ff58 	bl	80001ec <__adddf3>
 800333c:	4603      	mov	r3, r0
 800333e:	460c      	mov	r4, r1
 8003340:	4a61      	ldr	r2, [pc, #388]	; (80034c8 <calibration_IMU+0x2c8>)
 8003342:	e9c2 3400 	strd	r3, r4, [r2]
	    bAy += Acc_y;
 8003346:	4b5a      	ldr	r3, [pc, #360]	; (80034b0 <calibration_IMU+0x2b0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7fd f8ac 	bl	80004a8 <__aeabi_f2d>
 8003350:	4b5e      	ldr	r3, [pc, #376]	; (80034cc <calibration_IMU+0x2cc>)
 8003352:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003356:	461a      	mov	r2, r3
 8003358:	4623      	mov	r3, r4
 800335a:	f7fc ff47 	bl	80001ec <__adddf3>
 800335e:	4603      	mov	r3, r0
 8003360:	460c      	mov	r4, r1
 8003362:	4a5a      	ldr	r2, [pc, #360]	; (80034cc <calibration_IMU+0x2cc>)
 8003364:	e9c2 3400 	strd	r3, r4, [r2]
	    bAz += Acc_z;
 8003368:	4b52      	ldr	r3, [pc, #328]	; (80034b4 <calibration_IMU+0x2b4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f7fd f89b 	bl	80004a8 <__aeabi_f2d>
 8003372:	4b57      	ldr	r3, [pc, #348]	; (80034d0 <calibration_IMU+0x2d0>)
 8003374:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003378:	461a      	mov	r2, r3
 800337a:	4623      	mov	r3, r4
 800337c:	f7fc ff36 	bl	80001ec <__adddf3>
 8003380:	4603      	mov	r3, r0
 8003382:	460c      	mov	r4, r1
 8003384:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <calibration_IMU+0x2d0>)
 8003386:	e9c2 3400 	strd	r3, r4, [r2]

	    bGx += Gyro_x;
 800338a:	4b4c      	ldr	r3, [pc, #304]	; (80034bc <calibration_IMU+0x2bc>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fd f88a 	bl	80004a8 <__aeabi_f2d>
 8003394:	4b4f      	ldr	r3, [pc, #316]	; (80034d4 <calibration_IMU+0x2d4>)
 8003396:	e9d3 3400 	ldrd	r3, r4, [r3]
 800339a:	461a      	mov	r2, r3
 800339c:	4623      	mov	r3, r4
 800339e:	f7fc ff25 	bl	80001ec <__adddf3>
 80033a2:	4603      	mov	r3, r0
 80033a4:	460c      	mov	r4, r1
 80033a6:	4a4b      	ldr	r2, [pc, #300]	; (80034d4 <calibration_IMU+0x2d4>)
 80033a8:	e9c2 3400 	strd	r3, r4, [r2]
	    bGy += Gyro_y;
 80033ac:	4b44      	ldr	r3, [pc, #272]	; (80034c0 <calibration_IMU+0x2c0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fd f879 	bl	80004a8 <__aeabi_f2d>
 80033b6:	4b48      	ldr	r3, [pc, #288]	; (80034d8 <calibration_IMU+0x2d8>)
 80033b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033bc:	461a      	mov	r2, r3
 80033be:	4623      	mov	r3, r4
 80033c0:	f7fc ff14 	bl	80001ec <__adddf3>
 80033c4:	4603      	mov	r3, r0
 80033c6:	460c      	mov	r4, r1
 80033c8:	4a43      	ldr	r2, [pc, #268]	; (80034d8 <calibration_IMU+0x2d8>)
 80033ca:	e9c2 3400 	strd	r3, r4, [r2]
	    bGz += Gyro_z;
 80033ce:	4b3d      	ldr	r3, [pc, #244]	; (80034c4 <calibration_IMU+0x2c4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd f868 	bl	80004a8 <__aeabi_f2d>
 80033d8:	4b40      	ldr	r3, [pc, #256]	; (80034dc <calibration_IMU+0x2dc>)
 80033da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033de:	461a      	mov	r2, r3
 80033e0:	4623      	mov	r3, r4
 80033e2:	f7fc ff03 	bl	80001ec <__adddf3>
 80033e6:	4603      	mov	r3, r0
 80033e8:	460c      	mov	r4, r1
 80033ea:	4a3c      	ldr	r2, [pc, #240]	; (80034dc <calibration_IMU+0x2dc>)
 80033ec:	e9c2 3400 	strd	r3, r4, [r2]

	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80033f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033f4:	483a      	ldr	r0, [pc, #232]	; (80034e0 <calibration_IMU+0x2e0>)
 80033f6:	f001 f942 	bl	800467e <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80033fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033fe:	4838      	ldr	r0, [pc, #224]	; (80034e0 <calibration_IMU+0x2e0>)
 8003400:	f001 f93d 	bl	800467e <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8003404:	2104      	movs	r1, #4
 8003406:	4836      	ldr	r0, [pc, #216]	; (80034e0 <calibration_IMU+0x2e0>)
 8003408:	f001 f939 	bl	800467e <HAL_GPIO_TogglePin>
	    HAL_Delay(50);
 800340c:	2032      	movs	r0, #50	; 0x32
 800340e:	f000 fe11 	bl	8004034 <HAL_Delay>
        for(int i = 0; i<100; i++){
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	3301      	adds	r3, #1
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341a:	2b63      	cmp	r3, #99	; 0x63
 800341c:	f77f af01 	ble.w	8003222 <calibration_IMU+0x22>
        }

     bAx /= 100;
 8003420:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <calibration_IMU+0x2c8>)
 8003422:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	4b2e      	ldr	r3, [pc, #184]	; (80034e4 <calibration_IMU+0x2e4>)
 800342c:	f7fd f9be 	bl	80007ac <__aeabi_ddiv>
 8003430:	4603      	mov	r3, r0
 8003432:	460c      	mov	r4, r1
 8003434:	4a24      	ldr	r2, [pc, #144]	; (80034c8 <calibration_IMU+0x2c8>)
 8003436:	e9c2 3400 	strd	r3, r4, [r2]
     bAy /= 100;
 800343a:	4b24      	ldr	r3, [pc, #144]	; (80034cc <calibration_IMU+0x2cc>)
 800343c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <calibration_IMU+0x2e4>)
 8003446:	f7fd f9b1 	bl	80007ac <__aeabi_ddiv>
 800344a:	4603      	mov	r3, r0
 800344c:	460c      	mov	r4, r1
 800344e:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <calibration_IMU+0x2cc>)
 8003450:	e9c2 3400 	strd	r3, r4, [r2]
     bAz /= 100;
 8003454:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <calibration_IMU+0x2d0>)
 8003456:	e9d3 0100 	ldrd	r0, r1, [r3]
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	4b21      	ldr	r3, [pc, #132]	; (80034e4 <calibration_IMU+0x2e4>)
 8003460:	f7fd f9a4 	bl	80007ac <__aeabi_ddiv>
 8003464:	4603      	mov	r3, r0
 8003466:	460c      	mov	r4, r1
 8003468:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <calibration_IMU+0x2d0>)
 800346a:	e9c2 3400 	strd	r3, r4, [r2]
     if(bAz > 0)
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <calibration_IMU+0x2d0>)
 8003470:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	f7fd fafc 	bl	8000a78 <__aeabi_dcmpgt>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d032      	beq.n	80034ec <calibration_IMU+0x2ec>
    	 bAz -= accel_factor;
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <calibration_IMU+0x2d0>)
 8003488:	e9d3 0100 	ldrd	r0, r1, [r3]
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <calibration_IMU+0x2e8>)
 8003492:	f7fc fea9 	bl	80001e8 <__aeabi_dsub>
 8003496:	4603      	mov	r3, r0
 8003498:	460c      	mov	r4, r1
 800349a:	4a0d      	ldr	r2, [pc, #52]	; (80034d0 <calibration_IMU+0x2d0>)
 800349c:	e9c2 3400 	strd	r3, r4, [r2]
 80034a0:	e031      	b.n	8003506 <calibration_IMU+0x306>
 80034a2:	bf00      	nop
 80034a4:	0800b1e0 	.word	0x0800b1e0
 80034a8:	200040d8 	.word	0x200040d8
 80034ac:	20004374 	.word	0x20004374
 80034b0:	20004298 	.word	0x20004298
 80034b4:	20004190 	.word	0x20004190
 80034b8:	200042c4 	.word	0x200042c4
 80034bc:	20004200 	.word	0x20004200
 80034c0:	200044d4 	.word	0x200044d4
 80034c4:	20004320 	.word	0x20004320
 80034c8:	20004418 	.word	0x20004418
 80034cc:	20004380 	.word	0x20004380
 80034d0:	200044f8 	.word	0x200044f8
 80034d4:	200043f0 	.word	0x200043f0
 80034d8:	20004260 	.word	0x20004260
 80034dc:	20004500 	.word	0x20004500
 80034e0:	40020400 	.word	0x40020400
 80034e4:	40590000 	.word	0x40590000
 80034e8:	40d00000 	.word	0x40d00000
     else
    	 bAz += accel_factor;
 80034ec:	4b47      	ldr	r3, [pc, #284]	; (800360c <calibration_IMU+0x40c>)
 80034ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	4b46      	ldr	r3, [pc, #280]	; (8003610 <calibration_IMU+0x410>)
 80034f8:	f7fc fe78 	bl	80001ec <__adddf3>
 80034fc:	4603      	mov	r3, r0
 80034fe:	460c      	mov	r4, r1
 8003500:	4a42      	ldr	r2, [pc, #264]	; (800360c <calibration_IMU+0x40c>)
 8003502:	e9c2 3400 	strd	r3, r4, [r2]
     g = sqrt(bAx*bAx + bAy*bAy + bAz*bAz);
 8003506:	4b43      	ldr	r3, [pc, #268]	; (8003614 <calibration_IMU+0x414>)
 8003508:	e9d3 0100 	ldrd	r0, r1, [r3]
 800350c:	4b41      	ldr	r3, [pc, #260]	; (8003614 <calibration_IMU+0x414>)
 800350e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003512:	461a      	mov	r2, r3
 8003514:	4623      	mov	r3, r4
 8003516:	f7fd f81f 	bl	8000558 <__aeabi_dmul>
 800351a:	4603      	mov	r3, r0
 800351c:	460c      	mov	r4, r1
 800351e:	461d      	mov	r5, r3
 8003520:	4626      	mov	r6, r4
 8003522:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <calibration_IMU+0x418>)
 8003524:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003528:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <calibration_IMU+0x418>)
 800352a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800352e:	461a      	mov	r2, r3
 8003530:	4623      	mov	r3, r4
 8003532:	f7fd f811 	bl	8000558 <__aeabi_dmul>
 8003536:	4603      	mov	r3, r0
 8003538:	460c      	mov	r4, r1
 800353a:	461a      	mov	r2, r3
 800353c:	4623      	mov	r3, r4
 800353e:	4628      	mov	r0, r5
 8003540:	4631      	mov	r1, r6
 8003542:	f7fc fe53 	bl	80001ec <__adddf3>
 8003546:	4603      	mov	r3, r0
 8003548:	460c      	mov	r4, r1
 800354a:	461d      	mov	r5, r3
 800354c:	4626      	mov	r6, r4
 800354e:	4b2f      	ldr	r3, [pc, #188]	; (800360c <calibration_IMU+0x40c>)
 8003550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003554:	4b2d      	ldr	r3, [pc, #180]	; (800360c <calibration_IMU+0x40c>)
 8003556:	e9d3 3400 	ldrd	r3, r4, [r3]
 800355a:	461a      	mov	r2, r3
 800355c:	4623      	mov	r3, r4
 800355e:	f7fc fffb 	bl	8000558 <__aeabi_dmul>
 8003562:	4603      	mov	r3, r0
 8003564:	460c      	mov	r4, r1
 8003566:	461a      	mov	r2, r3
 8003568:	4623      	mov	r3, r4
 800356a:	4628      	mov	r0, r5
 800356c:	4631      	mov	r1, r6
 800356e:	f7fc fe3d 	bl	80001ec <__adddf3>
 8003572:	4603      	mov	r3, r0
 8003574:	460c      	mov	r4, r1
 8003576:	ec44 3b17 	vmov	d7, r3, r4
 800357a:	eeb0 0a47 	vmov.f32	s0, s14
 800357e:	eef0 0a67 	vmov.f32	s1, s15
 8003582:	f007 f9ed 	bl	800a960 <sqrt>
 8003586:	eeb0 7a40 	vmov.f32	s14, s0
 800358a:	eef0 7a60 	vmov.f32	s15, s1
 800358e:	4b23      	ldr	r3, [pc, #140]	; (800361c <calibration_IMU+0x41c>)
 8003590:	ed83 7b00 	vstr	d7, [r3]

     bGx /= 100;
 8003594:	4b22      	ldr	r3, [pc, #136]	; (8003620 <calibration_IMU+0x420>)
 8003596:	e9d3 0100 	ldrd	r0, r1, [r3]
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	4b21      	ldr	r3, [pc, #132]	; (8003624 <calibration_IMU+0x424>)
 80035a0:	f7fd f904 	bl	80007ac <__aeabi_ddiv>
 80035a4:	4603      	mov	r3, r0
 80035a6:	460c      	mov	r4, r1
 80035a8:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <calibration_IMU+0x420>)
 80035aa:	e9c2 3400 	strd	r3, r4, [r2]
     bGy /= 100;
 80035ae:	4b1e      	ldr	r3, [pc, #120]	; (8003628 <calibration_IMU+0x428>)
 80035b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <calibration_IMU+0x424>)
 80035ba:	f7fd f8f7 	bl	80007ac <__aeabi_ddiv>
 80035be:	4603      	mov	r3, r0
 80035c0:	460c      	mov	r4, r1
 80035c2:	4a19      	ldr	r2, [pc, #100]	; (8003628 <calibration_IMU+0x428>)
 80035c4:	e9c2 3400 	strd	r3, r4, [r2]
     bGz /= 100;
 80035c8:	4b18      	ldr	r3, [pc, #96]	; (800362c <calibration_IMU+0x42c>)
 80035ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	4b14      	ldr	r3, [pc, #80]	; (8003624 <calibration_IMU+0x424>)
 80035d4:	f7fd f8ea 	bl	80007ac <__aeabi_ddiv>
 80035d8:	4603      	mov	r3, r0
 80035da:	460c      	mov	r4, r1
 80035dc:	4a13      	ldr	r2, [pc, #76]	; (800362c <calibration_IMU+0x42c>)
 80035de:	e9c2 3400 	strd	r3, r4, [r2]

	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 80035e2:	2200      	movs	r2, #0
 80035e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035e8:	4811      	ldr	r0, [pc, #68]	; (8003630 <calibration_IMU+0x430>)
 80035ea:	f001 f82f 	bl	800464c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 80035ee:	2200      	movs	r2, #0
 80035f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035f4:	480e      	ldr	r0, [pc, #56]	; (8003630 <calibration_IMU+0x430>)
 80035f6:	f001 f829 	bl	800464c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2104      	movs	r1, #4
 80035fe:	480c      	ldr	r0, [pc, #48]	; (8003630 <calibration_IMU+0x430>)
 8003600:	f001 f824 	bl	800464c <HAL_GPIO_WritePin>
}
 8003604:	bf00      	nop
 8003606:	3734      	adds	r7, #52	; 0x34
 8003608:	46bd      	mov	sp, r7
 800360a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800360c:	200044f8 	.word	0x200044f8
 8003610:	40d00000 	.word	0x40d00000
 8003614:	20004418 	.word	0x20004418
 8003618:	20004380 	.word	0x20004380
 800361c:	20004288 	.word	0x20004288
 8003620:	200043f0 	.word	0x200043f0
 8003624:	40590000 	.word	0x40590000
 8003628:	20004260 	.word	0x20004260
 800362c:	20004500 	.word	0x20004500
 8003630:	40020400 	.word	0x40020400

08003634 <print_raw>:
//	    		Mag_x = (int16_t)(mag_data[0] | (mag_data[1]<<8));
//	    		Mag_y = (int16_t)(mag_data[2] | (mag_data[3]<<8));
//	    		Mag_z = (int16_t)(mag_data[4] | (mag_data[5]<<8));
//}

void print_raw(char mode){
 8003634:	b5b0      	push	{r4, r5, r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
	        char buffer[10];

            ftoa(Gyro_x, buffer, 2);
 800363e:	4b86      	ldr	r3, [pc, #536]	; (8003858 <print_raw+0x224>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7fc ff30 	bl	80004a8 <__aeabi_f2d>
 8003648:	4604      	mov	r4, r0
 800364a:	460d      	mov	r5, r1
 800364c:	f107 030c 	add.w	r3, r7, #12
 8003650:	2102      	movs	r1, #2
 8003652:	4618      	mov	r0, r3
 8003654:	ec45 4b10 	vmov	d0, r4, r5
 8003658:	f7fe f942 	bl	80018e0 <ftoa>
            strcat(buffer," ");
 800365c:	f107 030c 	add.w	r3, r7, #12
 8003660:	4618      	mov	r0, r3
 8003662:	f7fc fdb5 	bl	80001d0 <strlen>
 8003666:	4603      	mov	r3, r0
 8003668:	461a      	mov	r2, r3
 800366a:	f107 030c 	add.w	r3, r7, #12
 800366e:	4413      	add	r3, r2
 8003670:	497a      	ldr	r1, [pc, #488]	; (800385c <print_raw+0x228>)
 8003672:	461a      	mov	r2, r3
 8003674:	460b      	mov	r3, r1
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
 800367a:	f107 030c 	add.w	r3, r7, #12
 800367e:	4618      	mov	r0, r3
 8003680:	f7fc fda6 	bl	80001d0 <strlen>
 8003684:	4603      	mov	r3, r0
 8003686:	b29a      	uxth	r2, r3
 8003688:	f107 010c 	add.w	r1, r7, #12
 800368c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003690:	4873      	ldr	r0, [pc, #460]	; (8003860 <print_raw+0x22c>)
 8003692:	f003 fd2e 	bl	80070f2 <HAL_UART_Transmit>

            ftoa(Gyro_y, buffer, 2);
 8003696:	4b73      	ldr	r3, [pc, #460]	; (8003864 <print_raw+0x230>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fc ff04 	bl	80004a8 <__aeabi_f2d>
 80036a0:	4604      	mov	r4, r0
 80036a2:	460d      	mov	r5, r1
 80036a4:	f107 030c 	add.w	r3, r7, #12
 80036a8:	2102      	movs	r1, #2
 80036aa:	4618      	mov	r0, r3
 80036ac:	ec45 4b10 	vmov	d0, r4, r5
 80036b0:	f7fe f916 	bl	80018e0 <ftoa>
            strcat(buffer," ");
 80036b4:	f107 030c 	add.w	r3, r7, #12
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fc fd89 	bl	80001d0 <strlen>
 80036be:	4603      	mov	r3, r0
 80036c0:	461a      	mov	r2, r3
 80036c2:	f107 030c 	add.w	r3, r7, #12
 80036c6:	4413      	add	r3, r2
 80036c8:	4964      	ldr	r1, [pc, #400]	; (800385c <print_raw+0x228>)
 80036ca:	461a      	mov	r2, r3
 80036cc:	460b      	mov	r3, r1
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
 80036d2:	f107 030c 	add.w	r3, r7, #12
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fc fd7a 	bl	80001d0 <strlen>
 80036dc:	4603      	mov	r3, r0
 80036de:	b29a      	uxth	r2, r3
 80036e0:	f107 010c 	add.w	r1, r7, #12
 80036e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036e8:	485d      	ldr	r0, [pc, #372]	; (8003860 <print_raw+0x22c>)
 80036ea:	f003 fd02 	bl	80070f2 <HAL_UART_Transmit>

            ftoa(Gyro_z, buffer, 2);
 80036ee:	4b5e      	ldr	r3, [pc, #376]	; (8003868 <print_raw+0x234>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fc fed8 	bl	80004a8 <__aeabi_f2d>
 80036f8:	4604      	mov	r4, r0
 80036fa:	460d      	mov	r5, r1
 80036fc:	f107 030c 	add.w	r3, r7, #12
 8003700:	2102      	movs	r1, #2
 8003702:	4618      	mov	r0, r3
 8003704:	ec45 4b10 	vmov	d0, r4, r5
 8003708:	f7fe f8ea 	bl	80018e0 <ftoa>
            strcat(buffer," ");
 800370c:	f107 030c 	add.w	r3, r7, #12
 8003710:	4618      	mov	r0, r3
 8003712:	f7fc fd5d 	bl	80001d0 <strlen>
 8003716:	4603      	mov	r3, r0
 8003718:	461a      	mov	r2, r3
 800371a:	f107 030c 	add.w	r3, r7, #12
 800371e:	4413      	add	r3, r2
 8003720:	494e      	ldr	r1, [pc, #312]	; (800385c <print_raw+0x228>)
 8003722:	461a      	mov	r2, r3
 8003724:	460b      	mov	r3, r1
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
 800372a:	f107 030c 	add.w	r3, r7, #12
 800372e:	4618      	mov	r0, r3
 8003730:	f7fc fd4e 	bl	80001d0 <strlen>
 8003734:	4603      	mov	r3, r0
 8003736:	b29a      	uxth	r2, r3
 8003738:	f107 010c 	add.w	r1, r7, #12
 800373c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003740:	4847      	ldr	r0, [pc, #284]	; (8003860 <print_raw+0x22c>)
 8003742:	f003 fcd6 	bl	80070f2 <HAL_UART_Transmit>

            ftoa(Acc_x, buffer, 2);
 8003746:	4b49      	ldr	r3, [pc, #292]	; (800386c <print_raw+0x238>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fc feac 	bl	80004a8 <__aeabi_f2d>
 8003750:	4604      	mov	r4, r0
 8003752:	460d      	mov	r5, r1
 8003754:	f107 030c 	add.w	r3, r7, #12
 8003758:	2102      	movs	r1, #2
 800375a:	4618      	mov	r0, r3
 800375c:	ec45 4b10 	vmov	d0, r4, r5
 8003760:	f7fe f8be 	bl	80018e0 <ftoa>
            strcat(buffer," ");
 8003764:	f107 030c 	add.w	r3, r7, #12
 8003768:	4618      	mov	r0, r3
 800376a:	f7fc fd31 	bl	80001d0 <strlen>
 800376e:	4603      	mov	r3, r0
 8003770:	461a      	mov	r2, r3
 8003772:	f107 030c 	add.w	r3, r7, #12
 8003776:	4413      	add	r3, r2
 8003778:	4938      	ldr	r1, [pc, #224]	; (800385c <print_raw+0x228>)
 800377a:	461a      	mov	r2, r3
 800377c:	460b      	mov	r3, r1
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
 8003782:	f107 030c 	add.w	r3, r7, #12
 8003786:	4618      	mov	r0, r3
 8003788:	f7fc fd22 	bl	80001d0 <strlen>
 800378c:	4603      	mov	r3, r0
 800378e:	b29a      	uxth	r2, r3
 8003790:	f107 010c 	add.w	r1, r7, #12
 8003794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003798:	4831      	ldr	r0, [pc, #196]	; (8003860 <print_raw+0x22c>)
 800379a:	f003 fcaa 	bl	80070f2 <HAL_UART_Transmit>

            ftoa(Acc_y, buffer, 2);
 800379e:	4b34      	ldr	r3, [pc, #208]	; (8003870 <print_raw+0x23c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fc fe80 	bl	80004a8 <__aeabi_f2d>
 80037a8:	4604      	mov	r4, r0
 80037aa:	460d      	mov	r5, r1
 80037ac:	f107 030c 	add.w	r3, r7, #12
 80037b0:	2102      	movs	r1, #2
 80037b2:	4618      	mov	r0, r3
 80037b4:	ec45 4b10 	vmov	d0, r4, r5
 80037b8:	f7fe f892 	bl	80018e0 <ftoa>
            strcat(buffer," ");
 80037bc:	f107 030c 	add.w	r3, r7, #12
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fc fd05 	bl	80001d0 <strlen>
 80037c6:	4603      	mov	r3, r0
 80037c8:	461a      	mov	r2, r3
 80037ca:	f107 030c 	add.w	r3, r7, #12
 80037ce:	4413      	add	r3, r2
 80037d0:	4922      	ldr	r1, [pc, #136]	; (800385c <print_raw+0x228>)
 80037d2:	461a      	mov	r2, r3
 80037d4:	460b      	mov	r3, r1
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
 80037da:	f107 030c 	add.w	r3, r7, #12
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fc fcf6 	bl	80001d0 <strlen>
 80037e4:	4603      	mov	r3, r0
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	f107 010c 	add.w	r1, r7, #12
 80037ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037f0:	481b      	ldr	r0, [pc, #108]	; (8003860 <print_raw+0x22c>)
 80037f2:	f003 fc7e 	bl	80070f2 <HAL_UART_Transmit>

            ftoa(Acc_z, buffer, 2);
 80037f6:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <print_raw+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fc fe54 	bl	80004a8 <__aeabi_f2d>
 8003800:	4604      	mov	r4, r0
 8003802:	460d      	mov	r5, r1
 8003804:	f107 030c 	add.w	r3, r7, #12
 8003808:	2102      	movs	r1, #2
 800380a:	4618      	mov	r0, r3
 800380c:	ec45 4b10 	vmov	d0, r4, r5
 8003810:	f7fe f866 	bl	80018e0 <ftoa>
            strcat(buffer,"\n");
 8003814:	f107 030c 	add.w	r3, r7, #12
 8003818:	4618      	mov	r0, r3
 800381a:	f7fc fcd9 	bl	80001d0 <strlen>
 800381e:	4603      	mov	r3, r0
 8003820:	461a      	mov	r2, r3
 8003822:	f107 030c 	add.w	r3, r7, #12
 8003826:	4413      	add	r3, r2
 8003828:	4913      	ldr	r1, [pc, #76]	; (8003878 <print_raw+0x244>)
 800382a:	461a      	mov	r2, r3
 800382c:	460b      	mov	r3, r1
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
 8003832:	f107 030c 	add.w	r3, r7, #12
 8003836:	4618      	mov	r0, r3
 8003838:	f7fc fcca 	bl	80001d0 <strlen>
 800383c:	4603      	mov	r3, r0
 800383e:	b29a      	uxth	r2, r3
 8003840:	f107 010c 	add.w	r1, r7, #12
 8003844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003848:	4805      	ldr	r0, [pc, #20]	; (8003860 <print_raw+0x22c>)
 800384a:	f003 fc52 	bl	80070f2 <HAL_UART_Transmit>
////
//            print_magnet(mode);

}
 800384e:	bf00      	nop
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bdb0      	pop	{r4, r5, r7, pc}
 8003856:	bf00      	nop
 8003858:	20004200 	.word	0x20004200
 800385c:	0800b1fc 	.word	0x0800b1fc
 8003860:	20004204 	.word	0x20004204
 8003864:	200044d4 	.word	0x200044d4
 8003868:	20004320 	.word	0x20004320
 800386c:	20004374 	.word	0x20004374
 8003870:	20004298 	.word	0x20004298
 8003874:	20004190 	.word	0x20004190
 8003878:	0800b200 	.word	0x0800b200

0800387c <print_msg>:
	}
}
void print_Euler(){

}
void print_msg(char*msg){
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,msg, strlen(msg),1000);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7fc fca3 	bl	80001d0 <strlen>
 800388a:	4603      	mov	r3, r0
 800388c:	b29a      	uxth	r2, r3
 800388e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4803      	ldr	r0, [pc, #12]	; (80038a4 <print_msg+0x28>)
 8003896:	f003 fc2c 	bl	80070f2 <HAL_UART_Transmit>
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20004204 	.word	0x20004204

080038a8 <sbus_decode>:
 *
 *  Created on: Nov 26, 2019
 *      Author: Đặng Lâm Tùng
 */
#include "sbus.h"
void sbus_decode(uint8_t data[6]){
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	esc_value1 = (data[0] << 3) | ((data[1] & 0b11100000)>>5);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	b21a      	sxth	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3301      	adds	r3, #1
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	b21b      	sxth	r3, r3
 80038c4:	4313      	orrs	r3, r2
 80038c6:	b21b      	sxth	r3, r3
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	4b24      	ldr	r3, [pc, #144]	; (800395c <sbus_decode+0xb4>)
 80038cc:	801a      	strh	r2, [r3, #0]
	esc_value2 = ((data[1] & 0b00011111)<<6)|((data[2] & 0b11111100)>>2);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3301      	adds	r3, #1
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	019b      	lsls	r3, r3, #6
 80038d6:	b21b      	sxth	r3, r3
 80038d8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80038dc:	b21a      	sxth	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3302      	adds	r3, #2
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	b21b      	sxth	r3, r3
 80038ea:	4313      	orrs	r3, r2
 80038ec:	b21b      	sxth	r3, r3
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <sbus_decode+0xb8>)
 80038f2:	801a      	strh	r2, [r3, #0]
	esc_value3 = (((data[2] &0b00000011)<<9)|(data[3]<<1))|((data[4] & 0b10000000)>>7);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3302      	adds	r3, #2
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	025b      	lsls	r3, r3, #9
 80038fc:	b21b      	sxth	r3, r3
 80038fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003902:	b21a      	sxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3303      	adds	r3, #3
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	b21b      	sxth	r3, r3
 800390e:	4313      	orrs	r3, r2
 8003910:	b21a      	sxth	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3304      	adds	r3, #4
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	09db      	lsrs	r3, r3, #7
 800391a:	b2db      	uxtb	r3, r3
 800391c:	b21b      	sxth	r3, r3
 800391e:	4313      	orrs	r3, r2
 8003920:	b21b      	sxth	r3, r3
 8003922:	b29a      	uxth	r2, r3
 8003924:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <sbus_decode+0xbc>)
 8003926:	801a      	strh	r2, [r3, #0]
	esc_value4 = ((data[4] & 0b01111111)<<4)|(data[5])>>4;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3304      	adds	r3, #4
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	b21b      	sxth	r3, r3
 8003932:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003936:	b21a      	sxth	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3305      	adds	r3, #5
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	b2db      	uxtb	r3, r3
 8003942:	b21b      	sxth	r3, r3
 8003944:	4313      	orrs	r3, r2
 8003946:	b21b      	sxth	r3, r3
 8003948:	b29a      	uxth	r2, r3
 800394a:	4b07      	ldr	r3, [pc, #28]	; (8003968 <sbus_decode+0xc0>)
 800394c:	801a      	strh	r2, [r3, #0]
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	20004078 	.word	0x20004078
 8003960:	20004060 	.word	0x20004060
 8003964:	200040b4 	.word	0x200040b4
 8003968:	200040cc 	.word	0x200040cc

0800396c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <HAL_MspInit+0x54>)
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	4a11      	ldr	r2, [pc, #68]	; (80039c0 <HAL_MspInit+0x54>)
 800397c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003980:	6453      	str	r3, [r2, #68]	; 0x44
 8003982:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <HAL_MspInit+0x54>)
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398a:	607b      	str	r3, [r7, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_MspInit+0x54>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <HAL_MspInit+0x54>)
 8003998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399c:	6413      	str	r3, [r2, #64]	; 0x40
 800399e:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <HAL_MspInit+0x54>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80039aa:	2200      	movs	r2, #0
 80039ac:	210f      	movs	r1, #15
 80039ae:	f06f 0001 	mvn.w	r0, #1
 80039b2:	f000 fc3c 	bl	800422e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40023800 	.word	0x40023800

080039c4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0b      	ldr	r2, [pc, #44]	; (8003a00 <HAL_CRC_MspInit+0x3c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d10d      	bne.n	80039f2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <HAL_CRC_MspInit+0x40>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <HAL_CRC_MspInit+0x40>)
 80039e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039e4:	6313      	str	r3, [r2, #48]	; 0x30
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <HAL_CRC_MspInit+0x40>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40023000 	.word	0x40023000
 8003a04:	40023800 	.word	0x40023800

08003a08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	; 0x28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a10:	f107 0314 	add.w	r3, r7, #20
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
 8003a1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <HAL_I2C_MspInit+0x84>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d12c      	bne.n	8003a84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	4b18      	ldr	r3, [pc, #96]	; (8003a90 <HAL_I2C_MspInit+0x88>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	4a17      	ldr	r2, [pc, #92]	; (8003a90 <HAL_I2C_MspInit+0x88>)
 8003a34:	f043 0302 	orr.w	r3, r3, #2
 8003a38:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <HAL_I2C_MspInit+0x88>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a4c:	2312      	movs	r3, #18
 8003a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a50:	2301      	movs	r3, #1
 8003a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a54:	2303      	movs	r3, #3
 8003a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a58:	2304      	movs	r3, #4
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a5c:	f107 0314 	add.w	r3, r7, #20
 8003a60:	4619      	mov	r1, r3
 8003a62:	480c      	ldr	r0, [pc, #48]	; (8003a94 <HAL_I2C_MspInit+0x8c>)
 8003a64:	f000 fc58 	bl	8004318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_I2C_MspInit+0x88>)
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	4a07      	ldr	r2, [pc, #28]	; (8003a90 <HAL_I2C_MspInit+0x88>)
 8003a72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a76:	6413      	str	r3, [r2, #64]	; 0x40
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_I2C_MspInit+0x88>)
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003a84:	bf00      	nop
 8003a86:	3728      	adds	r7, #40	; 0x28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40005400 	.word	0x40005400
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40020400 	.word	0x40020400

08003a98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08a      	sub	sp, #40	; 0x28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa0:	f107 0314 	add.w	r3, r7, #20
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	60da      	str	r2, [r3, #12]
 8003aae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a19      	ldr	r2, [pc, #100]	; (8003b1c <HAL_SPI_MspInit+0x84>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d12b      	bne.n	8003b12 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	4b18      	ldr	r3, [pc, #96]	; (8003b20 <HAL_SPI_MspInit+0x88>)
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <HAL_SPI_MspInit+0x88>)
 8003ac4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aca:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <HAL_SPI_MspInit+0x88>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <HAL_SPI_MspInit+0x88>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	4a10      	ldr	r2, [pc, #64]	; (8003b20 <HAL_SPI_MspInit+0x88>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae6:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <HAL_SPI_MspInit+0x88>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003af2:	23e0      	movs	r3, #224	; 0xe0
 8003af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af6:	2302      	movs	r3, #2
 8003af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003afe:	2303      	movs	r3, #3
 8003b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b02:	2305      	movs	r3, #5
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b06:	f107 0314 	add.w	r3, r7, #20
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4805      	ldr	r0, [pc, #20]	; (8003b24 <HAL_SPI_MspInit+0x8c>)
 8003b0e:	f000 fc03 	bl	8004318 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b12:	bf00      	nop
 8003b14:	3728      	adds	r7, #40	; 0x28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40013000 	.word	0x40013000
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40020000 	.word	0x40020000

08003b28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <HAL_TIM_PWM_MspInit+0x3c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d10d      	bne.n	8003b56 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <HAL_TIM_PWM_MspInit+0x40>)
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	4a09      	ldr	r2, [pc, #36]	; (8003b68 <HAL_TIM_PWM_MspInit+0x40>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6453      	str	r3, [r2, #68]	; 0x44
 8003b4a:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <HAL_TIM_PWM_MspInit+0x40>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40010000 	.word	0x40010000
 8003b68:	40023800 	.word	0x40023800

08003b6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a18      	ldr	r2, [pc, #96]	; (8003bdc <HAL_TIM_Base_MspInit+0x70>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d116      	bne.n	8003bac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	4b17      	ldr	r3, [pc, #92]	; (8003be0 <HAL_TIM_Base_MspInit+0x74>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	4a16      	ldr	r2, [pc, #88]	; (8003be0 <HAL_TIM_Base_MspInit+0x74>)
 8003b88:	f043 0302 	orr.w	r3, r3, #2
 8003b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b8e:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <HAL_TIM_Base_MspInit+0x74>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2105      	movs	r1, #5
 8003b9e:	201d      	movs	r0, #29
 8003ba0:	f000 fb45 	bl	800422e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003ba4:	201d      	movs	r0, #29
 8003ba6:	f000 fb5e 	bl	8004266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003baa:	e012      	b.n	8003bd2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a0c      	ldr	r2, [pc, #48]	; (8003be4 <HAL_TIM_Base_MspInit+0x78>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d10d      	bne.n	8003bd2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <HAL_TIM_Base_MspInit+0x74>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <HAL_TIM_Base_MspInit+0x74>)
 8003bc0:	f043 0304 	orr.w	r3, r3, #4
 8003bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_TIM_Base_MspInit+0x74>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40000400 	.word	0x40000400
 8003be0:	40023800 	.word	0x40023800
 8003be4:	40000800 	.word	0x40000800

08003be8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf0:	f107 030c 	add.w	r3, r7, #12
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a12      	ldr	r2, [pc, #72]	; (8003c50 <HAL_TIM_MspPostInit+0x68>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d11e      	bne.n	8003c48 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <HAL_TIM_MspPostInit+0x6c>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	4a10      	ldr	r2, [pc, #64]	; (8003c54 <HAL_TIM_MspPostInit+0x6c>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1a:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <HAL_TIM_MspPostInit+0x6c>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003c26:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003c2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c34:	2300      	movs	r3, #0
 8003c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c3c:	f107 030c 	add.w	r3, r7, #12
 8003c40:	4619      	mov	r1, r3
 8003c42:	4805      	ldr	r0, [pc, #20]	; (8003c58 <HAL_TIM_MspPostInit+0x70>)
 8003c44:	f000 fb68 	bl	8004318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003c48:	bf00      	nop
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40010000 	.word	0x40010000
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40020000 	.word	0x40020000

08003c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08e      	sub	sp, #56	; 0x38
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	605a      	str	r2, [r3, #4]
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	60da      	str	r2, [r3, #12]
 8003c72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a57      	ldr	r2, [pc, #348]	; (8003dd8 <HAL_UART_MspInit+0x17c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d134      	bne.n	8003ce8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	623b      	str	r3, [r7, #32]
 8003c82:	4b56      	ldr	r3, [pc, #344]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	4a55      	ldr	r2, [pc, #340]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003c88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8e:	4b53      	ldr	r3, [pc, #332]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c96:	623b      	str	r3, [r7, #32]
 8003c98:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	4b4f      	ldr	r3, [pc, #316]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	4a4e      	ldr	r2, [pc, #312]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8003caa:	4b4c      	ldr	r3, [pc, #304]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	61fb      	str	r3, [r7, #28]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003cc6:	2308      	movs	r3, #8
 8003cc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4843      	ldr	r0, [pc, #268]	; (8003de0 <HAL_UART_MspInit+0x184>)
 8003cd2:	f000 fb21 	bl	8004318 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2105      	movs	r1, #5
 8003cda:	2034      	movs	r0, #52	; 0x34
 8003cdc:	f000 faa7 	bl	800422e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003ce0:	2034      	movs	r0, #52	; 0x34
 8003ce2:	f000 fac0 	bl	8004266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003ce6:	e073      	b.n	8003dd0 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a3d      	ldr	r2, [pc, #244]	; (8003de4 <HAL_UART_MspInit+0x188>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d134      	bne.n	8003d5c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	4b39      	ldr	r3, [pc, #228]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	4a38      	ldr	r2, [pc, #224]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003cfc:	f043 0310 	orr.w	r3, r3, #16
 8003d00:	6453      	str	r3, [r2, #68]	; 0x44
 8003d02:	4b36      	ldr	r3, [pc, #216]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	61bb      	str	r3, [r7, #24]
 8003d0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	4b32      	ldr	r3, [pc, #200]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	4a31      	ldr	r2, [pc, #196]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003d18:	f043 0302 	orr.w	r3, r3, #2
 8003d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1e:	4b2f      	ldr	r3, [pc, #188]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d2a:	23c0      	movs	r3, #192	; 0xc0
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2e:	2302      	movs	r3, #2
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d36:	2303      	movs	r3, #3
 8003d38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d3a:	2307      	movs	r3, #7
 8003d3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d42:	4619      	mov	r1, r3
 8003d44:	4828      	ldr	r0, [pc, #160]	; (8003de8 <HAL_UART_MspInit+0x18c>)
 8003d46:	f000 fae7 	bl	8004318 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	2025      	movs	r0, #37	; 0x25
 8003d50:	f000 fa6d 	bl	800422e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d54:	2025      	movs	r0, #37	; 0x25
 8003d56:	f000 fa86 	bl	8004266 <HAL_NVIC_EnableIRQ>
}
 8003d5a:	e039      	b.n	8003dd0 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a22      	ldr	r2, [pc, #136]	; (8003dec <HAL_UART_MspInit+0x190>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d134      	bne.n	8003dd0 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d74:	6413      	str	r3, [r2, #64]	; 0x40
 8003d76:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	4a14      	ldr	r2, [pc, #80]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003d8c:	f043 0302 	orr.w	r3, r3, #2
 8003d90:	6313      	str	r3, [r2, #48]	; 0x30
 8003d92:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <HAL_UART_MspInit+0x180>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da4:	2302      	movs	r3, #2
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dac:	2303      	movs	r3, #3
 8003dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003db0:	2307      	movs	r3, #7
 8003db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003db8:	4619      	mov	r1, r3
 8003dba:	480b      	ldr	r0, [pc, #44]	; (8003de8 <HAL_UART_MspInit+0x18c>)
 8003dbc:	f000 faac 	bl	8004318 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	2027      	movs	r0, #39	; 0x27
 8003dc6:	f000 fa32 	bl	800422e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003dca:	2027      	movs	r0, #39	; 0x27
 8003dcc:	f000 fa4b 	bl	8004266 <HAL_NVIC_EnableIRQ>
}
 8003dd0:	bf00      	nop
 8003dd2:	3738      	adds	r7, #56	; 0x38
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40004c00 	.word	0x40004c00
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40020000 	.word	0x40020000
 8003de4:	40011000 	.word	0x40011000
 8003de8:	40020400 	.word	0x40020400
 8003dec:	40004800 	.word	0x40004800

08003df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003df4:	bf00      	nop
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e02:	e7fe      	b.n	8003e02 <HardFault_Handler+0x4>

08003e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e08:	e7fe      	b.n	8003e08 <MemManage_Handler+0x4>

08003e0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e0e:	e7fe      	b.n	8003e0e <BusFault_Handler+0x4>

08003e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e14:	e7fe      	b.n	8003e14 <UsageFault_Handler+0x4>

08003e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e16:	b480      	push	{r7}
 8003e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e28:	f000 f8e4 	bl	8003ff4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003e2c:	f005 fe3a 	bl	8009aa4 <xTaskGetSchedulerState>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d001      	beq.n	8003e3a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003e36:	f006 f8ef 	bl	800a018 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e44:	4802      	ldr	r0, [pc, #8]	; (8003e50 <TIM3_IRQHandler+0x10>)
 8003e46:	f002 fa67 	bl	8006318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	200042d0 	.word	0x200042d0

08003e54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e58:	4802      	ldr	r0, [pc, #8]	; (8003e64 <USART1_IRQHandler+0x10>)
 8003e5a:	f003 fa39 	bl	80072d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20004334 	.word	0x20004334

08003e68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003e6c:	4802      	ldr	r0, [pc, #8]	; (8003e78 <USART3_IRQHandler+0x10>)
 8003e6e:	f003 fa2f 	bl	80072d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20004204 	.word	0x20004204

08003e7c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003e80:	4802      	ldr	r0, [pc, #8]	; (8003e8c <UART4_IRQHandler+0x10>)
 8003e82:	f003 fa25 	bl	80072d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20004424 	.word	0x20004424

08003e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e94:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <SystemInit+0x60>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9a:	4a15      	ldr	r2, [pc, #84]	; (8003ef0 <SystemInit+0x60>)
 8003e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003ea4:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <SystemInit+0x64>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a12      	ldr	r2, [pc, #72]	; (8003ef4 <SystemInit+0x64>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003eb0:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <SystemInit+0x64>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003eb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <SystemInit+0x64>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a0e      	ldr	r2, [pc, #56]	; (8003ef4 <SystemInit+0x64>)
 8003ebc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <SystemInit+0x64>)
 8003ec8:	4a0b      	ldr	r2, [pc, #44]	; (8003ef8 <SystemInit+0x68>)
 8003eca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003ecc:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <SystemInit+0x64>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a08      	ldr	r2, [pc, #32]	; (8003ef4 <SystemInit+0x64>)
 8003ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003ed8:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <SystemInit+0x64>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ede:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <SystemInit+0x60>)
 8003ee0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ee4:	609a      	str	r2, [r3, #8]
#endif
}
 8003ee6:	bf00      	nop
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000ed00 	.word	0xe000ed00
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	24003010 	.word	0x24003010

08003efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f02:	e003      	b.n	8003f0c <LoopCopyDataInit>

08003f04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f0a:	3104      	adds	r1, #4

08003f0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f0c:	480b      	ldr	r0, [pc, #44]	; (8003f3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f14:	d3f6      	bcc.n	8003f04 <CopyDataInit>
  ldr  r2, =_sbss
 8003f16:	4a0b      	ldr	r2, [pc, #44]	; (8003f44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003f18:	e002      	b.n	8003f20 <LoopFillZerobss>

08003f1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f1c:	f842 3b04 	str.w	r3, [r2], #4

08003f20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f24:	d3f9      	bcc.n	8003f1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f26:	f7ff ffb3 	bl	8003e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f2a:	f006 fadd 	bl	800a4e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f2e:	f7fd f845 	bl	8000fbc <main>
  bx  lr    
 8003f32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003f34:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003f38:	0800b2dc 	.word	0x0800b2dc
  ldr  r0, =_sdata
 8003f3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003f40:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8003f44:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8003f48:	2000452c 	.word	0x2000452c

08003f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f4c:	e7fe      	b.n	8003f4c <ADC_IRQHandler>
	...

08003f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f54:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <HAL_Init+0x40>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a0d      	ldr	r2, [pc, #52]	; (8003f90 <HAL_Init+0x40>)
 8003f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_Init+0x40>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <HAL_Init+0x40>)
 8003f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f6c:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <HAL_Init+0x40>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a07      	ldr	r2, [pc, #28]	; (8003f90 <HAL_Init+0x40>)
 8003f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f78:	2003      	movs	r0, #3
 8003f7a:	f000 f94d 	bl	8004218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f7e:	200f      	movs	r0, #15
 8003f80:	f000 f808 	bl	8003f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f84:	f7ff fcf2 	bl	800396c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40023c00 	.word	0x40023c00

08003f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f9c:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <HAL_InitTick+0x54>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	4b12      	ldr	r3, [pc, #72]	; (8003fec <HAL_InitTick+0x58>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f965 	bl	8004282 <HAL_SYSTICK_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e00e      	b.n	8003fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b0f      	cmp	r3, #15
 8003fc6:	d80a      	bhi.n	8003fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fc8:	2200      	movs	r2, #0
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fd0:	f000 f92d 	bl	800422e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fd4:	4a06      	ldr	r2, [pc, #24]	; (8003ff0 <HAL_InitTick+0x5c>)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e000      	b.n	8003fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20000000 	.word	0x20000000
 8003fec:	20000008 	.word	0x20000008
 8003ff0:	20000004 	.word	0x20000004

08003ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <HAL_IncTick+0x20>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_IncTick+0x24>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4413      	add	r3, r2
 8004004:	4a04      	ldr	r2, [pc, #16]	; (8004018 <HAL_IncTick+0x24>)
 8004006:	6013      	str	r3, [r2, #0]
}
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20000008 	.word	0x20000008
 8004018:	20004528 	.word	0x20004528

0800401c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return uwTick;
 8004020:	4b03      	ldr	r3, [pc, #12]	; (8004030 <HAL_GetTick+0x14>)
 8004022:	681b      	ldr	r3, [r3, #0]
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	20004528 	.word	0x20004528

08004034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800403c:	f7ff ffee 	bl	800401c <HAL_GetTick>
 8004040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800404c:	d005      	beq.n	800405a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800404e:	4b09      	ldr	r3, [pc, #36]	; (8004074 <HAL_Delay+0x40>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800405a:	bf00      	nop
 800405c:	f7ff ffde 	bl	800401c <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	429a      	cmp	r2, r3
 800406a:	d8f7      	bhi.n	800405c <HAL_Delay+0x28>
  {
  }
}
 800406c:	bf00      	nop
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	20000008 	.word	0x20000008

08004078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <__NVIC_SetPriorityGrouping+0x44>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004094:	4013      	ands	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040aa:	4a04      	ldr	r2, [pc, #16]	; (80040bc <__NVIC_SetPriorityGrouping+0x44>)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	60d3      	str	r3, [r2, #12]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040c4:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <__NVIC_GetPriorityGrouping+0x18>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	0a1b      	lsrs	r3, r3, #8
 80040ca:	f003 0307 	and.w	r3, r3, #7
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	e000ed00 	.word	0xe000ed00

080040dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	db0b      	blt.n	8004106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	f003 021f 	and.w	r2, r3, #31
 80040f4:	4907      	ldr	r1, [pc, #28]	; (8004114 <__NVIC_EnableIRQ+0x38>)
 80040f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	2001      	movs	r0, #1
 80040fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	e000e100 	.word	0xe000e100

08004118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	6039      	str	r1, [r7, #0]
 8004122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004128:	2b00      	cmp	r3, #0
 800412a:	db0a      	blt.n	8004142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	b2da      	uxtb	r2, r3
 8004130:	490c      	ldr	r1, [pc, #48]	; (8004164 <__NVIC_SetPriority+0x4c>)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	0112      	lsls	r2, r2, #4
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	440b      	add	r3, r1
 800413c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004140:	e00a      	b.n	8004158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	4908      	ldr	r1, [pc, #32]	; (8004168 <__NVIC_SetPriority+0x50>)
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	3b04      	subs	r3, #4
 8004150:	0112      	lsls	r2, r2, #4
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	440b      	add	r3, r1
 8004156:	761a      	strb	r2, [r3, #24]
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	e000e100 	.word	0xe000e100
 8004168:	e000ed00 	.word	0xe000ed00

0800416c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800416c:	b480      	push	{r7}
 800416e:	b089      	sub	sp, #36	; 0x24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f1c3 0307 	rsb	r3, r3, #7
 8004186:	2b04      	cmp	r3, #4
 8004188:	bf28      	it	cs
 800418a:	2304      	movcs	r3, #4
 800418c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	3304      	adds	r3, #4
 8004192:	2b06      	cmp	r3, #6
 8004194:	d902      	bls.n	800419c <NVIC_EncodePriority+0x30>
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	3b03      	subs	r3, #3
 800419a:	e000      	b.n	800419e <NVIC_EncodePriority+0x32>
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43da      	mvns	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	401a      	ands	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	fa01 f303 	lsl.w	r3, r1, r3
 80041be:	43d9      	mvns	r1, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041c4:	4313      	orrs	r3, r2
         );
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3724      	adds	r7, #36	; 0x24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
	...

080041d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3b01      	subs	r3, #1
 80041e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041e4:	d301      	bcc.n	80041ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041e6:	2301      	movs	r3, #1
 80041e8:	e00f      	b.n	800420a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ea:	4a0a      	ldr	r2, [pc, #40]	; (8004214 <SysTick_Config+0x40>)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041f2:	210f      	movs	r1, #15
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041f8:	f7ff ff8e 	bl	8004118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <SysTick_Config+0x40>)
 80041fe:	2200      	movs	r2, #0
 8004200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004202:	4b04      	ldr	r3, [pc, #16]	; (8004214 <SysTick_Config+0x40>)
 8004204:	2207      	movs	r2, #7
 8004206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	e000e010 	.word	0xe000e010

08004218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff ff29 	bl	8004078 <__NVIC_SetPriorityGrouping>
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800422e:	b580      	push	{r7, lr}
 8004230:	b086      	sub	sp, #24
 8004232:	af00      	add	r7, sp, #0
 8004234:	4603      	mov	r3, r0
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
 800423a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004240:	f7ff ff3e 	bl	80040c0 <__NVIC_GetPriorityGrouping>
 8004244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	6978      	ldr	r0, [r7, #20]
 800424c:	f7ff ff8e 	bl	800416c <NVIC_EncodePriority>
 8004250:	4602      	mov	r2, r0
 8004252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004256:	4611      	mov	r1, r2
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff ff5d 	bl	8004118 <__NVIC_SetPriority>
}
 800425e:	bf00      	nop
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	4603      	mov	r3, r0
 800426e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff ff31 	bl	80040dc <__NVIC_EnableIRQ>
}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff ffa2 	bl	80041d4 <SysTick_Config>
 8004290:	4603      	mov	r3, r0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e00e      	b.n	80042ca <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	795b      	ldrb	r3, [r3, #5]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d105      	bne.n	80042c2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff fb81 	bl	80039c4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d004      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2280      	movs	r2, #128	; 0x80
 80042ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e00c      	b.n	800430a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2205      	movs	r2, #5
 80042f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0201 	bic.w	r2, r2, #1
 8004306:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
	...

08004318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004318:	b480      	push	{r7}
 800431a:	b089      	sub	sp, #36	; 0x24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	e16b      	b.n	800460c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004334:	2201      	movs	r2, #1
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	429a      	cmp	r2, r3
 800434e:	f040 815a 	bne.w	8004606 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d00b      	beq.n	8004372 <HAL_GPIO_Init+0x5a>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d007      	beq.n	8004372 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004366:	2b11      	cmp	r3, #17
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b12      	cmp	r3, #18
 8004370:	d130      	bne.n	80043d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	2203      	movs	r2, #3
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043a8:	2201      	movs	r2, #1
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	f003 0201 	and.w	r2, r3, #1
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	2203      	movs	r2, #3
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	43db      	mvns	r3, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4013      	ands	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b02      	cmp	r3, #2
 800440a:	d003      	beq.n	8004414 <HAL_GPIO_Init+0xfc>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b12      	cmp	r3, #18
 8004412:	d123      	bne.n	800445c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	08da      	lsrs	r2, r3, #3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3208      	adds	r2, #8
 800441c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004420:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	220f      	movs	r2, #15
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	08da      	lsrs	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3208      	adds	r2, #8
 8004456:	69b9      	ldr	r1, [r7, #24]
 8004458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	2203      	movs	r2, #3
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 0203 	and.w	r2, r3, #3
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80b4 	beq.w	8004606 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	4b5f      	ldr	r3, [pc, #380]	; (8004620 <HAL_GPIO_Init+0x308>)
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	4a5e      	ldr	r2, [pc, #376]	; (8004620 <HAL_GPIO_Init+0x308>)
 80044a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044ac:	6453      	str	r3, [r2, #68]	; 0x44
 80044ae:	4b5c      	ldr	r3, [pc, #368]	; (8004620 <HAL_GPIO_Init+0x308>)
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044ba:	4a5a      	ldr	r2, [pc, #360]	; (8004624 <HAL_GPIO_Init+0x30c>)
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	089b      	lsrs	r3, r3, #2
 80044c0:	3302      	adds	r3, #2
 80044c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	220f      	movs	r2, #15
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4013      	ands	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a51      	ldr	r2, [pc, #324]	; (8004628 <HAL_GPIO_Init+0x310>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d02b      	beq.n	800453e <HAL_GPIO_Init+0x226>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a50      	ldr	r2, [pc, #320]	; (800462c <HAL_GPIO_Init+0x314>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d025      	beq.n	800453a <HAL_GPIO_Init+0x222>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a4f      	ldr	r2, [pc, #316]	; (8004630 <HAL_GPIO_Init+0x318>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01f      	beq.n	8004536 <HAL_GPIO_Init+0x21e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a4e      	ldr	r2, [pc, #312]	; (8004634 <HAL_GPIO_Init+0x31c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d019      	beq.n	8004532 <HAL_GPIO_Init+0x21a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a4d      	ldr	r2, [pc, #308]	; (8004638 <HAL_GPIO_Init+0x320>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <HAL_GPIO_Init+0x216>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a4c      	ldr	r2, [pc, #304]	; (800463c <HAL_GPIO_Init+0x324>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00d      	beq.n	800452a <HAL_GPIO_Init+0x212>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a4b      	ldr	r2, [pc, #300]	; (8004640 <HAL_GPIO_Init+0x328>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d007      	beq.n	8004526 <HAL_GPIO_Init+0x20e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a4a      	ldr	r2, [pc, #296]	; (8004644 <HAL_GPIO_Init+0x32c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d101      	bne.n	8004522 <HAL_GPIO_Init+0x20a>
 800451e:	2307      	movs	r3, #7
 8004520:	e00e      	b.n	8004540 <HAL_GPIO_Init+0x228>
 8004522:	2308      	movs	r3, #8
 8004524:	e00c      	b.n	8004540 <HAL_GPIO_Init+0x228>
 8004526:	2306      	movs	r3, #6
 8004528:	e00a      	b.n	8004540 <HAL_GPIO_Init+0x228>
 800452a:	2305      	movs	r3, #5
 800452c:	e008      	b.n	8004540 <HAL_GPIO_Init+0x228>
 800452e:	2304      	movs	r3, #4
 8004530:	e006      	b.n	8004540 <HAL_GPIO_Init+0x228>
 8004532:	2303      	movs	r3, #3
 8004534:	e004      	b.n	8004540 <HAL_GPIO_Init+0x228>
 8004536:	2302      	movs	r3, #2
 8004538:	e002      	b.n	8004540 <HAL_GPIO_Init+0x228>
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <HAL_GPIO_Init+0x228>
 800453e:	2300      	movs	r3, #0
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	f002 0203 	and.w	r2, r2, #3
 8004546:	0092      	lsls	r2, r2, #2
 8004548:	4093      	lsls	r3, r2
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4313      	orrs	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004550:	4934      	ldr	r1, [pc, #208]	; (8004624 <HAL_GPIO_Init+0x30c>)
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	089b      	lsrs	r3, r3, #2
 8004556:	3302      	adds	r3, #2
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800455e:	4b3a      	ldr	r3, [pc, #232]	; (8004648 <HAL_GPIO_Init+0x330>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	43db      	mvns	r3, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4013      	ands	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004582:	4a31      	ldr	r2, [pc, #196]	; (8004648 <HAL_GPIO_Init+0x330>)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004588:	4b2f      	ldr	r3, [pc, #188]	; (8004648 <HAL_GPIO_Init+0x330>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	43db      	mvns	r3, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4013      	ands	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045ac:	4a26      	ldr	r2, [pc, #152]	; (8004648 <HAL_GPIO_Init+0x330>)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045b2:	4b25      	ldr	r3, [pc, #148]	; (8004648 <HAL_GPIO_Init+0x330>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045d6:	4a1c      	ldr	r2, [pc, #112]	; (8004648 <HAL_GPIO_Init+0x330>)
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <HAL_GPIO_Init+0x330>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004600:	4a11      	ldr	r2, [pc, #68]	; (8004648 <HAL_GPIO_Init+0x330>)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3301      	adds	r3, #1
 800460a:	61fb      	str	r3, [r7, #28]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	2b0f      	cmp	r3, #15
 8004610:	f67f ae90 	bls.w	8004334 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004614:	bf00      	nop
 8004616:	3724      	adds	r7, #36	; 0x24
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	40023800 	.word	0x40023800
 8004624:	40013800 	.word	0x40013800
 8004628:	40020000 	.word	0x40020000
 800462c:	40020400 	.word	0x40020400
 8004630:	40020800 	.word	0x40020800
 8004634:	40020c00 	.word	0x40020c00
 8004638:	40021000 	.word	0x40021000
 800463c:	40021400 	.word	0x40021400
 8004640:	40021800 	.word	0x40021800
 8004644:	40021c00 	.word	0x40021c00
 8004648:	40013c00 	.word	0x40013c00

0800464c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	807b      	strh	r3, [r7, #2]
 8004658:	4613      	mov	r3, r2
 800465a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800465c:	787b      	ldrb	r3, [r7, #1]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004662:	887a      	ldrh	r2, [r7, #2]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004668:	e003      	b.n	8004672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800466a:	887b      	ldrh	r3, [r7, #2]
 800466c:	041a      	lsls	r2, r3, #16
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	619a      	str	r2, [r3, #24]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	460b      	mov	r3, r1
 8004688:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695a      	ldr	r2, [r3, #20]
 800468e:	887b      	ldrh	r3, [r7, #2]
 8004690:	401a      	ands	r2, r3
 8004692:	887b      	ldrh	r3, [r7, #2]
 8004694:	429a      	cmp	r2, r3
 8004696:	d104      	bne.n	80046a2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004698:	887b      	ldrh	r3, [r7, #2]
 800469a:	041a      	lsls	r2, r3, #16
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80046a0:	e002      	b.n	80046a8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80046a2:	887a      	ldrh	r2, [r7, #2]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	619a      	str	r2, [r3, #24]
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e11f      	b.n	8004906 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff f994 	bl	8003a08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2224      	movs	r2, #36	; 0x24
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0201 	bic.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004718:	f001 fc96 	bl	8006048 <HAL_RCC_GetPCLK1Freq>
 800471c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	4a7b      	ldr	r2, [pc, #492]	; (8004910 <HAL_I2C_Init+0x25c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d807      	bhi.n	8004738 <HAL_I2C_Init+0x84>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4a7a      	ldr	r2, [pc, #488]	; (8004914 <HAL_I2C_Init+0x260>)
 800472c:	4293      	cmp	r3, r2
 800472e:	bf94      	ite	ls
 8004730:	2301      	movls	r3, #1
 8004732:	2300      	movhi	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	e006      	b.n	8004746 <HAL_I2C_Init+0x92>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4a77      	ldr	r2, [pc, #476]	; (8004918 <HAL_I2C_Init+0x264>)
 800473c:	4293      	cmp	r3, r2
 800473e:	bf94      	ite	ls
 8004740:	2301      	movls	r3, #1
 8004742:	2300      	movhi	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e0db      	b.n	8004906 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4a72      	ldr	r2, [pc, #456]	; (800491c <HAL_I2C_Init+0x268>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	0c9b      	lsrs	r3, r3, #18
 8004758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4a64      	ldr	r2, [pc, #400]	; (8004910 <HAL_I2C_Init+0x25c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d802      	bhi.n	8004788 <HAL_I2C_Init+0xd4>
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	3301      	adds	r3, #1
 8004786:	e009      	b.n	800479c <HAL_I2C_Init+0xe8>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	4a63      	ldr	r2, [pc, #396]	; (8004920 <HAL_I2C_Init+0x26c>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	099b      	lsrs	r3, r3, #6
 800479a:	3301      	adds	r3, #1
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	4956      	ldr	r1, [pc, #344]	; (8004910 <HAL_I2C_Init+0x25c>)
 80047b8:	428b      	cmp	r3, r1
 80047ba:	d80d      	bhi.n	80047d8 <HAL_I2C_Init+0x124>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1e59      	subs	r1, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80047ca:	3301      	adds	r3, #1
 80047cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	bf38      	it	cc
 80047d4:	2304      	movcc	r3, #4
 80047d6:	e04f      	b.n	8004878 <HAL_I2C_Init+0x1c4>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d111      	bne.n	8004804 <HAL_I2C_Init+0x150>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1e58      	subs	r0, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6859      	ldr	r1, [r3, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	440b      	add	r3, r1
 80047ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f2:	3301      	adds	r3, #1
 80047f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	e012      	b.n	800482a <HAL_I2C_Init+0x176>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1e58      	subs	r0, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6859      	ldr	r1, [r3, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	0099      	lsls	r1, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	fbb0 f3f3 	udiv	r3, r0, r3
 800481a:	3301      	adds	r3, #1
 800481c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_I2C_Init+0x17e>
 800482e:	2301      	movs	r3, #1
 8004830:	e022      	b.n	8004878 <HAL_I2C_Init+0x1c4>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10e      	bne.n	8004858 <HAL_I2C_Init+0x1a4>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1e58      	subs	r0, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6859      	ldr	r1, [r3, #4]
 8004842:	460b      	mov	r3, r1
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	440b      	add	r3, r1
 8004848:	fbb0 f3f3 	udiv	r3, r0, r3
 800484c:	3301      	adds	r3, #1
 800484e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004856:	e00f      	b.n	8004878 <HAL_I2C_Init+0x1c4>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	1e58      	subs	r0, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6859      	ldr	r1, [r3, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	0099      	lsls	r1, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	fbb0 f3f3 	udiv	r3, r0, r3
 800486e:	3301      	adds	r3, #1
 8004870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	6809      	ldr	r1, [r1, #0]
 800487c:	4313      	orrs	r3, r2
 800487e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69da      	ldr	r2, [r3, #28]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6911      	ldr	r1, [r2, #16]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	68d2      	ldr	r2, [r2, #12]
 80048b2:	4311      	orrs	r1, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	430b      	orrs	r3, r1
 80048ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	000186a0 	.word	0x000186a0
 8004914:	001e847f 	.word	0x001e847f
 8004918:	003d08ff 	.word	0x003d08ff
 800491c:	431bde83 	.word	0x431bde83
 8004920:	10624dd3 	.word	0x10624dd3

08004924 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	461a      	mov	r2, r3
 8004930:	460b      	mov	r3, r1
 8004932:	817b      	strh	r3, [r7, #10]
 8004934:	4613      	mov	r3, r2
 8004936:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004938:	f7ff fb70 	bl	800401c <HAL_GetTick>
 800493c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b20      	cmp	r3, #32
 8004948:	f040 80e0 	bne.w	8004b0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	2319      	movs	r3, #25
 8004952:	2201      	movs	r2, #1
 8004954:	4970      	ldr	r1, [pc, #448]	; (8004b18 <HAL_I2C_Master_Transmit+0x1f4>)
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 fd84 	bl	8005464 <I2C_WaitOnFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004962:	2302      	movs	r3, #2
 8004964:	e0d3      	b.n	8004b0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_I2C_Master_Transmit+0x50>
 8004970:	2302      	movs	r3, #2
 8004972:	e0cc      	b.n	8004b0e <HAL_I2C_Master_Transmit+0x1ea>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b01      	cmp	r3, #1
 8004988:	d007      	beq.n	800499a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0201 	orr.w	r2, r2, #1
 8004998:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2221      	movs	r2, #33	; 0x21
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2210      	movs	r2, #16
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	893a      	ldrh	r2, [r7, #8]
 80049ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4a50      	ldr	r2, [pc, #320]	; (8004b1c <HAL_I2C_Master_Transmit+0x1f8>)
 80049da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049dc:	8979      	ldrh	r1, [r7, #10]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	6a3a      	ldr	r2, [r7, #32]
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 fbf0 	bl	80051c8 <I2C_MasterRequestWrite>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e08d      	b.n	8004b0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f2:	2300      	movs	r3, #0
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a08:	e066      	b.n	8004ad8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	6a39      	ldr	r1, [r7, #32]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 fdfe 	bl	8005610 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00d      	beq.n	8004a36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d107      	bne.n	8004a32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e06b      	b.n	8004b0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	781a      	ldrb	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d11b      	bne.n	8004aac <HAL_I2C_Master_Transmit+0x188>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d017      	beq.n	8004aac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	781a      	ldrb	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	6a39      	ldr	r1, [r7, #32]
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 fdee 	bl	8005692 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00d      	beq.n	8004ad8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d107      	bne.n	8004ad4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e01a      	b.n	8004b0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d194      	bne.n	8004a0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e000      	b.n	8004b0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b0c:	2302      	movs	r3, #2
  }
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	00100002 	.word	0x00100002
 8004b1c:	ffff0000 	.word	0xffff0000

08004b20 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08c      	sub	sp, #48	; 0x30
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	607a      	str	r2, [r7, #4]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	817b      	strh	r3, [r7, #10]
 8004b30:	4613      	mov	r3, r2
 8004b32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b34:	f7ff fa72 	bl	800401c <HAL_GetTick>
 8004b38:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	f040 820b 	bne.w	8004f5e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	2319      	movs	r3, #25
 8004b4e:	2201      	movs	r2, #1
 8004b50:	497c      	ldr	r1, [pc, #496]	; (8004d44 <HAL_I2C_Master_Receive+0x224>)
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fc86 	bl	8005464 <I2C_WaitOnFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e1fe      	b.n	8004f60 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_I2C_Master_Receive+0x50>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e1f7      	b.n	8004f60 <HAL_I2C_Master_Receive+0x440>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d007      	beq.n	8004b96 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0201 	orr.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ba4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2222      	movs	r2, #34	; 0x22
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2210      	movs	r2, #16
 8004bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	893a      	ldrh	r2, [r7, #8]
 8004bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4a5c      	ldr	r2, [pc, #368]	; (8004d48 <HAL_I2C_Master_Receive+0x228>)
 8004bd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bd8:	8979      	ldrh	r1, [r7, #10]
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 fb74 	bl	80052cc <I2C_MasterRequestRead>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e1b8      	b.n	8004f60 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d113      	bne.n	8004c1e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	623b      	str	r3, [r7, #32]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	623b      	str	r3, [r7, #32]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	623b      	str	r3, [r7, #32]
 8004c0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	e18c      	b.n	8004f38 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d11b      	bne.n	8004c5e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c36:	2300      	movs	r3, #0
 8004c38:	61fb      	str	r3, [r7, #28]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	61fb      	str	r3, [r7, #28]
 8004c4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	e16c      	b.n	8004f38 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d11b      	bne.n	8004c9e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c86:	2300      	movs	r3, #0
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	e14c      	b.n	8004f38 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004cc4:	e138      	b.n	8004f38 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	f200 80f1 	bhi.w	8004eb2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d123      	bne.n	8004d20 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 fd19 	bl	8005714 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e139      	b.n	8004f60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d1e:	e10b      	b.n	8004f38 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d14e      	bne.n	8004dc6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2e:	2200      	movs	r2, #0
 8004d30:	4906      	ldr	r1, [pc, #24]	; (8004d4c <HAL_I2C_Master_Receive+0x22c>)
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 fb96 	bl	8005464 <I2C_WaitOnFlagUntilTimeout>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d008      	beq.n	8004d50 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e10e      	b.n	8004f60 <HAL_I2C_Master_Receive+0x440>
 8004d42:	bf00      	nop
 8004d44:	00100002 	.word	0x00100002
 8004d48:	ffff0000 	.word	0xffff0000
 8004d4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dc4:	e0b8      	b.n	8004f38 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	2200      	movs	r2, #0
 8004dce:	4966      	ldr	r1, [pc, #408]	; (8004f68 <HAL_I2C_Master_Receive+0x448>)
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 fb47 	bl	8005464 <I2C_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0bf      	b.n	8004f60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	2200      	movs	r2, #0
 8004e2a:	494f      	ldr	r1, [pc, #316]	; (8004f68 <HAL_I2C_Master_Receive+0x448>)
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 fb19 	bl	8005464 <I2C_WaitOnFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e091      	b.n	8004f60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004eb0:	e042      	b.n	8004f38 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 fc2c 	bl	8005714 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e04c      	b.n	8004f60 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d118      	bne.n	8004f38 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f47f aec2 	bne.w	8004cc6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e000      	b.n	8004f60 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f5e:	2302      	movs	r3, #2
  }
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3728      	adds	r7, #40	; 0x28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	00010004 	.word	0x00010004

08004f6c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08a      	sub	sp, #40	; 0x28
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004f7c:	f7ff f84e 	bl	800401c <HAL_GetTick>
 8004f80:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004f82:	2301      	movs	r3, #1
 8004f84:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	f040 8110 	bne.w	80051b4 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	2319      	movs	r3, #25
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	4988      	ldr	r1, [pc, #544]	; (80051c0 <HAL_I2C_IsDeviceReady+0x254>)
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 fa60 	bl	8005464 <I2C_WaitOnFlagUntilTimeout>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004faa:	2302      	movs	r3, #2
 8004fac:	e103      	b.n	80051b6 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_I2C_IsDeviceReady+0x50>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e0fc      	b.n	80051b6 <HAL_I2C_IsDeviceReady+0x24a>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d007      	beq.n	8004fe2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0201 	orr.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ff0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2224      	movs	r2, #36	; 0x24
 8004ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4a70      	ldr	r2, [pc, #448]	; (80051c4 <HAL_I2C_IsDeviceReady+0x258>)
 8005004:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005014:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2200      	movs	r2, #0
 800501e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fa1e 	bl	8005464 <I2C_WaitOnFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00c      	beq.n	8005048 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005042:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e0b6      	b.n	80051b6 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005048:	897b      	ldrh	r3, [r7, #10]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005056:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005058:	f7fe ffe0 	bl	800401c <HAL_GetTick>
 800505c:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b02      	cmp	r3, #2
 800506a:	bf0c      	ite	eq
 800506c:	2301      	moveq	r3, #1
 800506e:	2300      	movne	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005082:	bf0c      	ite	eq
 8005084:	2301      	moveq	r3, #1
 8005086:	2300      	movne	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800508c:	e025      	b.n	80050da <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800508e:	f7fe ffc5 	bl	800401c <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <HAL_I2C_IsDeviceReady+0x138>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d103      	bne.n	80050ac <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	22a0      	movs	r2, #160	; 0xa0
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	bf0c      	ite	eq
 80050ba:	2301      	moveq	r3, #1
 80050bc:	2300      	movne	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d0:	bf0c      	ite	eq
 80050d2:	2301      	moveq	r3, #1
 80050d4:	2300      	movne	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2ba0      	cmp	r3, #160	; 0xa0
 80050e4:	d005      	beq.n	80050f2 <HAL_I2C_IsDeviceReady+0x186>
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d102      	bne.n	80050f2 <HAL_I2C_IsDeviceReady+0x186>
 80050ec:	7dbb      	ldrb	r3, [r7, #22]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0cd      	beq.n	800508e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b02      	cmp	r3, #2
 8005106:	d129      	bne.n	800515c <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005116:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	2319      	movs	r3, #25
 8005134:	2201      	movs	r2, #1
 8005136:	4922      	ldr	r1, [pc, #136]	; (80051c0 <HAL_I2C_IsDeviceReady+0x254>)
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f993 	bl	8005464 <I2C_WaitOnFlagUntilTimeout>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e036      	b.n	80051b6 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	e02c      	b.n	80051b6 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800516a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005174:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	2319      	movs	r3, #25
 800517c:	2201      	movs	r2, #1
 800517e:	4910      	ldr	r1, [pc, #64]	; (80051c0 <HAL_I2C_IsDeviceReady+0x254>)
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f96f 	bl	8005464 <I2C_WaitOnFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e012      	b.n	80051b6 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	3301      	adds	r3, #1
 8005194:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	429a      	cmp	r2, r3
 800519c:	f4ff af33 	bcc.w	8005006 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e000      	b.n	80051b6 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 80051b4:	2302      	movs	r3, #2
  }
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3720      	adds	r7, #32
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	00100002 	.word	0x00100002
 80051c4:	ffff0000 	.word	0xffff0000

080051c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	607a      	str	r2, [r7, #4]
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	460b      	mov	r3, r1
 80051d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d006      	beq.n	80051f2 <I2C_MasterRequestWrite+0x2a>
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d003      	beq.n	80051f2 <I2C_MasterRequestWrite+0x2a>
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051f0:	d108      	bne.n	8005204 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	e00b      	b.n	800521c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005208:	2b12      	cmp	r3, #18
 800520a:	d107      	bne.n	800521c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800521a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f91b 	bl	8005464 <I2C_WaitOnFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00c      	beq.n	800524e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005248:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e035      	b.n	80052ba <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005256:	d108      	bne.n	800526a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005258:	897b      	ldrh	r3, [r7, #10]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	461a      	mov	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005266:	611a      	str	r2, [r3, #16]
 8005268:	e01b      	b.n	80052a2 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800526a:	897b      	ldrh	r3, [r7, #10]
 800526c:	11db      	asrs	r3, r3, #7
 800526e:	b2db      	uxtb	r3, r3
 8005270:	f003 0306 	and.w	r3, r3, #6
 8005274:	b2db      	uxtb	r3, r3
 8005276:	f063 030f 	orn	r3, r3, #15
 800527a:	b2da      	uxtb	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	490f      	ldr	r1, [pc, #60]	; (80052c4 <I2C_MasterRequestWrite+0xfc>)
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f942 	bl	8005512 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e010      	b.n	80052ba <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005298:	897b      	ldrh	r3, [r7, #10]
 800529a:	b2da      	uxtb	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	4908      	ldr	r1, [pc, #32]	; (80052c8 <I2C_MasterRequestWrite+0x100>)
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f932 	bl	8005512 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	00010008 	.word	0x00010008
 80052c8:	00010002 	.word	0x00010002

080052cc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	607a      	str	r2, [r7, #4]
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	460b      	mov	r3, r1
 80052da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052f0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d006      	beq.n	8005306 <I2C_MasterRequestRead+0x3a>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d003      	beq.n	8005306 <I2C_MasterRequestRead+0x3a>
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005304:	d108      	bne.n	8005318 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	e00b      	b.n	8005330 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	2b11      	cmp	r3, #17
 800531e:	d107      	bne.n	8005330 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800532e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f891 	bl	8005464 <I2C_WaitOnFlagUntilTimeout>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00c      	beq.n	8005362 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800535c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e078      	b.n	8005454 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800536a:	d108      	bne.n	800537e <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800536c:	897b      	ldrh	r3, [r7, #10]
 800536e:	b2db      	uxtb	r3, r3
 8005370:	f043 0301 	orr.w	r3, r3, #1
 8005374:	b2da      	uxtb	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	611a      	str	r2, [r3, #16]
 800537c:	e05e      	b.n	800543c <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800537e:	897b      	ldrh	r3, [r7, #10]
 8005380:	11db      	asrs	r3, r3, #7
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f003 0306 	and.w	r3, r3, #6
 8005388:	b2db      	uxtb	r3, r3
 800538a:	f063 030f 	orn	r3, r3, #15
 800538e:	b2da      	uxtb	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	4930      	ldr	r1, [pc, #192]	; (800545c <I2C_MasterRequestRead+0x190>)
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f8b8 	bl	8005512 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e053      	b.n	8005454 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053ac:	897b      	ldrh	r3, [r7, #10]
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	4929      	ldr	r1, [pc, #164]	; (8005460 <I2C_MasterRequestRead+0x194>)
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f8a8 	bl	8005512 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e043      	b.n	8005454 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053cc:	2300      	movs	r3, #0
 80053ce:	613b      	str	r3, [r7, #16]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	613b      	str	r3, [r7, #16]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053f0:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f830 	bl	8005464 <I2C_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00c      	beq.n	8005424 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800541e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e017      	b.n	8005454 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005424:	897b      	ldrh	r3, [r7, #10]
 8005426:	11db      	asrs	r3, r3, #7
 8005428:	b2db      	uxtb	r3, r3
 800542a:	f003 0306 	and.w	r3, r3, #6
 800542e:	b2db      	uxtb	r3, r3
 8005430:	f063 030e 	orn	r3, r3, #14
 8005434:	b2da      	uxtb	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	4907      	ldr	r1, [pc, #28]	; (8005460 <I2C_MasterRequestRead+0x194>)
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f865 	bl	8005512 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	00010008 	.word	0x00010008
 8005460:	00010002 	.word	0x00010002

08005464 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	4613      	mov	r3, r2
 8005472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005474:	e025      	b.n	80054c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800547c:	d021      	beq.n	80054c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547e:	f7fe fdcd 	bl	800401c <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d302      	bcc.n	8005494 <I2C_WaitOnFlagUntilTimeout+0x30>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d116      	bne.n	80054c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	f043 0220 	orr.w	r2, r3, #32
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e023      	b.n	800550a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	0c1b      	lsrs	r3, r3, #16
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d10d      	bne.n	80054e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	43da      	mvns	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4013      	ands	r3, r2
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bf0c      	ite	eq
 80054de:	2301      	moveq	r3, #1
 80054e0:	2300      	movne	r3, #0
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	461a      	mov	r2, r3
 80054e6:	e00c      	b.n	8005502 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	43da      	mvns	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4013      	ands	r3, r2
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	bf0c      	ite	eq
 80054fa:	2301      	moveq	r3, #1
 80054fc:	2300      	movne	r3, #0
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	461a      	mov	r2, r3
 8005502:	79fb      	ldrb	r3, [r7, #7]
 8005504:	429a      	cmp	r2, r3
 8005506:	d0b6      	beq.n	8005476 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	607a      	str	r2, [r7, #4]
 800551e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005520:	e051      	b.n	80055c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800552c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005530:	d123      	bne.n	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005540:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800554a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	f043 0204 	orr.w	r2, r3, #4
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e046      	b.n	8005608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005580:	d021      	beq.n	80055c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005582:	f7fe fd4b 	bl	800401c <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	429a      	cmp	r2, r3
 8005590:	d302      	bcc.n	8005598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d116      	bne.n	80055c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	f043 0220 	orr.w	r2, r3, #32
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e020      	b.n	8005608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	0c1b      	lsrs	r3, r3, #16
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d10c      	bne.n	80055ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	43da      	mvns	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4013      	ands	r3, r2
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bf14      	ite	ne
 80055e2:	2301      	movne	r3, #1
 80055e4:	2300      	moveq	r3, #0
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	e00b      	b.n	8005602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	43da      	mvns	r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4013      	ands	r3, r2
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bf14      	ite	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	2300      	moveq	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d18d      	bne.n	8005522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800561c:	e02d      	b.n	800567a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 f8ce 	bl	80057c0 <I2C_IsAcknowledgeFailed>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e02d      	b.n	800568a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005634:	d021      	beq.n	800567a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005636:	f7fe fcf1 	bl	800401c <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	429a      	cmp	r2, r3
 8005644:	d302      	bcc.n	800564c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d116      	bne.n	800567a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	f043 0220 	orr.w	r2, r3, #32
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e007      	b.n	800568a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005684:	2b80      	cmp	r3, #128	; 0x80
 8005686:	d1ca      	bne.n	800561e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800569e:	e02d      	b.n	80056fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f88d 	bl	80057c0 <I2C_IsAcknowledgeFailed>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e02d      	b.n	800570c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056b6:	d021      	beq.n	80056fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b8:	f7fe fcb0 	bl	800401c <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d302      	bcc.n	80056ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d116      	bne.n	80056fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e8:	f043 0220 	orr.w	r2, r3, #32
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e007      	b.n	800570c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b04      	cmp	r3, #4
 8005708:	d1ca      	bne.n	80056a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005720:	e042      	b.n	80057a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	2b10      	cmp	r3, #16
 800572e:	d119      	bne.n	8005764 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0210 	mvn.w	r2, #16
 8005738:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2220      	movs	r2, #32
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e029      	b.n	80057b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005764:	f7fe fc5a 	bl	800401c <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	429a      	cmp	r2, r3
 8005772:	d302      	bcc.n	800577a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d116      	bne.n	80057a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005794:	f043 0220 	orr.w	r2, r3, #32
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e007      	b.n	80057b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d1b5      	bne.n	8005722 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d6:	d11b      	bne.n	8005810 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	f043 0204 	orr.w	r2, r3, #4
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e25b      	b.n	8005cea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d075      	beq.n	800592a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800583e:	4ba3      	ldr	r3, [pc, #652]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 030c 	and.w	r3, r3, #12
 8005846:	2b04      	cmp	r3, #4
 8005848:	d00c      	beq.n	8005864 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800584a:	4ba0      	ldr	r3, [pc, #640]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005852:	2b08      	cmp	r3, #8
 8005854:	d112      	bne.n	800587c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005856:	4b9d      	ldr	r3, [pc, #628]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800585e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005862:	d10b      	bne.n	800587c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005864:	4b99      	ldr	r3, [pc, #612]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d05b      	beq.n	8005928 <HAL_RCC_OscConfig+0x108>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d157      	bne.n	8005928 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e236      	b.n	8005cea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005884:	d106      	bne.n	8005894 <HAL_RCC_OscConfig+0x74>
 8005886:	4b91      	ldr	r3, [pc, #580]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a90      	ldr	r2, [pc, #576]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 800588c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	e01d      	b.n	80058d0 <HAL_RCC_OscConfig+0xb0>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800589c:	d10c      	bne.n	80058b8 <HAL_RCC_OscConfig+0x98>
 800589e:	4b8b      	ldr	r3, [pc, #556]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a8a      	ldr	r2, [pc, #552]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 80058a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	4b88      	ldr	r3, [pc, #544]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a87      	ldr	r2, [pc, #540]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 80058b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	e00b      	b.n	80058d0 <HAL_RCC_OscConfig+0xb0>
 80058b8:	4b84      	ldr	r3, [pc, #528]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a83      	ldr	r2, [pc, #524]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 80058be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	4b81      	ldr	r3, [pc, #516]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a80      	ldr	r2, [pc, #512]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 80058ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d013      	beq.n	8005900 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d8:	f7fe fba0 	bl	800401c <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058e0:	f7fe fb9c 	bl	800401c <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b64      	cmp	r3, #100	; 0x64
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e1fb      	b.n	8005cea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f2:	4b76      	ldr	r3, [pc, #472]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0f0      	beq.n	80058e0 <HAL_RCC_OscConfig+0xc0>
 80058fe:	e014      	b.n	800592a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005900:	f7fe fb8c 	bl	800401c <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005908:	f7fe fb88 	bl	800401c <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b64      	cmp	r3, #100	; 0x64
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e1e7      	b.n	8005cea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800591a:	4b6c      	ldr	r3, [pc, #432]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1f0      	bne.n	8005908 <HAL_RCC_OscConfig+0xe8>
 8005926:	e000      	b.n	800592a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d063      	beq.n	80059fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005936:	4b65      	ldr	r3, [pc, #404]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 030c 	and.w	r3, r3, #12
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00b      	beq.n	800595a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005942:	4b62      	ldr	r3, [pc, #392]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800594a:	2b08      	cmp	r3, #8
 800594c:	d11c      	bne.n	8005988 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800594e:	4b5f      	ldr	r3, [pc, #380]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d116      	bne.n	8005988 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800595a:	4b5c      	ldr	r3, [pc, #368]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <HAL_RCC_OscConfig+0x152>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d001      	beq.n	8005972 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e1bb      	b.n	8005cea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005972:	4b56      	ldr	r3, [pc, #344]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	4952      	ldr	r1, [pc, #328]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 8005982:	4313      	orrs	r3, r2
 8005984:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005986:	e03a      	b.n	80059fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d020      	beq.n	80059d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005990:	4b4f      	ldr	r3, [pc, #316]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
 8005992:	2201      	movs	r2, #1
 8005994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005996:	f7fe fb41 	bl	800401c <HAL_GetTick>
 800599a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800599c:	e008      	b.n	80059b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800599e:	f7fe fb3d 	bl	800401c <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d901      	bls.n	80059b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e19c      	b.n	8005cea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059b0:	4b46      	ldr	r3, [pc, #280]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0f0      	beq.n	800599e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059bc:	4b43      	ldr	r3, [pc, #268]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	4940      	ldr	r1, [pc, #256]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	600b      	str	r3, [r1, #0]
 80059d0:	e015      	b.n	80059fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059d2:	4b3f      	ldr	r3, [pc, #252]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d8:	f7fe fb20 	bl	800401c <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059e0:	f7fe fb1c 	bl	800401c <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e17b      	b.n	8005cea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059f2:	4b36      	ldr	r3, [pc, #216]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d030      	beq.n	8005a6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d016      	beq.n	8005a40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a12:	4b30      	ldr	r3, [pc, #192]	; (8005ad4 <HAL_RCC_OscConfig+0x2b4>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a18:	f7fe fb00 	bl	800401c <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a20:	f7fe fafc 	bl	800401c <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e15b      	b.n	8005cea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a32:	4b26      	ldr	r3, [pc, #152]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 8005a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0f0      	beq.n	8005a20 <HAL_RCC_OscConfig+0x200>
 8005a3e:	e015      	b.n	8005a6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a40:	4b24      	ldr	r3, [pc, #144]	; (8005ad4 <HAL_RCC_OscConfig+0x2b4>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a46:	f7fe fae9 	bl	800401c <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a4e:	f7fe fae5 	bl	800401c <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e144      	b.n	8005cea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a60:	4b1a      	ldr	r3, [pc, #104]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 8005a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1f0      	bne.n	8005a4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 80a0 	beq.w	8005bba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a7e:	4b13      	ldr	r3, [pc, #76]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10f      	bne.n	8005aaa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60bb      	str	r3, [r7, #8]
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	4a0e      	ldr	r2, [pc, #56]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 8005a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a98:	6413      	str	r3, [r2, #64]	; 0x40
 8005a9a:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <HAL_RCC_OscConfig+0x2ac>)
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa2:	60bb      	str	r3, [r7, #8]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ad8 <HAL_RCC_OscConfig+0x2b8>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d121      	bne.n	8005afa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ab6:	4b08      	ldr	r3, [pc, #32]	; (8005ad8 <HAL_RCC_OscConfig+0x2b8>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a07      	ldr	r2, [pc, #28]	; (8005ad8 <HAL_RCC_OscConfig+0x2b8>)
 8005abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ac2:	f7fe faab 	bl	800401c <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac8:	e011      	b.n	8005aee <HAL_RCC_OscConfig+0x2ce>
 8005aca:	bf00      	nop
 8005acc:	40023800 	.word	0x40023800
 8005ad0:	42470000 	.word	0x42470000
 8005ad4:	42470e80 	.word	0x42470e80
 8005ad8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005adc:	f7fe fa9e 	bl	800401c <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e0fd      	b.n	8005cea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aee:	4b81      	ldr	r3, [pc, #516]	; (8005cf4 <HAL_RCC_OscConfig+0x4d4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0f0      	beq.n	8005adc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d106      	bne.n	8005b10 <HAL_RCC_OscConfig+0x2f0>
 8005b02:	4b7d      	ldr	r3, [pc, #500]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b06:	4a7c      	ldr	r2, [pc, #496]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005b08:	f043 0301 	orr.w	r3, r3, #1
 8005b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b0e:	e01c      	b.n	8005b4a <HAL_RCC_OscConfig+0x32a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2b05      	cmp	r3, #5
 8005b16:	d10c      	bne.n	8005b32 <HAL_RCC_OscConfig+0x312>
 8005b18:	4b77      	ldr	r3, [pc, #476]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1c:	4a76      	ldr	r2, [pc, #472]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005b1e:	f043 0304 	orr.w	r3, r3, #4
 8005b22:	6713      	str	r3, [r2, #112]	; 0x70
 8005b24:	4b74      	ldr	r3, [pc, #464]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b28:	4a73      	ldr	r2, [pc, #460]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005b2a:	f043 0301 	orr.w	r3, r3, #1
 8005b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b30:	e00b      	b.n	8005b4a <HAL_RCC_OscConfig+0x32a>
 8005b32:	4b71      	ldr	r3, [pc, #452]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b36:	4a70      	ldr	r2, [pc, #448]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005b38:	f023 0301 	bic.w	r3, r3, #1
 8005b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b3e:	4b6e      	ldr	r3, [pc, #440]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b42:	4a6d      	ldr	r2, [pc, #436]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005b44:	f023 0304 	bic.w	r3, r3, #4
 8005b48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d015      	beq.n	8005b7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b52:	f7fe fa63 	bl	800401c <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b58:	e00a      	b.n	8005b70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b5a:	f7fe fa5f 	bl	800401c <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e0bc      	b.n	8005cea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b70:	4b61      	ldr	r3, [pc, #388]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d0ee      	beq.n	8005b5a <HAL_RCC_OscConfig+0x33a>
 8005b7c:	e014      	b.n	8005ba8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b7e:	f7fe fa4d 	bl	800401c <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b84:	e00a      	b.n	8005b9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b86:	f7fe fa49 	bl	800401c <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e0a6      	b.n	8005cea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b9c:	4b56      	ldr	r3, [pc, #344]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1ee      	bne.n	8005b86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d105      	bne.n	8005bba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bae:	4b52      	ldr	r3, [pc, #328]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	4a51      	ldr	r2, [pc, #324]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 8092 	beq.w	8005ce8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bc4:	4b4c      	ldr	r3, [pc, #304]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 030c 	and.w	r3, r3, #12
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d05c      	beq.n	8005c8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d141      	bne.n	8005c5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd8:	4b48      	ldr	r3, [pc, #288]	; (8005cfc <HAL_RCC_OscConfig+0x4dc>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bde:	f7fe fa1d 	bl	800401c <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be4:	e008      	b.n	8005bf8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005be6:	f7fe fa19 	bl	800401c <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e078      	b.n	8005cea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf8:	4b3f      	ldr	r3, [pc, #252]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1f0      	bne.n	8005be6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	69da      	ldr	r2, [r3, #28]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	019b      	lsls	r3, r3, #6
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1a:	085b      	lsrs	r3, r3, #1
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	041b      	lsls	r3, r3, #16
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c26:	061b      	lsls	r3, r3, #24
 8005c28:	4933      	ldr	r1, [pc, #204]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c2e:	4b33      	ldr	r3, [pc, #204]	; (8005cfc <HAL_RCC_OscConfig+0x4dc>)
 8005c30:	2201      	movs	r2, #1
 8005c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c34:	f7fe f9f2 	bl	800401c <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c3c:	f7fe f9ee 	bl	800401c <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e04d      	b.n	8005cea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4e:	4b2a      	ldr	r3, [pc, #168]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0f0      	beq.n	8005c3c <HAL_RCC_OscConfig+0x41c>
 8005c5a:	e045      	b.n	8005ce8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c5c:	4b27      	ldr	r3, [pc, #156]	; (8005cfc <HAL_RCC_OscConfig+0x4dc>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c62:	f7fe f9db 	bl	800401c <HAL_GetTick>
 8005c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c68:	e008      	b.n	8005c7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c6a:	f7fe f9d7 	bl	800401c <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d901      	bls.n	8005c7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e036      	b.n	8005cea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c7c:	4b1e      	ldr	r3, [pc, #120]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1f0      	bne.n	8005c6a <HAL_RCC_OscConfig+0x44a>
 8005c88:	e02e      	b.n	8005ce8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d101      	bne.n	8005c96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e029      	b.n	8005cea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c96:	4b18      	ldr	r3, [pc, #96]	; (8005cf8 <HAL_RCC_OscConfig+0x4d8>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d11c      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d115      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d10d      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d106      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d001      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e000      	b.n	8005cea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	40007000 	.word	0x40007000
 8005cf8:	40023800 	.word	0x40023800
 8005cfc:	42470060 	.word	0x42470060

08005d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e0cc      	b.n	8005eae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d14:	4b68      	ldr	r3, [pc, #416]	; (8005eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 030f 	and.w	r3, r3, #15
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d90c      	bls.n	8005d3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d22:	4b65      	ldr	r3, [pc, #404]	; (8005eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d2a:	4b63      	ldr	r3, [pc, #396]	; (8005eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d001      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e0b8      	b.n	8005eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d020      	beq.n	8005d8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d54:	4b59      	ldr	r3, [pc, #356]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	4a58      	ldr	r2, [pc, #352]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005d5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0308 	and.w	r3, r3, #8
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d005      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d6c:	4b53      	ldr	r3, [pc, #332]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	4a52      	ldr	r2, [pc, #328]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005d72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d78:	4b50      	ldr	r3, [pc, #320]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	494d      	ldr	r1, [pc, #308]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d044      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d107      	bne.n	8005dae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d9e:	4b47      	ldr	r3, [pc, #284]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d119      	bne.n	8005dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e07f      	b.n	8005eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d003      	beq.n	8005dbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d107      	bne.n	8005dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dbe:	4b3f      	ldr	r3, [pc, #252]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d109      	bne.n	8005dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e06f      	b.n	8005eae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dce:	4b3b      	ldr	r3, [pc, #236]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e067      	b.n	8005eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dde:	4b37      	ldr	r3, [pc, #220]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f023 0203 	bic.w	r2, r3, #3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	4934      	ldr	r1, [pc, #208]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005df0:	f7fe f914 	bl	800401c <HAL_GetTick>
 8005df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005df6:	e00a      	b.n	8005e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005df8:	f7fe f910 	bl	800401c <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e04f      	b.n	8005eae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e0e:	4b2b      	ldr	r3, [pc, #172]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 020c 	and.w	r2, r3, #12
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d1eb      	bne.n	8005df8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e20:	4b25      	ldr	r3, [pc, #148]	; (8005eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 030f 	and.w	r3, r3, #15
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d20c      	bcs.n	8005e48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e2e:	4b22      	ldr	r3, [pc, #136]	; (8005eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	b2d2      	uxtb	r2, r2
 8005e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e36:	4b20      	ldr	r3, [pc, #128]	; (8005eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d001      	beq.n	8005e48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e032      	b.n	8005eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e54:	4b19      	ldr	r3, [pc, #100]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	4916      	ldr	r1, [pc, #88]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d009      	beq.n	8005e86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e72:	4b12      	ldr	r3, [pc, #72]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	490e      	ldr	r1, [pc, #56]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e86:	f000 f821 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8005e8a:	4601      	mov	r1, r0
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	; (8005ebc <HAL_RCC_ClockConfig+0x1bc>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	091b      	lsrs	r3, r3, #4
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	4a0a      	ldr	r2, [pc, #40]	; (8005ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e98:	5cd3      	ldrb	r3, [r2, r3]
 8005e9a:	fa21 f303 	lsr.w	r3, r1, r3
 8005e9e:	4a09      	ldr	r2, [pc, #36]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ea2:	4b09      	ldr	r3, [pc, #36]	; (8005ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fe f874 	bl	8003f94 <HAL_InitTick>

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	40023c00 	.word	0x40023c00
 8005ebc:	40023800 	.word	0x40023800
 8005ec0:	0800b268 	.word	0x0800b268
 8005ec4:	20000000 	.word	0x20000000
 8005ec8:	20000004 	.word	0x20000004

08005ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	607b      	str	r3, [r7, #4]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	2300      	movs	r3, #0
 8005edc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ee2:	4b50      	ldr	r3, [pc, #320]	; (8006024 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 030c 	and.w	r3, r3, #12
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d007      	beq.n	8005efe <HAL_RCC_GetSysClockFreq+0x32>
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d008      	beq.n	8005f04 <HAL_RCC_GetSysClockFreq+0x38>
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f040 808d 	bne.w	8006012 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ef8:	4b4b      	ldr	r3, [pc, #300]	; (8006028 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005efa:	60bb      	str	r3, [r7, #8]
       break;
 8005efc:	e08c      	b.n	8006018 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005efe:	4b4b      	ldr	r3, [pc, #300]	; (800602c <HAL_RCC_GetSysClockFreq+0x160>)
 8005f00:	60bb      	str	r3, [r7, #8]
      break;
 8005f02:	e089      	b.n	8006018 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f04:	4b47      	ldr	r3, [pc, #284]	; (8006024 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f0e:	4b45      	ldr	r3, [pc, #276]	; (8006024 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d023      	beq.n	8005f62 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f1a:	4b42      	ldr	r3, [pc, #264]	; (8006024 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	099b      	lsrs	r3, r3, #6
 8005f20:	f04f 0400 	mov.w	r4, #0
 8005f24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f28:	f04f 0200 	mov.w	r2, #0
 8005f2c:	ea03 0501 	and.w	r5, r3, r1
 8005f30:	ea04 0602 	and.w	r6, r4, r2
 8005f34:	4a3d      	ldr	r2, [pc, #244]	; (800602c <HAL_RCC_GetSysClockFreq+0x160>)
 8005f36:	fb02 f106 	mul.w	r1, r2, r6
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	fb02 f205 	mul.w	r2, r2, r5
 8005f40:	440a      	add	r2, r1
 8005f42:	493a      	ldr	r1, [pc, #232]	; (800602c <HAL_RCC_GetSysClockFreq+0x160>)
 8005f44:	fba5 0101 	umull	r0, r1, r5, r1
 8005f48:	1853      	adds	r3, r2, r1
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f04f 0400 	mov.w	r4, #0
 8005f52:	461a      	mov	r2, r3
 8005f54:	4623      	mov	r3, r4
 8005f56:	f7fa fe47 	bl	8000be8 <__aeabi_uldivmod>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	e049      	b.n	8005ff6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f62:	4b30      	ldr	r3, [pc, #192]	; (8006024 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	099b      	lsrs	r3, r3, #6
 8005f68:	f04f 0400 	mov.w	r4, #0
 8005f6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	ea03 0501 	and.w	r5, r3, r1
 8005f78:	ea04 0602 	and.w	r6, r4, r2
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	4632      	mov	r2, r6
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	f04f 0400 	mov.w	r4, #0
 8005f88:	0154      	lsls	r4, r2, #5
 8005f8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f8e:	014b      	lsls	r3, r1, #5
 8005f90:	4619      	mov	r1, r3
 8005f92:	4622      	mov	r2, r4
 8005f94:	1b49      	subs	r1, r1, r5
 8005f96:	eb62 0206 	sbc.w	r2, r2, r6
 8005f9a:	f04f 0300 	mov.w	r3, #0
 8005f9e:	f04f 0400 	mov.w	r4, #0
 8005fa2:	0194      	lsls	r4, r2, #6
 8005fa4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005fa8:	018b      	lsls	r3, r1, #6
 8005faa:	1a5b      	subs	r3, r3, r1
 8005fac:	eb64 0402 	sbc.w	r4, r4, r2
 8005fb0:	f04f 0100 	mov.w	r1, #0
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	00e2      	lsls	r2, r4, #3
 8005fba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005fbe:	00d9      	lsls	r1, r3, #3
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4614      	mov	r4, r2
 8005fc4:	195b      	adds	r3, r3, r5
 8005fc6:	eb44 0406 	adc.w	r4, r4, r6
 8005fca:	f04f 0100 	mov.w	r1, #0
 8005fce:	f04f 0200 	mov.w	r2, #0
 8005fd2:	02a2      	lsls	r2, r4, #10
 8005fd4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005fd8:	0299      	lsls	r1, r3, #10
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4614      	mov	r4, r2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f04f 0400 	mov.w	r4, #0
 8005fe8:	461a      	mov	r2, r3
 8005fea:	4623      	mov	r3, r4
 8005fec:	f7fa fdfc 	bl	8000be8 <__aeabi_uldivmod>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ff6:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	0c1b      	lsrs	r3, r3, #16
 8005ffc:	f003 0303 	and.w	r3, r3, #3
 8006000:	3301      	adds	r3, #1
 8006002:	005b      	lsls	r3, r3, #1
 8006004:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	fbb2 f3f3 	udiv	r3, r2, r3
 800600e:	60bb      	str	r3, [r7, #8]
      break;
 8006010:	e002      	b.n	8006018 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006012:	4b05      	ldr	r3, [pc, #20]	; (8006028 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006014:	60bb      	str	r3, [r7, #8]
      break;
 8006016:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006018:	68bb      	ldr	r3, [r7, #8]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006022:	bf00      	nop
 8006024:	40023800 	.word	0x40023800
 8006028:	00f42400 	.word	0x00f42400
 800602c:	00b71b00 	.word	0x00b71b00

08006030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006034:	4b03      	ldr	r3, [pc, #12]	; (8006044 <HAL_RCC_GetHCLKFreq+0x14>)
 8006036:	681b      	ldr	r3, [r3, #0]
}
 8006038:	4618      	mov	r0, r3
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	20000000 	.word	0x20000000

08006048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800604c:	f7ff fff0 	bl	8006030 <HAL_RCC_GetHCLKFreq>
 8006050:	4601      	mov	r1, r0
 8006052:	4b05      	ldr	r3, [pc, #20]	; (8006068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	0a9b      	lsrs	r3, r3, #10
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	4a03      	ldr	r2, [pc, #12]	; (800606c <HAL_RCC_GetPCLK1Freq+0x24>)
 800605e:	5cd3      	ldrb	r3, [r2, r3]
 8006060:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006064:	4618      	mov	r0, r3
 8006066:	bd80      	pop	{r7, pc}
 8006068:	40023800 	.word	0x40023800
 800606c:	0800b278 	.word	0x0800b278

08006070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006074:	f7ff ffdc 	bl	8006030 <HAL_RCC_GetHCLKFreq>
 8006078:	4601      	mov	r1, r0
 800607a:	4b05      	ldr	r3, [pc, #20]	; (8006090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	0b5b      	lsrs	r3, r3, #13
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	4a03      	ldr	r2, [pc, #12]	; (8006094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006086:	5cd3      	ldrb	r3, [r2, r3]
 8006088:	fa21 f303 	lsr.w	r3, r1, r3
}
 800608c:	4618      	mov	r0, r3
 800608e:	bd80      	pop	{r7, pc}
 8006090:	40023800 	.word	0x40023800
 8006094:	0800b278 	.word	0x0800b278

08006098 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e056      	b.n	8006158 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d106      	bne.n	80060ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7fd fce7 	bl	8003a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2202      	movs	r2, #2
 80060ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	431a      	orrs	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	431a      	orrs	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	ea42 0103 	orr.w	r1, r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	0c1b      	lsrs	r3, r3, #16
 8006128:	f003 0104 	and.w	r1, r3, #4
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	69da      	ldr	r2, [r3, #28]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006146:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e01d      	b.n	80061ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fd fcf0 	bl	8003b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3304      	adds	r3, #4
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f000 fb68 	bl	8006874 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2202      	movs	r2, #2
 80061c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b06      	cmp	r3, #6
 80061d6:	d007      	beq.n	80061e8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0201 	orr.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061fe:	b480      	push	{r7}
 8006200:	b085      	sub	sp, #20
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f042 0201 	orr.w	r2, r2, #1
 8006214:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 0307 	and.w	r3, r3, #7
 8006220:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b06      	cmp	r3, #6
 8006226:	d007      	beq.n	8006238 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e01d      	b.n	8006294 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d106      	bne.n	8006272 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7fd fc5b 	bl	8003b28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3304      	adds	r3, #4
 8006282:	4619      	mov	r1, r3
 8006284:	4610      	mov	r0, r2
 8006286:	f000 faf5 	bl	8006874 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2201      	movs	r2, #1
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 fdca 	bl	8006e48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a15      	ldr	r2, [pc, #84]	; (8006310 <HAL_TIM_PWM_Start+0x74>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d004      	beq.n	80062c8 <HAL_TIM_PWM_Start+0x2c>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a14      	ldr	r2, [pc, #80]	; (8006314 <HAL_TIM_PWM_Start+0x78>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d101      	bne.n	80062cc <HAL_TIM_PWM_Start+0x30>
 80062c8:	2301      	movs	r3, #1
 80062ca:	e000      	b.n	80062ce <HAL_TIM_PWM_Start+0x32>
 80062cc:	2300      	movs	r3, #0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d007      	beq.n	80062e2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b06      	cmp	r3, #6
 80062f2:	d007      	beq.n	8006304 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	40010000 	.word	0x40010000
 8006314:	40010400 	.word	0x40010400

08006318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b02      	cmp	r3, #2
 800632c:	d122      	bne.n	8006374 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b02      	cmp	r3, #2
 800633a:	d11b      	bne.n	8006374 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0202 	mvn.w	r2, #2
 8006344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fa6b 	bl	8006836 <HAL_TIM_IC_CaptureCallback>
 8006360:	e005      	b.n	800636e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fa5d 	bl	8006822 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fa6e 	bl	800684a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f003 0304 	and.w	r3, r3, #4
 800637e:	2b04      	cmp	r3, #4
 8006380:	d122      	bne.n	80063c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b04      	cmp	r3, #4
 800638e:	d11b      	bne.n	80063c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f06f 0204 	mvn.w	r2, #4
 8006398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2202      	movs	r2, #2
 800639e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fa41 	bl	8006836 <HAL_TIM_IC_CaptureCallback>
 80063b4:	e005      	b.n	80063c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fa33 	bl	8006822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fa44 	bl	800684a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	2b08      	cmp	r3, #8
 80063d4:	d122      	bne.n	800641c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f003 0308 	and.w	r3, r3, #8
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d11b      	bne.n	800641c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f06f 0208 	mvn.w	r2, #8
 80063ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2204      	movs	r2, #4
 80063f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fa17 	bl	8006836 <HAL_TIM_IC_CaptureCallback>
 8006408:	e005      	b.n	8006416 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fa09 	bl	8006822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fa1a 	bl	800684a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f003 0310 	and.w	r3, r3, #16
 8006426:	2b10      	cmp	r3, #16
 8006428:	d122      	bne.n	8006470 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f003 0310 	and.w	r3, r3, #16
 8006434:	2b10      	cmp	r3, #16
 8006436:	d11b      	bne.n	8006470 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f06f 0210 	mvn.w	r2, #16
 8006440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2208      	movs	r2, #8
 8006446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f9ed 	bl	8006836 <HAL_TIM_IC_CaptureCallback>
 800645c:	e005      	b.n	800646a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f9df 	bl	8006822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f9f0 	bl	800684a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b01      	cmp	r3, #1
 800647c:	d10e      	bne.n	800649c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b01      	cmp	r3, #1
 800648a:	d107      	bne.n	800649c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f06f 0201 	mvn.w	r2, #1
 8006494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fb f9c0 	bl	800181c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a6:	2b80      	cmp	r3, #128	; 0x80
 80064a8:	d10e      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b4:	2b80      	cmp	r3, #128	; 0x80
 80064b6:	d107      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fdbe 	bl	8007044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d2:	2b40      	cmp	r3, #64	; 0x40
 80064d4:	d10e      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e0:	2b40      	cmp	r3, #64	; 0x40
 80064e2:	d107      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f9b5 	bl	800685e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b20      	cmp	r3, #32
 8006500:	d10e      	bne.n	8006520 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b20      	cmp	r3, #32
 800650e:	d107      	bne.n	8006520 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f06f 0220 	mvn.w	r2, #32
 8006518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fd88 	bl	8007030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006520:	bf00      	nop
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800653e:	2302      	movs	r3, #2
 8006540:	e0b4      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x184>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2202      	movs	r2, #2
 800654e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b0c      	cmp	r3, #12
 8006556:	f200 809f 	bhi.w	8006698 <HAL_TIM_PWM_ConfigChannel+0x170>
 800655a:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006595 	.word	0x08006595
 8006564:	08006699 	.word	0x08006699
 8006568:	08006699 	.word	0x08006699
 800656c:	08006699 	.word	0x08006699
 8006570:	080065d5 	.word	0x080065d5
 8006574:	08006699 	.word	0x08006699
 8006578:	08006699 	.word	0x08006699
 800657c:	08006699 	.word	0x08006699
 8006580:	08006617 	.word	0x08006617
 8006584:	08006699 	.word	0x08006699
 8006588:	08006699 	.word	0x08006699
 800658c:	08006699 	.word	0x08006699
 8006590:	08006657 	.word	0x08006657
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68b9      	ldr	r1, [r7, #8]
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fa0a 	bl	80069b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699a      	ldr	r2, [r3, #24]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0208 	orr.w	r2, r2, #8
 80065ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0204 	bic.w	r2, r2, #4
 80065be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6999      	ldr	r1, [r3, #24]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	691a      	ldr	r2, [r3, #16]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	619a      	str	r2, [r3, #24]
      break;
 80065d2:	e062      	b.n	800669a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68b9      	ldr	r1, [r7, #8]
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fa5a 	bl	8006a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699a      	ldr	r2, [r3, #24]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699a      	ldr	r2, [r3, #24]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6999      	ldr	r1, [r3, #24]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	021a      	lsls	r2, r3, #8
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	619a      	str	r2, [r3, #24]
      break;
 8006614:	e041      	b.n	800669a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68b9      	ldr	r1, [r7, #8]
 800661c:	4618      	mov	r0, r3
 800661e:	f000 faaf 	bl	8006b80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69da      	ldr	r2, [r3, #28]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0208 	orr.w	r2, r2, #8
 8006630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69da      	ldr	r2, [r3, #28]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0204 	bic.w	r2, r2, #4
 8006640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69d9      	ldr	r1, [r3, #28]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	61da      	str	r2, [r3, #28]
      break;
 8006654:	e021      	b.n	800669a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68b9      	ldr	r1, [r7, #8]
 800665c:	4618      	mov	r0, r3
 800665e:	f000 fb03 	bl	8006c68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69da      	ldr	r2, [r3, #28]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69da      	ldr	r2, [r3, #28]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69d9      	ldr	r1, [r3, #28]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	021a      	lsls	r2, r3, #8
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	61da      	str	r2, [r3, #28]
      break;
 8006696:	e000      	b.n	800669a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006698:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d101      	bne.n	80066cc <HAL_TIM_ConfigClockSource+0x18>
 80066c8:	2302      	movs	r3, #2
 80066ca:	e0a6      	b.n	800681a <HAL_TIM_ConfigClockSource+0x166>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2202      	movs	r2, #2
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b40      	cmp	r3, #64	; 0x40
 8006702:	d067      	beq.n	80067d4 <HAL_TIM_ConfigClockSource+0x120>
 8006704:	2b40      	cmp	r3, #64	; 0x40
 8006706:	d80b      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x6c>
 8006708:	2b10      	cmp	r3, #16
 800670a:	d073      	beq.n	80067f4 <HAL_TIM_ConfigClockSource+0x140>
 800670c:	2b10      	cmp	r3, #16
 800670e:	d802      	bhi.n	8006716 <HAL_TIM_ConfigClockSource+0x62>
 8006710:	2b00      	cmp	r3, #0
 8006712:	d06f      	beq.n	80067f4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006714:	e078      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006716:	2b20      	cmp	r3, #32
 8006718:	d06c      	beq.n	80067f4 <HAL_TIM_ConfigClockSource+0x140>
 800671a:	2b30      	cmp	r3, #48	; 0x30
 800671c:	d06a      	beq.n	80067f4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800671e:	e073      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006720:	2b70      	cmp	r3, #112	; 0x70
 8006722:	d00d      	beq.n	8006740 <HAL_TIM_ConfigClockSource+0x8c>
 8006724:	2b70      	cmp	r3, #112	; 0x70
 8006726:	d804      	bhi.n	8006732 <HAL_TIM_ConfigClockSource+0x7e>
 8006728:	2b50      	cmp	r3, #80	; 0x50
 800672a:	d033      	beq.n	8006794 <HAL_TIM_ConfigClockSource+0xe0>
 800672c:	2b60      	cmp	r3, #96	; 0x60
 800672e:	d041      	beq.n	80067b4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006730:	e06a      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006736:	d066      	beq.n	8006806 <HAL_TIM_ConfigClockSource+0x152>
 8006738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800673c:	d017      	beq.n	800676e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800673e:	e063      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	6899      	ldr	r1, [r3, #8]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f000 fb5a 	bl	8006e08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006762:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	609a      	str	r2, [r3, #8]
      break;
 800676c:	e04c      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6818      	ldr	r0, [r3, #0]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	6899      	ldr	r1, [r3, #8]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f000 fb43 	bl	8006e08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006790:	609a      	str	r2, [r3, #8]
      break;
 8006792:	e039      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6818      	ldr	r0, [r3, #0]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	6859      	ldr	r1, [r3, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	461a      	mov	r2, r3
 80067a2:	f000 fab7 	bl	8006d14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2150      	movs	r1, #80	; 0x50
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fb10 	bl	8006dd2 <TIM_ITRx_SetConfig>
      break;
 80067b2:	e029      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6818      	ldr	r0, [r3, #0]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	6859      	ldr	r1, [r3, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	461a      	mov	r2, r3
 80067c2:	f000 fad6 	bl	8006d72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2160      	movs	r1, #96	; 0x60
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fb00 	bl	8006dd2 <TIM_ITRx_SetConfig>
      break;
 80067d2:	e019      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6818      	ldr	r0, [r3, #0]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	6859      	ldr	r1, [r3, #4]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	461a      	mov	r2, r3
 80067e2:	f000 fa97 	bl	8006d14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2140      	movs	r1, #64	; 0x40
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 faf0 	bl	8006dd2 <TIM_ITRx_SetConfig>
      break;
 80067f2:	e009      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4619      	mov	r1, r3
 80067fe:	4610      	mov	r0, r2
 8006800:	f000 fae7 	bl	8006dd2 <TIM_ITRx_SetConfig>
      break;
 8006804:	e000      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800682a:	bf00      	nop
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800683e:	bf00      	nop
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006852:	bf00      	nop
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
	...

08006874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a40      	ldr	r2, [pc, #256]	; (8006988 <TIM_Base_SetConfig+0x114>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d013      	beq.n	80068b4 <TIM_Base_SetConfig+0x40>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006892:	d00f      	beq.n	80068b4 <TIM_Base_SetConfig+0x40>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a3d      	ldr	r2, [pc, #244]	; (800698c <TIM_Base_SetConfig+0x118>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00b      	beq.n	80068b4 <TIM_Base_SetConfig+0x40>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a3c      	ldr	r2, [pc, #240]	; (8006990 <TIM_Base_SetConfig+0x11c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d007      	beq.n	80068b4 <TIM_Base_SetConfig+0x40>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a3b      	ldr	r2, [pc, #236]	; (8006994 <TIM_Base_SetConfig+0x120>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d003      	beq.n	80068b4 <TIM_Base_SetConfig+0x40>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a3a      	ldr	r2, [pc, #232]	; (8006998 <TIM_Base_SetConfig+0x124>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d108      	bne.n	80068c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a2f      	ldr	r2, [pc, #188]	; (8006988 <TIM_Base_SetConfig+0x114>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d02b      	beq.n	8006926 <TIM_Base_SetConfig+0xb2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d4:	d027      	beq.n	8006926 <TIM_Base_SetConfig+0xb2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a2c      	ldr	r2, [pc, #176]	; (800698c <TIM_Base_SetConfig+0x118>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d023      	beq.n	8006926 <TIM_Base_SetConfig+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a2b      	ldr	r2, [pc, #172]	; (8006990 <TIM_Base_SetConfig+0x11c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d01f      	beq.n	8006926 <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a2a      	ldr	r2, [pc, #168]	; (8006994 <TIM_Base_SetConfig+0x120>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d01b      	beq.n	8006926 <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a29      	ldr	r2, [pc, #164]	; (8006998 <TIM_Base_SetConfig+0x124>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d017      	beq.n	8006926 <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a28      	ldr	r2, [pc, #160]	; (800699c <TIM_Base_SetConfig+0x128>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d013      	beq.n	8006926 <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a27      	ldr	r2, [pc, #156]	; (80069a0 <TIM_Base_SetConfig+0x12c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00f      	beq.n	8006926 <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a26      	ldr	r2, [pc, #152]	; (80069a4 <TIM_Base_SetConfig+0x130>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00b      	beq.n	8006926 <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a25      	ldr	r2, [pc, #148]	; (80069a8 <TIM_Base_SetConfig+0x134>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d007      	beq.n	8006926 <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a24      	ldr	r2, [pc, #144]	; (80069ac <TIM_Base_SetConfig+0x138>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d003      	beq.n	8006926 <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a23      	ldr	r2, [pc, #140]	; (80069b0 <TIM_Base_SetConfig+0x13c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d108      	bne.n	8006938 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800692c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4313      	orrs	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a0a      	ldr	r2, [pc, #40]	; (8006988 <TIM_Base_SetConfig+0x114>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d003      	beq.n	800696c <TIM_Base_SetConfig+0xf8>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a0c      	ldr	r2, [pc, #48]	; (8006998 <TIM_Base_SetConfig+0x124>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d103      	bne.n	8006974 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	691a      	ldr	r2, [r3, #16]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	615a      	str	r2, [r3, #20]
}
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	40010000 	.word	0x40010000
 800698c:	40000400 	.word	0x40000400
 8006990:	40000800 	.word	0x40000800
 8006994:	40000c00 	.word	0x40000c00
 8006998:	40010400 	.word	0x40010400
 800699c:	40014000 	.word	0x40014000
 80069a0:	40014400 	.word	0x40014400
 80069a4:	40014800 	.word	0x40014800
 80069a8:	40001800 	.word	0x40001800
 80069ac:	40001c00 	.word	0x40001c00
 80069b0:	40002000 	.word	0x40002000

080069b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	f023 0201 	bic.w	r2, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0303 	bic.w	r3, r3, #3
 80069ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f023 0302 	bic.w	r3, r3, #2
 80069fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a20      	ldr	r2, [pc, #128]	; (8006a8c <TIM_OC1_SetConfig+0xd8>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d003      	beq.n	8006a18 <TIM_OC1_SetConfig+0x64>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a1f      	ldr	r2, [pc, #124]	; (8006a90 <TIM_OC1_SetConfig+0xdc>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d10c      	bne.n	8006a32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f023 0308 	bic.w	r3, r3, #8
 8006a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f023 0304 	bic.w	r3, r3, #4
 8006a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a15      	ldr	r2, [pc, #84]	; (8006a8c <TIM_OC1_SetConfig+0xd8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d003      	beq.n	8006a42 <TIM_OC1_SetConfig+0x8e>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a14      	ldr	r2, [pc, #80]	; (8006a90 <TIM_OC1_SetConfig+0xdc>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d111      	bne.n	8006a66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	621a      	str	r2, [r3, #32]
}
 8006a80:	bf00      	nop
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	40010000 	.word	0x40010000
 8006a90:	40010400 	.word	0x40010400

08006a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f023 0210 	bic.w	r2, r3, #16
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	021b      	lsls	r3, r3, #8
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	f023 0320 	bic.w	r3, r3, #32
 8006ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	011b      	lsls	r3, r3, #4
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a22      	ldr	r2, [pc, #136]	; (8006b78 <TIM_OC2_SetConfig+0xe4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d003      	beq.n	8006afc <TIM_OC2_SetConfig+0x68>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a21      	ldr	r2, [pc, #132]	; (8006b7c <TIM_OC2_SetConfig+0xe8>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d10d      	bne.n	8006b18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	011b      	lsls	r3, r3, #4
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a17      	ldr	r2, [pc, #92]	; (8006b78 <TIM_OC2_SetConfig+0xe4>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d003      	beq.n	8006b28 <TIM_OC2_SetConfig+0x94>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a16      	ldr	r2, [pc, #88]	; (8006b7c <TIM_OC2_SetConfig+0xe8>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d113      	bne.n	8006b50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	621a      	str	r2, [r3, #32]
}
 8006b6a:	bf00      	nop
 8006b6c:	371c      	adds	r7, #28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	40010000 	.word	0x40010000
 8006b7c:	40010400 	.word	0x40010400

08006b80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0303 	bic.w	r3, r3, #3
 8006bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	021b      	lsls	r3, r3, #8
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a21      	ldr	r2, [pc, #132]	; (8006c60 <TIM_OC3_SetConfig+0xe0>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d003      	beq.n	8006be6 <TIM_OC3_SetConfig+0x66>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a20      	ldr	r2, [pc, #128]	; (8006c64 <TIM_OC3_SetConfig+0xe4>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d10d      	bne.n	8006c02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	021b      	lsls	r3, r3, #8
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a16      	ldr	r2, [pc, #88]	; (8006c60 <TIM_OC3_SetConfig+0xe0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d003      	beq.n	8006c12 <TIM_OC3_SetConfig+0x92>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a15      	ldr	r2, [pc, #84]	; (8006c64 <TIM_OC3_SetConfig+0xe4>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d113      	bne.n	8006c3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	011b      	lsls	r3, r3, #4
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	621a      	str	r2, [r3, #32]
}
 8006c54:	bf00      	nop
 8006c56:	371c      	adds	r7, #28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40010400 	.word	0x40010400

08006c68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	021b      	lsls	r3, r3, #8
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	031b      	lsls	r3, r3, #12
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a12      	ldr	r2, [pc, #72]	; (8006d0c <TIM_OC4_SetConfig+0xa4>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d003      	beq.n	8006cd0 <TIM_OC4_SetConfig+0x68>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a11      	ldr	r2, [pc, #68]	; (8006d10 <TIM_OC4_SetConfig+0xa8>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d109      	bne.n	8006ce4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	019b      	lsls	r3, r3, #6
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	621a      	str	r2, [r3, #32]
}
 8006cfe:	bf00      	nop
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40010000 	.word	0x40010000
 8006d10:	40010400 	.word	0x40010400

08006d14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	f023 0201 	bic.w	r2, r3, #1
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	011b      	lsls	r3, r3, #4
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f023 030a 	bic.w	r3, r3, #10
 8006d50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	621a      	str	r2, [r3, #32]
}
 8006d66:	bf00      	nop
 8006d68:	371c      	adds	r7, #28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b087      	sub	sp, #28
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	f023 0210 	bic.w	r2, r3, #16
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	031b      	lsls	r3, r3, #12
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	621a      	str	r2, [r3, #32]
}
 8006dc6:	bf00      	nop
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b085      	sub	sp, #20
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	f043 0307 	orr.w	r3, r3, #7
 8006df4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	609a      	str	r2, [r3, #8]
}
 8006dfc:	bf00      	nop
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	021a      	lsls	r2, r3, #8
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	609a      	str	r2, [r3, #8]
}
 8006e3c:	bf00      	nop
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f003 031f 	and.w	r3, r3, #31
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6a1a      	ldr	r2, [r3, #32]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	43db      	mvns	r3, r3
 8006e6a:	401a      	ands	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a1a      	ldr	r2, [r3, #32]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	f003 031f 	and.w	r3, r3, #31
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e80:	431a      	orrs	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	621a      	str	r2, [r3, #32]
}
 8006e86:	bf00      	nop
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d101      	bne.n	8006eac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e05a      	b.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a21      	ldr	r2, [pc, #132]	; (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d022      	beq.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef8:	d01d      	beq.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a1d      	ldr	r2, [pc, #116]	; (8006f74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d018      	beq.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a1b      	ldr	r2, [pc, #108]	; (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d013      	beq.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a1a      	ldr	r2, [pc, #104]	; (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00e      	beq.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a18      	ldr	r2, [pc, #96]	; (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d009      	beq.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a17      	ldr	r2, [pc, #92]	; (8006f84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d004      	beq.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a15      	ldr	r2, [pc, #84]	; (8006f88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d10c      	bne.n	8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	40010000 	.word	0x40010000
 8006f74:	40000400 	.word	0x40000400
 8006f78:	40000800 	.word	0x40000800
 8006f7c:	40000c00 	.word	0x40000c00
 8006f80:	40010400 	.word	0x40010400
 8006f84:	40014000 	.word	0x40014000
 8006f88:	40001800 	.word	0x40001800

08006f8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d101      	bne.n	8006fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e03d      	b.n	8007024 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e03f      	b.n	80070ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d106      	bne.n	8007084 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7fc fdec 	bl	8003c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2224      	movs	r2, #36	; 0x24
 8007088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800709a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fb97 	bl	80077d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	691a      	ldr	r2, [r3, #16]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	695a      	ldr	r2, [r3, #20]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68da      	ldr	r2, [r3, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2220      	movs	r2, #32
 80070dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b088      	sub	sp, #32
 80070f6:	af02      	add	r7, sp, #8
 80070f8:	60f8      	str	r0, [r7, #12]
 80070fa:	60b9      	str	r1, [r7, #8]
 80070fc:	603b      	str	r3, [r7, #0]
 80070fe:	4613      	mov	r3, r2
 8007100:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b20      	cmp	r3, #32
 8007110:	f040 8083 	bne.w	800721a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d002      	beq.n	8007120 <HAL_UART_Transmit+0x2e>
 800711a:	88fb      	ldrh	r3, [r7, #6]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e07b      	b.n	800721c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800712a:	2b01      	cmp	r3, #1
 800712c:	d101      	bne.n	8007132 <HAL_UART_Transmit+0x40>
 800712e:	2302      	movs	r3, #2
 8007130:	e074      	b.n	800721c <HAL_UART_Transmit+0x12a>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2221      	movs	r2, #33	; 0x21
 8007144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007148:	f7fc ff68 	bl	800401c <HAL_GetTick>
 800714c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	88fa      	ldrh	r2, [r7, #6]
 8007152:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	88fa      	ldrh	r2, [r7, #6]
 8007158:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007162:	e042      	b.n	80071ea <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007168:	b29b      	uxth	r3, r3
 800716a:	3b01      	subs	r3, #1
 800716c:	b29a      	uxth	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800717a:	d122      	bne.n	80071c2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2200      	movs	r2, #0
 8007184:	2180      	movs	r1, #128	; 0x80
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 f9b6 	bl	80074f8 <UART_WaitOnFlagUntilTimeout>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e042      	b.n	800721c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071a8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d103      	bne.n	80071ba <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	3302      	adds	r3, #2
 80071b6:	60bb      	str	r3, [r7, #8]
 80071b8:	e017      	b.n	80071ea <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	3301      	adds	r3, #1
 80071be:	60bb      	str	r3, [r7, #8]
 80071c0:	e013      	b.n	80071ea <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2200      	movs	r2, #0
 80071ca:	2180      	movs	r1, #128	; 0x80
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 f993 	bl	80074f8 <UART_WaitOnFlagUntilTimeout>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e01f      	b.n	800721c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	1c5a      	adds	r2, r3, #1
 80071e0:	60ba      	str	r2, [r7, #8]
 80071e2:	781a      	ldrb	r2, [r3, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1b7      	bne.n	8007164 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2200      	movs	r2, #0
 80071fc:	2140      	movs	r1, #64	; 0x40
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 f97a 	bl	80074f8 <UART_WaitOnFlagUntilTimeout>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e006      	b.n	800721c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2220      	movs	r2, #32
 8007212:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	e000      	b.n	800721c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800721a:	2302      	movs	r3, #2
  }
}
 800721c:	4618      	mov	r0, r3
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	4613      	mov	r3, r2
 8007230:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b20      	cmp	r3, #32
 800723c:	d140      	bne.n	80072c0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d002      	beq.n	800724a <HAL_UART_Receive_IT+0x26>
 8007244:	88fb      	ldrh	r3, [r7, #6]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e039      	b.n	80072c2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <HAL_UART_Receive_IT+0x38>
 8007258:	2302      	movs	r3, #2
 800725a:	e032      	b.n	80072c2 <HAL_UART_Receive_IT+0x9e>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	88fa      	ldrh	r2, [r7, #6]
 800726e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	88fa      	ldrh	r2, [r7, #6]
 8007274:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2222      	movs	r2, #34	; 0x22
 8007280:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800729a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	695a      	ldr	r2, [r3, #20]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0201 	orr.w	r2, r2, #1
 80072aa:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0220 	orr.w	r2, r2, #32
 80072ba:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80072bc:	2300      	movs	r3, #0
 80072be:	e000      	b.n	80072c2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80072c0:	2302      	movs	r3, #2
  }
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
	...

080072d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	f003 030f 	and.w	r3, r3, #15
 80072fe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10d      	bne.n	8007322 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	2b00      	cmp	r3, #0
 800730e:	d008      	beq.n	8007322 <HAL_UART_IRQHandler+0x52>
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f9d6 	bl	80076cc <UART_Receive_IT>
      return;
 8007320:	e0d1      	b.n	80074c6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 80b0 	beq.w	800748a <HAL_UART_IRQHandler+0x1ba>
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d105      	bne.n	8007340 <HAL_UART_IRQHandler+0x70>
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 80a5 	beq.w	800748a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <HAL_UART_IRQHandler+0x90>
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007358:	f043 0201 	orr.w	r2, r3, #1
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	f003 0304 	and.w	r3, r3, #4
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00a      	beq.n	8007380 <HAL_UART_IRQHandler+0xb0>
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	d005      	beq.n	8007380 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007378:	f043 0202 	orr.w	r2, r3, #2
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	f003 0302 	and.w	r3, r3, #2
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <HAL_UART_IRQHandler+0xd0>
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	d005      	beq.n	80073a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007398:	f043 0204 	orr.w	r2, r3, #4
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00f      	beq.n	80073ca <HAL_UART_IRQHandler+0xfa>
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d104      	bne.n	80073be <HAL_UART_IRQHandler+0xee>
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d005      	beq.n	80073ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c2:	f043 0208 	orr.w	r2, r3, #8
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d078      	beq.n	80074c4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	f003 0320 	and.w	r3, r3, #32
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d007      	beq.n	80073ec <HAL_UART_IRQHandler+0x11c>
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	f003 0320 	and.w	r3, r3, #32
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f970 	bl	80076cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f6:	2b40      	cmp	r3, #64	; 0x40
 80073f8:	bf0c      	ite	eq
 80073fa:	2301      	moveq	r3, #1
 80073fc:	2300      	movne	r3, #0
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007406:	f003 0308 	and.w	r3, r3, #8
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <HAL_UART_IRQHandler+0x144>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d031      	beq.n	8007478 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f8b9 	bl	800758c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007424:	2b40      	cmp	r3, #64	; 0x40
 8007426:	d123      	bne.n	8007470 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	695a      	ldr	r2, [r3, #20]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007436:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743c:	2b00      	cmp	r3, #0
 800743e:	d013      	beq.n	8007468 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007444:	4a21      	ldr	r2, [pc, #132]	; (80074cc <HAL_UART_IRQHandler+0x1fc>)
 8007446:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744c:	4618      	mov	r0, r3
 800744e:	f7fc ff40 	bl	80042d2 <HAL_DMA_Abort_IT>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d016      	beq.n	8007486 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007462:	4610      	mov	r0, r2
 8007464:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007466:	e00e      	b.n	8007486 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f83b 	bl	80074e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800746e:	e00a      	b.n	8007486 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f837 	bl	80074e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007476:	e006      	b.n	8007486 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f833 	bl	80074e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007484:	e01e      	b.n	80074c4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007486:	bf00      	nop
    return;
 8007488:	e01c      	b.n	80074c4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007490:	2b00      	cmp	r3, #0
 8007492:	d008      	beq.n	80074a6 <HAL_UART_IRQHandler+0x1d6>
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f8a6 	bl	80075f0 <UART_Transmit_IT>
    return;
 80074a4:	e00f      	b.n	80074c6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <HAL_UART_IRQHandler+0x1f6>
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d005      	beq.n	80074c6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f8ee 	bl	800769c <UART_EndTransmit_IT>
    return;
 80074c0:	bf00      	nop
 80074c2:	e000      	b.n	80074c6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80074c4:	bf00      	nop
  }
}
 80074c6:	3720      	adds	r7, #32
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	080075c9 	.word	0x080075c9

080074d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	4613      	mov	r3, r2
 8007506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007508:	e02c      	b.n	8007564 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007510:	d028      	beq.n	8007564 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d007      	beq.n	8007528 <UART_WaitOnFlagUntilTimeout+0x30>
 8007518:	f7fc fd80 	bl	800401c <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	429a      	cmp	r2, r3
 8007526:	d21d      	bcs.n	8007564 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68da      	ldr	r2, [r3, #12]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007536:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	695a      	ldr	r2, [r3, #20]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0201 	bic.w	r2, r2, #1
 8007546:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2220      	movs	r2, #32
 800754c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2220      	movs	r2, #32
 8007554:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e00f      	b.n	8007584 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	4013      	ands	r3, r2
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	429a      	cmp	r2, r3
 8007572:	bf0c      	ite	eq
 8007574:	2301      	moveq	r3, #1
 8007576:	2300      	movne	r3, #0
 8007578:	b2db      	uxtb	r3, r3
 800757a:	461a      	mov	r2, r3
 800757c:	79fb      	ldrb	r3, [r7, #7]
 800757e:	429a      	cmp	r2, r3
 8007580:	d0c3      	beq.n	800750a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80075a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695a      	ldr	r2, [r3, #20]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0201 	bic.w	r2, r2, #1
 80075b2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff ff7e 	bl	80074e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075e8:	bf00      	nop
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b21      	cmp	r3, #33	; 0x21
 8007602:	d144      	bne.n	800768e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800760c:	d11a      	bne.n	8007644 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007622:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d105      	bne.n	8007638 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a1b      	ldr	r3, [r3, #32]
 8007630:	1c9a      	adds	r2, r3, #2
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	621a      	str	r2, [r3, #32]
 8007636:	e00e      	b.n	8007656 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a1b      	ldr	r3, [r3, #32]
 800763c:	1c5a      	adds	r2, r3, #1
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	621a      	str	r2, [r3, #32]
 8007642:	e008      	b.n	8007656 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	1c59      	adds	r1, r3, #1
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	6211      	str	r1, [r2, #32]
 800764e:	781a      	ldrb	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b29b      	uxth	r3, r3
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	4619      	mov	r1, r3
 8007664:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10f      	bne.n	800768a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68da      	ldr	r2, [r3, #12]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007678:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007688:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	e000      	b.n	8007690 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800768e:	2302      	movs	r3, #2
  }
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7ff ff07 	bl	80074d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b22      	cmp	r3, #34	; 0x22
 80076de:	d171      	bne.n	80077c4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e8:	d123      	bne.n	8007732 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ee:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10e      	bne.n	8007716 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007704:	b29a      	uxth	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770e:	1c9a      	adds	r2, r3, #2
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	629a      	str	r2, [r3, #40]	; 0x28
 8007714:	e029      	b.n	800776a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	b29b      	uxth	r3, r3
 800771e:	b2db      	uxtb	r3, r3
 8007720:	b29a      	uxth	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	629a      	str	r2, [r3, #40]	; 0x28
 8007730:	e01b      	b.n	800776a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10a      	bne.n	8007750 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6858      	ldr	r0, [r3, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007744:	1c59      	adds	r1, r3, #1
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	6291      	str	r1, [r2, #40]	; 0x28
 800774a:	b2c2      	uxtb	r2, r0
 800774c:	701a      	strb	r2, [r3, #0]
 800774e:	e00c      	b.n	800776a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	b2da      	uxtb	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775c:	1c58      	adds	r0, r3, #1
 800775e:	6879      	ldr	r1, [r7, #4]
 8007760:	6288      	str	r0, [r1, #40]	; 0x28
 8007762:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007766:	b2d2      	uxtb	r2, r2
 8007768:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29b      	uxth	r3, r3
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	4619      	mov	r1, r3
 8007778:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800777a:	2b00      	cmp	r3, #0
 800777c:	d120      	bne.n	80077c0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0220 	bic.w	r2, r2, #32
 800778c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800779c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	695a      	ldr	r2, [r3, #20]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 0201 	bic.w	r2, r2, #1
 80077ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7f9 ffa6 	bl	8001708 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	e002      	b.n	80077c6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	e000      	b.n	80077c6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80077c4:	2302      	movs	r3, #2
  }
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	b085      	sub	sp, #20
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68da      	ldr	r2, [r3, #12]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689a      	ldr	r2, [r3, #8]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	431a      	orrs	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	431a      	orrs	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	69db      	ldr	r3, [r3, #28]
 8007804:	4313      	orrs	r3, r2
 8007806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007812:	f023 030c 	bic.w	r3, r3, #12
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6812      	ldr	r2, [r2, #0]
 800781a:	68f9      	ldr	r1, [r7, #12]
 800781c:	430b      	orrs	r3, r1
 800781e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	699a      	ldr	r2, [r3, #24]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800783e:	f040 818b 	bne.w	8007b58 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4ac1      	ldr	r2, [pc, #772]	; (8007b4c <UART_SetConfig+0x37c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d005      	beq.n	8007858 <UART_SetConfig+0x88>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4abf      	ldr	r2, [pc, #764]	; (8007b50 <UART_SetConfig+0x380>)
 8007852:	4293      	cmp	r3, r2
 8007854:	f040 80bd 	bne.w	80079d2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007858:	f7fe fc0a 	bl	8006070 <HAL_RCC_GetPCLK2Freq>
 800785c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	461d      	mov	r5, r3
 8007862:	f04f 0600 	mov.w	r6, #0
 8007866:	46a8      	mov	r8, r5
 8007868:	46b1      	mov	r9, r6
 800786a:	eb18 0308 	adds.w	r3, r8, r8
 800786e:	eb49 0409 	adc.w	r4, r9, r9
 8007872:	4698      	mov	r8, r3
 8007874:	46a1      	mov	r9, r4
 8007876:	eb18 0805 	adds.w	r8, r8, r5
 800787a:	eb49 0906 	adc.w	r9, r9, r6
 800787e:	f04f 0100 	mov.w	r1, #0
 8007882:	f04f 0200 	mov.w	r2, #0
 8007886:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800788a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800788e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007892:	4688      	mov	r8, r1
 8007894:	4691      	mov	r9, r2
 8007896:	eb18 0005 	adds.w	r0, r8, r5
 800789a:	eb49 0106 	adc.w	r1, r9, r6
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	461d      	mov	r5, r3
 80078a4:	f04f 0600 	mov.w	r6, #0
 80078a8:	196b      	adds	r3, r5, r5
 80078aa:	eb46 0406 	adc.w	r4, r6, r6
 80078ae:	461a      	mov	r2, r3
 80078b0:	4623      	mov	r3, r4
 80078b2:	f7f9 f999 	bl	8000be8 <__aeabi_uldivmod>
 80078b6:	4603      	mov	r3, r0
 80078b8:	460c      	mov	r4, r1
 80078ba:	461a      	mov	r2, r3
 80078bc:	4ba5      	ldr	r3, [pc, #660]	; (8007b54 <UART_SetConfig+0x384>)
 80078be:	fba3 2302 	umull	r2, r3, r3, r2
 80078c2:	095b      	lsrs	r3, r3, #5
 80078c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	461d      	mov	r5, r3
 80078cc:	f04f 0600 	mov.w	r6, #0
 80078d0:	46a9      	mov	r9, r5
 80078d2:	46b2      	mov	sl, r6
 80078d4:	eb19 0309 	adds.w	r3, r9, r9
 80078d8:	eb4a 040a 	adc.w	r4, sl, sl
 80078dc:	4699      	mov	r9, r3
 80078de:	46a2      	mov	sl, r4
 80078e0:	eb19 0905 	adds.w	r9, r9, r5
 80078e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80078e8:	f04f 0100 	mov.w	r1, #0
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078fc:	4689      	mov	r9, r1
 80078fe:	4692      	mov	sl, r2
 8007900:	eb19 0005 	adds.w	r0, r9, r5
 8007904:	eb4a 0106 	adc.w	r1, sl, r6
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	461d      	mov	r5, r3
 800790e:	f04f 0600 	mov.w	r6, #0
 8007912:	196b      	adds	r3, r5, r5
 8007914:	eb46 0406 	adc.w	r4, r6, r6
 8007918:	461a      	mov	r2, r3
 800791a:	4623      	mov	r3, r4
 800791c:	f7f9 f964 	bl	8000be8 <__aeabi_uldivmod>
 8007920:	4603      	mov	r3, r0
 8007922:	460c      	mov	r4, r1
 8007924:	461a      	mov	r2, r3
 8007926:	4b8b      	ldr	r3, [pc, #556]	; (8007b54 <UART_SetConfig+0x384>)
 8007928:	fba3 1302 	umull	r1, r3, r3, r2
 800792c:	095b      	lsrs	r3, r3, #5
 800792e:	2164      	movs	r1, #100	; 0x64
 8007930:	fb01 f303 	mul.w	r3, r1, r3
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	3332      	adds	r3, #50	; 0x32
 800793a:	4a86      	ldr	r2, [pc, #536]	; (8007b54 <UART_SetConfig+0x384>)
 800793c:	fba2 2303 	umull	r2, r3, r2, r3
 8007940:	095b      	lsrs	r3, r3, #5
 8007942:	005b      	lsls	r3, r3, #1
 8007944:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007948:	4498      	add	r8, r3
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	461d      	mov	r5, r3
 800794e:	f04f 0600 	mov.w	r6, #0
 8007952:	46a9      	mov	r9, r5
 8007954:	46b2      	mov	sl, r6
 8007956:	eb19 0309 	adds.w	r3, r9, r9
 800795a:	eb4a 040a 	adc.w	r4, sl, sl
 800795e:	4699      	mov	r9, r3
 8007960:	46a2      	mov	sl, r4
 8007962:	eb19 0905 	adds.w	r9, r9, r5
 8007966:	eb4a 0a06 	adc.w	sl, sl, r6
 800796a:	f04f 0100 	mov.w	r1, #0
 800796e:	f04f 0200 	mov.w	r2, #0
 8007972:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007976:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800797a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800797e:	4689      	mov	r9, r1
 8007980:	4692      	mov	sl, r2
 8007982:	eb19 0005 	adds.w	r0, r9, r5
 8007986:	eb4a 0106 	adc.w	r1, sl, r6
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	461d      	mov	r5, r3
 8007990:	f04f 0600 	mov.w	r6, #0
 8007994:	196b      	adds	r3, r5, r5
 8007996:	eb46 0406 	adc.w	r4, r6, r6
 800799a:	461a      	mov	r2, r3
 800799c:	4623      	mov	r3, r4
 800799e:	f7f9 f923 	bl	8000be8 <__aeabi_uldivmod>
 80079a2:	4603      	mov	r3, r0
 80079a4:	460c      	mov	r4, r1
 80079a6:	461a      	mov	r2, r3
 80079a8:	4b6a      	ldr	r3, [pc, #424]	; (8007b54 <UART_SetConfig+0x384>)
 80079aa:	fba3 1302 	umull	r1, r3, r3, r2
 80079ae:	095b      	lsrs	r3, r3, #5
 80079b0:	2164      	movs	r1, #100	; 0x64
 80079b2:	fb01 f303 	mul.w	r3, r1, r3
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	00db      	lsls	r3, r3, #3
 80079ba:	3332      	adds	r3, #50	; 0x32
 80079bc:	4a65      	ldr	r2, [pc, #404]	; (8007b54 <UART_SetConfig+0x384>)
 80079be:	fba2 2303 	umull	r2, r3, r2, r3
 80079c2:	095b      	lsrs	r3, r3, #5
 80079c4:	f003 0207 	and.w	r2, r3, #7
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4442      	add	r2, r8
 80079ce:	609a      	str	r2, [r3, #8]
 80079d0:	e26f      	b.n	8007eb2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079d2:	f7fe fb39 	bl	8006048 <HAL_RCC_GetPCLK1Freq>
 80079d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	461d      	mov	r5, r3
 80079dc:	f04f 0600 	mov.w	r6, #0
 80079e0:	46a8      	mov	r8, r5
 80079e2:	46b1      	mov	r9, r6
 80079e4:	eb18 0308 	adds.w	r3, r8, r8
 80079e8:	eb49 0409 	adc.w	r4, r9, r9
 80079ec:	4698      	mov	r8, r3
 80079ee:	46a1      	mov	r9, r4
 80079f0:	eb18 0805 	adds.w	r8, r8, r5
 80079f4:	eb49 0906 	adc.w	r9, r9, r6
 80079f8:	f04f 0100 	mov.w	r1, #0
 80079fc:	f04f 0200 	mov.w	r2, #0
 8007a00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a0c:	4688      	mov	r8, r1
 8007a0e:	4691      	mov	r9, r2
 8007a10:	eb18 0005 	adds.w	r0, r8, r5
 8007a14:	eb49 0106 	adc.w	r1, r9, r6
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	461d      	mov	r5, r3
 8007a1e:	f04f 0600 	mov.w	r6, #0
 8007a22:	196b      	adds	r3, r5, r5
 8007a24:	eb46 0406 	adc.w	r4, r6, r6
 8007a28:	461a      	mov	r2, r3
 8007a2a:	4623      	mov	r3, r4
 8007a2c:	f7f9 f8dc 	bl	8000be8 <__aeabi_uldivmod>
 8007a30:	4603      	mov	r3, r0
 8007a32:	460c      	mov	r4, r1
 8007a34:	461a      	mov	r2, r3
 8007a36:	4b47      	ldr	r3, [pc, #284]	; (8007b54 <UART_SetConfig+0x384>)
 8007a38:	fba3 2302 	umull	r2, r3, r3, r2
 8007a3c:	095b      	lsrs	r3, r3, #5
 8007a3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	461d      	mov	r5, r3
 8007a46:	f04f 0600 	mov.w	r6, #0
 8007a4a:	46a9      	mov	r9, r5
 8007a4c:	46b2      	mov	sl, r6
 8007a4e:	eb19 0309 	adds.w	r3, r9, r9
 8007a52:	eb4a 040a 	adc.w	r4, sl, sl
 8007a56:	4699      	mov	r9, r3
 8007a58:	46a2      	mov	sl, r4
 8007a5a:	eb19 0905 	adds.w	r9, r9, r5
 8007a5e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a62:	f04f 0100 	mov.w	r1, #0
 8007a66:	f04f 0200 	mov.w	r2, #0
 8007a6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a76:	4689      	mov	r9, r1
 8007a78:	4692      	mov	sl, r2
 8007a7a:	eb19 0005 	adds.w	r0, r9, r5
 8007a7e:	eb4a 0106 	adc.w	r1, sl, r6
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	461d      	mov	r5, r3
 8007a88:	f04f 0600 	mov.w	r6, #0
 8007a8c:	196b      	adds	r3, r5, r5
 8007a8e:	eb46 0406 	adc.w	r4, r6, r6
 8007a92:	461a      	mov	r2, r3
 8007a94:	4623      	mov	r3, r4
 8007a96:	f7f9 f8a7 	bl	8000be8 <__aeabi_uldivmod>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	4b2c      	ldr	r3, [pc, #176]	; (8007b54 <UART_SetConfig+0x384>)
 8007aa2:	fba3 1302 	umull	r1, r3, r3, r2
 8007aa6:	095b      	lsrs	r3, r3, #5
 8007aa8:	2164      	movs	r1, #100	; 0x64
 8007aaa:	fb01 f303 	mul.w	r3, r1, r3
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	00db      	lsls	r3, r3, #3
 8007ab2:	3332      	adds	r3, #50	; 0x32
 8007ab4:	4a27      	ldr	r2, [pc, #156]	; (8007b54 <UART_SetConfig+0x384>)
 8007ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aba:	095b      	lsrs	r3, r3, #5
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ac2:	4498      	add	r8, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	461d      	mov	r5, r3
 8007ac8:	f04f 0600 	mov.w	r6, #0
 8007acc:	46a9      	mov	r9, r5
 8007ace:	46b2      	mov	sl, r6
 8007ad0:	eb19 0309 	adds.w	r3, r9, r9
 8007ad4:	eb4a 040a 	adc.w	r4, sl, sl
 8007ad8:	4699      	mov	r9, r3
 8007ada:	46a2      	mov	sl, r4
 8007adc:	eb19 0905 	adds.w	r9, r9, r5
 8007ae0:	eb4a 0a06 	adc.w	sl, sl, r6
 8007ae4:	f04f 0100 	mov.w	r1, #0
 8007ae8:	f04f 0200 	mov.w	r2, #0
 8007aec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007af0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007af4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007af8:	4689      	mov	r9, r1
 8007afa:	4692      	mov	sl, r2
 8007afc:	eb19 0005 	adds.w	r0, r9, r5
 8007b00:	eb4a 0106 	adc.w	r1, sl, r6
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	461d      	mov	r5, r3
 8007b0a:	f04f 0600 	mov.w	r6, #0
 8007b0e:	196b      	adds	r3, r5, r5
 8007b10:	eb46 0406 	adc.w	r4, r6, r6
 8007b14:	461a      	mov	r2, r3
 8007b16:	4623      	mov	r3, r4
 8007b18:	f7f9 f866 	bl	8000be8 <__aeabi_uldivmod>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	460c      	mov	r4, r1
 8007b20:	461a      	mov	r2, r3
 8007b22:	4b0c      	ldr	r3, [pc, #48]	; (8007b54 <UART_SetConfig+0x384>)
 8007b24:	fba3 1302 	umull	r1, r3, r3, r2
 8007b28:	095b      	lsrs	r3, r3, #5
 8007b2a:	2164      	movs	r1, #100	; 0x64
 8007b2c:	fb01 f303 	mul.w	r3, r1, r3
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	00db      	lsls	r3, r3, #3
 8007b34:	3332      	adds	r3, #50	; 0x32
 8007b36:	4a07      	ldr	r2, [pc, #28]	; (8007b54 <UART_SetConfig+0x384>)
 8007b38:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3c:	095b      	lsrs	r3, r3, #5
 8007b3e:	f003 0207 	and.w	r2, r3, #7
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4442      	add	r2, r8
 8007b48:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007b4a:	e1b2      	b.n	8007eb2 <UART_SetConfig+0x6e2>
 8007b4c:	40011000 	.word	0x40011000
 8007b50:	40011400 	.word	0x40011400
 8007b54:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4ad7      	ldr	r2, [pc, #860]	; (8007ebc <UART_SetConfig+0x6ec>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d005      	beq.n	8007b6e <UART_SetConfig+0x39e>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4ad6      	ldr	r2, [pc, #856]	; (8007ec0 <UART_SetConfig+0x6f0>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	f040 80d1 	bne.w	8007d10 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b6e:	f7fe fa7f 	bl	8006070 <HAL_RCC_GetPCLK2Freq>
 8007b72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	469a      	mov	sl, r3
 8007b78:	f04f 0b00 	mov.w	fp, #0
 8007b7c:	46d0      	mov	r8, sl
 8007b7e:	46d9      	mov	r9, fp
 8007b80:	eb18 0308 	adds.w	r3, r8, r8
 8007b84:	eb49 0409 	adc.w	r4, r9, r9
 8007b88:	4698      	mov	r8, r3
 8007b8a:	46a1      	mov	r9, r4
 8007b8c:	eb18 080a 	adds.w	r8, r8, sl
 8007b90:	eb49 090b 	adc.w	r9, r9, fp
 8007b94:	f04f 0100 	mov.w	r1, #0
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ba0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ba4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ba8:	4688      	mov	r8, r1
 8007baa:	4691      	mov	r9, r2
 8007bac:	eb1a 0508 	adds.w	r5, sl, r8
 8007bb0:	eb4b 0609 	adc.w	r6, fp, r9
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	f04f 0200 	mov.w	r2, #0
 8007bbe:	f04f 0300 	mov.w	r3, #0
 8007bc2:	f04f 0400 	mov.w	r4, #0
 8007bc6:	0094      	lsls	r4, r2, #2
 8007bc8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007bcc:	008b      	lsls	r3, r1, #2
 8007bce:	461a      	mov	r2, r3
 8007bd0:	4623      	mov	r3, r4
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	4631      	mov	r1, r6
 8007bd6:	f7f9 f807 	bl	8000be8 <__aeabi_uldivmod>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	460c      	mov	r4, r1
 8007bde:	461a      	mov	r2, r3
 8007be0:	4bb8      	ldr	r3, [pc, #736]	; (8007ec4 <UART_SetConfig+0x6f4>)
 8007be2:	fba3 2302 	umull	r2, r3, r3, r2
 8007be6:	095b      	lsrs	r3, r3, #5
 8007be8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	469b      	mov	fp, r3
 8007bf0:	f04f 0c00 	mov.w	ip, #0
 8007bf4:	46d9      	mov	r9, fp
 8007bf6:	46e2      	mov	sl, ip
 8007bf8:	eb19 0309 	adds.w	r3, r9, r9
 8007bfc:	eb4a 040a 	adc.w	r4, sl, sl
 8007c00:	4699      	mov	r9, r3
 8007c02:	46a2      	mov	sl, r4
 8007c04:	eb19 090b 	adds.w	r9, r9, fp
 8007c08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c0c:	f04f 0100 	mov.w	r1, #0
 8007c10:	f04f 0200 	mov.w	r2, #0
 8007c14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c20:	4689      	mov	r9, r1
 8007c22:	4692      	mov	sl, r2
 8007c24:	eb1b 0509 	adds.w	r5, fp, r9
 8007c28:	eb4c 060a 	adc.w	r6, ip, sl
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	4619      	mov	r1, r3
 8007c32:	f04f 0200 	mov.w	r2, #0
 8007c36:	f04f 0300 	mov.w	r3, #0
 8007c3a:	f04f 0400 	mov.w	r4, #0
 8007c3e:	0094      	lsls	r4, r2, #2
 8007c40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c44:	008b      	lsls	r3, r1, #2
 8007c46:	461a      	mov	r2, r3
 8007c48:	4623      	mov	r3, r4
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	f7f8 ffcb 	bl	8000be8 <__aeabi_uldivmod>
 8007c52:	4603      	mov	r3, r0
 8007c54:	460c      	mov	r4, r1
 8007c56:	461a      	mov	r2, r3
 8007c58:	4b9a      	ldr	r3, [pc, #616]	; (8007ec4 <UART_SetConfig+0x6f4>)
 8007c5a:	fba3 1302 	umull	r1, r3, r3, r2
 8007c5e:	095b      	lsrs	r3, r3, #5
 8007c60:	2164      	movs	r1, #100	; 0x64
 8007c62:	fb01 f303 	mul.w	r3, r1, r3
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	011b      	lsls	r3, r3, #4
 8007c6a:	3332      	adds	r3, #50	; 0x32
 8007c6c:	4a95      	ldr	r2, [pc, #596]	; (8007ec4 <UART_SetConfig+0x6f4>)
 8007c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c72:	095b      	lsrs	r3, r3, #5
 8007c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c78:	4498      	add	r8, r3
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	469b      	mov	fp, r3
 8007c7e:	f04f 0c00 	mov.w	ip, #0
 8007c82:	46d9      	mov	r9, fp
 8007c84:	46e2      	mov	sl, ip
 8007c86:	eb19 0309 	adds.w	r3, r9, r9
 8007c8a:	eb4a 040a 	adc.w	r4, sl, sl
 8007c8e:	4699      	mov	r9, r3
 8007c90:	46a2      	mov	sl, r4
 8007c92:	eb19 090b 	adds.w	r9, r9, fp
 8007c96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c9a:	f04f 0100 	mov.w	r1, #0
 8007c9e:	f04f 0200 	mov.w	r2, #0
 8007ca2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ca6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007caa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cae:	4689      	mov	r9, r1
 8007cb0:	4692      	mov	sl, r2
 8007cb2:	eb1b 0509 	adds.w	r5, fp, r9
 8007cb6:	eb4c 060a 	adc.w	r6, ip, sl
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	f04f 0200 	mov.w	r2, #0
 8007cc4:	f04f 0300 	mov.w	r3, #0
 8007cc8:	f04f 0400 	mov.w	r4, #0
 8007ccc:	0094      	lsls	r4, r2, #2
 8007cce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cd2:	008b      	lsls	r3, r1, #2
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4623      	mov	r3, r4
 8007cd8:	4628      	mov	r0, r5
 8007cda:	4631      	mov	r1, r6
 8007cdc:	f7f8 ff84 	bl	8000be8 <__aeabi_uldivmod>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	4b77      	ldr	r3, [pc, #476]	; (8007ec4 <UART_SetConfig+0x6f4>)
 8007ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cec:	095b      	lsrs	r3, r3, #5
 8007cee:	2164      	movs	r1, #100	; 0x64
 8007cf0:	fb01 f303 	mul.w	r3, r1, r3
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	011b      	lsls	r3, r3, #4
 8007cf8:	3332      	adds	r3, #50	; 0x32
 8007cfa:	4a72      	ldr	r2, [pc, #456]	; (8007ec4 <UART_SetConfig+0x6f4>)
 8007cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007d00:	095b      	lsrs	r3, r3, #5
 8007d02:	f003 020f 	and.w	r2, r3, #15
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4442      	add	r2, r8
 8007d0c:	609a      	str	r2, [r3, #8]
 8007d0e:	e0d0      	b.n	8007eb2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d10:	f7fe f99a 	bl	8006048 <HAL_RCC_GetPCLK1Freq>
 8007d14:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	469a      	mov	sl, r3
 8007d1a:	f04f 0b00 	mov.w	fp, #0
 8007d1e:	46d0      	mov	r8, sl
 8007d20:	46d9      	mov	r9, fp
 8007d22:	eb18 0308 	adds.w	r3, r8, r8
 8007d26:	eb49 0409 	adc.w	r4, r9, r9
 8007d2a:	4698      	mov	r8, r3
 8007d2c:	46a1      	mov	r9, r4
 8007d2e:	eb18 080a 	adds.w	r8, r8, sl
 8007d32:	eb49 090b 	adc.w	r9, r9, fp
 8007d36:	f04f 0100 	mov.w	r1, #0
 8007d3a:	f04f 0200 	mov.w	r2, #0
 8007d3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d42:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d4a:	4688      	mov	r8, r1
 8007d4c:	4691      	mov	r9, r2
 8007d4e:	eb1a 0508 	adds.w	r5, sl, r8
 8007d52:	eb4b 0609 	adc.w	r6, fp, r9
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	f04f 0200 	mov.w	r2, #0
 8007d60:	f04f 0300 	mov.w	r3, #0
 8007d64:	f04f 0400 	mov.w	r4, #0
 8007d68:	0094      	lsls	r4, r2, #2
 8007d6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d6e:	008b      	lsls	r3, r1, #2
 8007d70:	461a      	mov	r2, r3
 8007d72:	4623      	mov	r3, r4
 8007d74:	4628      	mov	r0, r5
 8007d76:	4631      	mov	r1, r6
 8007d78:	f7f8 ff36 	bl	8000be8 <__aeabi_uldivmod>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	460c      	mov	r4, r1
 8007d80:	461a      	mov	r2, r3
 8007d82:	4b50      	ldr	r3, [pc, #320]	; (8007ec4 <UART_SetConfig+0x6f4>)
 8007d84:	fba3 2302 	umull	r2, r3, r3, r2
 8007d88:	095b      	lsrs	r3, r3, #5
 8007d8a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	469b      	mov	fp, r3
 8007d92:	f04f 0c00 	mov.w	ip, #0
 8007d96:	46d9      	mov	r9, fp
 8007d98:	46e2      	mov	sl, ip
 8007d9a:	eb19 0309 	adds.w	r3, r9, r9
 8007d9e:	eb4a 040a 	adc.w	r4, sl, sl
 8007da2:	4699      	mov	r9, r3
 8007da4:	46a2      	mov	sl, r4
 8007da6:	eb19 090b 	adds.w	r9, r9, fp
 8007daa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007dae:	f04f 0100 	mov.w	r1, #0
 8007db2:	f04f 0200 	mov.w	r2, #0
 8007db6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007dbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007dc2:	4689      	mov	r9, r1
 8007dc4:	4692      	mov	sl, r2
 8007dc6:	eb1b 0509 	adds.w	r5, fp, r9
 8007dca:	eb4c 060a 	adc.w	r6, ip, sl
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	f04f 0200 	mov.w	r2, #0
 8007dd8:	f04f 0300 	mov.w	r3, #0
 8007ddc:	f04f 0400 	mov.w	r4, #0
 8007de0:	0094      	lsls	r4, r2, #2
 8007de2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007de6:	008b      	lsls	r3, r1, #2
 8007de8:	461a      	mov	r2, r3
 8007dea:	4623      	mov	r3, r4
 8007dec:	4628      	mov	r0, r5
 8007dee:	4631      	mov	r1, r6
 8007df0:	f7f8 fefa 	bl	8000be8 <__aeabi_uldivmod>
 8007df4:	4603      	mov	r3, r0
 8007df6:	460c      	mov	r4, r1
 8007df8:	461a      	mov	r2, r3
 8007dfa:	4b32      	ldr	r3, [pc, #200]	; (8007ec4 <UART_SetConfig+0x6f4>)
 8007dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8007e00:	095b      	lsrs	r3, r3, #5
 8007e02:	2164      	movs	r1, #100	; 0x64
 8007e04:	fb01 f303 	mul.w	r3, r1, r3
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	011b      	lsls	r3, r3, #4
 8007e0c:	3332      	adds	r3, #50	; 0x32
 8007e0e:	4a2d      	ldr	r2, [pc, #180]	; (8007ec4 <UART_SetConfig+0x6f4>)
 8007e10:	fba2 2303 	umull	r2, r3, r2, r3
 8007e14:	095b      	lsrs	r3, r3, #5
 8007e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e1a:	4498      	add	r8, r3
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	469b      	mov	fp, r3
 8007e20:	f04f 0c00 	mov.w	ip, #0
 8007e24:	46d9      	mov	r9, fp
 8007e26:	46e2      	mov	sl, ip
 8007e28:	eb19 0309 	adds.w	r3, r9, r9
 8007e2c:	eb4a 040a 	adc.w	r4, sl, sl
 8007e30:	4699      	mov	r9, r3
 8007e32:	46a2      	mov	sl, r4
 8007e34:	eb19 090b 	adds.w	r9, r9, fp
 8007e38:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e3c:	f04f 0100 	mov.w	r1, #0
 8007e40:	f04f 0200 	mov.w	r2, #0
 8007e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e50:	4689      	mov	r9, r1
 8007e52:	4692      	mov	sl, r2
 8007e54:	eb1b 0509 	adds.w	r5, fp, r9
 8007e58:	eb4c 060a 	adc.w	r6, ip, sl
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	4619      	mov	r1, r3
 8007e62:	f04f 0200 	mov.w	r2, #0
 8007e66:	f04f 0300 	mov.w	r3, #0
 8007e6a:	f04f 0400 	mov.w	r4, #0
 8007e6e:	0094      	lsls	r4, r2, #2
 8007e70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e74:	008b      	lsls	r3, r1, #2
 8007e76:	461a      	mov	r2, r3
 8007e78:	4623      	mov	r3, r4
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	4631      	mov	r1, r6
 8007e7e:	f7f8 feb3 	bl	8000be8 <__aeabi_uldivmod>
 8007e82:	4603      	mov	r3, r0
 8007e84:	460c      	mov	r4, r1
 8007e86:	461a      	mov	r2, r3
 8007e88:	4b0e      	ldr	r3, [pc, #56]	; (8007ec4 <UART_SetConfig+0x6f4>)
 8007e8a:	fba3 1302 	umull	r1, r3, r3, r2
 8007e8e:	095b      	lsrs	r3, r3, #5
 8007e90:	2164      	movs	r1, #100	; 0x64
 8007e92:	fb01 f303 	mul.w	r3, r1, r3
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	011b      	lsls	r3, r3, #4
 8007e9a:	3332      	adds	r3, #50	; 0x32
 8007e9c:	4a09      	ldr	r2, [pc, #36]	; (8007ec4 <UART_SetConfig+0x6f4>)
 8007e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea2:	095b      	lsrs	r3, r3, #5
 8007ea4:	f003 020f 	and.w	r2, r3, #15
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4442      	add	r2, r8
 8007eae:	609a      	str	r2, [r3, #8]
}
 8007eb0:	e7ff      	b.n	8007eb2 <UART_SetConfig+0x6e2>
 8007eb2:	bf00      	nop
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ebc:	40011000 	.word	0x40011000
 8007ec0:	40011400 	.word	0x40011400
 8007ec4:	51eb851f 	.word	0x51eb851f

08007ec8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	4603      	mov	r3, r0
 8007ed0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007eda:	2b84      	cmp	r3, #132	; 0x84
 8007edc:	d005      	beq.n	8007eea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007ede:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	3303      	adds	r3, #3
 8007ee8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007eea:	68fb      	ldr	r3, [r7, #12]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007efe:	f3ef 8305 	mrs	r3, IPSR
 8007f02:	607b      	str	r3, [r7, #4]
  return(result);
 8007f04:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	bf14      	ite	ne
 8007f0a:	2301      	movne	r3, #1
 8007f0c:	2300      	moveq	r3, #0
 8007f0e:	b2db      	uxtb	r3, r3
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007f20:	f001 f9cc 	bl	80092bc <vTaskStartScheduler>
  
  return osOK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f2c:	b089      	sub	sp, #36	; 0x24
 8007f2e:	af04      	add	r7, sp, #16
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d020      	beq.n	8007f7e <osThreadCreate+0x54>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d01c      	beq.n	8007f7e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685c      	ldr	r4, [r3, #4]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681d      	ldr	r5, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	691e      	ldr	r6, [r3, #16]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7ff ffb6 	bl	8007ec8 <makeFreeRtosPriority>
 8007f5c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f66:	9202      	str	r2, [sp, #8]
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	9100      	str	r1, [sp, #0]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	4632      	mov	r2, r6
 8007f70:	4629      	mov	r1, r5
 8007f72:	4620      	mov	r0, r4
 8007f74:	f000 ffdf 	bl	8008f36 <xTaskCreateStatic>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	e01c      	b.n	8007fb8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685c      	ldr	r4, [r3, #4]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f8a:	b29e      	uxth	r6, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff ff98 	bl	8007ec8 <makeFreeRtosPriority>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	f107 030c 	add.w	r3, r7, #12
 8007f9e:	9301      	str	r3, [sp, #4]
 8007fa0:	9200      	str	r2, [sp, #0]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	4632      	mov	r2, r6
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f001 f81e 	bl	8008fea <xTaskCreate>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d001      	beq.n	8007fb8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	e000      	b.n	8007fba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007fc2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <osDelay+0x16>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	e000      	b.n	8007fda <osDelay+0x18>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f001 f93a 	bl	8009254 <vTaskDelay>
  
  return osOK;
 8007fe0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b086      	sub	sp, #24
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	3303      	adds	r3, #3
 8007ff8:	f023 0303 	bic.w	r3, r3, #3
 8007ffc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8007ffe:	2014      	movs	r0, #20
 8008000:	f002 f896 	bl	800a130 <pvPortMalloc>
 8008004:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d046      	beq.n	800809a <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	2200      	movs	r2, #0
 800801e:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4618      	mov	r0, r3
 8008026:	f002 f883 	bl	800a130 <pvPortMalloc>
 800802a:	4602      	mov	r2, r0
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d02b      	beq.n	8008090 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	fb02 f303 	mul.w	r3, r2, r3
 8008042:	4618      	mov	r0, r3
 8008044:	f002 f874 	bl	800a130 <pvPortMalloc>
 8008048:	4602      	mov	r2, r0
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d011      	beq.n	800807a <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8008056:	2300      	movs	r3, #0
 8008058:	613b      	str	r3, [r7, #16]
 800805a:	e008      	b.n	800806e <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	4413      	add	r3, r2
 8008064:	2200      	movs	r2, #0
 8008066:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	3301      	adds	r3, #1
 800806c:	613b      	str	r3, [r7, #16]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	429a      	cmp	r2, r3
 8008076:	d3f1      	bcc.n	800805c <osPoolCreate+0x72>
 8008078:	e00f      	b.n	800809a <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	4618      	mov	r0, r3
 8008080:	f002 f918 	bl	800a2b4 <vPortFree>
        vPortFree(thePool);
 8008084:	6978      	ldr	r0, [r7, #20]
 8008086:	f002 f915 	bl	800a2b4 <vPortFree>
        thePool = NULL;
 800808a:	2300      	movs	r3, #0
 800808c:	617b      	str	r3, [r7, #20]
 800808e:	e004      	b.n	800809a <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8008090:	6978      	ldr	r0, [r7, #20]
 8008092:	f002 f90f 	bl	800a2b4 <vPortFree>
      thePool = NULL;
 8008096:	2300      	movs	r3, #0
 8008098:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800809a:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08a      	sub	sp, #40	; 0x28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 80080b0:	2300      	movs	r3, #0
 80080b2:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80080b4:	f7ff ff20 	bl	8007ef8 <inHandlerMode>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00e      	beq.n	80080dc <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80080be:	f3ef 8211 	mrs	r2, BASEPRI
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	617a      	str	r2, [r7, #20]
 80080d4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80080d6:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80080d8:	627b      	str	r3, [r7, #36]	; 0x24
 80080da:	e001      	b.n	80080e0 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 80080dc:	f001 ff0e 	bl	8009efc <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80080e0:	2300      	movs	r3, #0
 80080e2:	61fb      	str	r3, [r7, #28]
 80080e4:	e029      	b.n	800813a <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	691a      	ldr	r2, [r3, #16]
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	4413      	add	r3, r2
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	6892      	ldr	r2, [r2, #8]
 80080f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80080f6:	fb02 f201 	mul.w	r2, r2, r1
 80080fa:	1a9b      	subs	r3, r3, r2
 80080fc:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	4413      	add	r3, r2
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d113      	bne.n	8008134 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	4413      	add	r3, r2
 8008114:	2201      	movs	r2, #1
 8008116:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4619      	mov	r1, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	69ba      	ldr	r2, [r7, #24]
 8008124:	fb02 f303 	mul.w	r3, r2, r3
 8008128:	440b      	add	r3, r1
 800812a:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	69ba      	ldr	r2, [r7, #24]
 8008130:	611a      	str	r2, [r3, #16]
      break;
 8008132:	e007      	b.n	8008144 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	3301      	adds	r3, #1
 8008138:	61fb      	str	r3, [r7, #28]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	69fa      	ldr	r2, [r7, #28]
 8008140:	429a      	cmp	r2, r3
 8008142:	d3d0      	bcc.n	80080e6 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8008144:	f7ff fed8 	bl	8007ef8 <inHandlerMode>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d005      	beq.n	800815a <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	e001      	b.n	800815e <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800815a:	f001 fefd 	bl	8009f58 <vPortExitCritical>
  }
  
  return p;
 800815e:	6a3b      	ldr	r3, [r7, #32]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3728      	adds	r7, #40	; 0x28
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <osPoolFree+0x14>
    return osErrorParameter;
 8008178:	2380      	movs	r3, #128	; 0x80
 800817a:	e030      	b.n	80081de <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <osPoolFree+0x1e>
    return osErrorParameter;
 8008182:	2380      	movs	r3, #128	; 0x80
 8008184:	e02b      	b.n	80081de <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	429a      	cmp	r2, r3
 800818e:	d201      	bcs.n	8008194 <osPoolFree+0x2c>
    return osErrorParameter;
 8008190:	2380      	movs	r3, #128	; 0x80
 8008192:	e024      	b.n	80081de <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	6812      	ldr	r2, [r2, #0]
 800819a:	1a9b      	subs	r3, r3, r2
 800819c:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80081a8:	fb02 f201 	mul.w	r2, r2, r1
 80081ac:	1a9b      	subs	r3, r3, r2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <osPoolFree+0x4e>
    return osErrorParameter;
 80081b2:	2380      	movs	r3, #128	; 0x80
 80081b4:	e013      	b.n	80081de <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c0:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d301      	bcc.n	80081d0 <osPoolFree+0x68>
    return osErrorParameter;
 80081cc:	2380      	movs	r3, #128	; 0x80
 80081ce:	e006      	b.n	80081de <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4413      	add	r3, r2
 80081d8:	2200      	movs	r2, #0
 80081da:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80081ea:	b590      	push	{r4, r7, lr}
 80081ec:	b087      	sub	sp, #28
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	60fb      	str	r3, [r7, #12]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	613b      	str	r3, [r7, #16]
 8008200:	2300      	movs	r3, #0
 8008202:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	689c      	ldr	r4, [r3, #8]
 8008208:	200c      	movs	r0, #12
 800820a:	f001 ff91 	bl	800a130 <pvPortMalloc>
 800820e:	4603      	mov	r3, r0
 8008210:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <osMailCreate+0x36>
    return NULL;
 800821c:	2300      	movs	r3, #0
 800821e:	e038      	b.n	8008292 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6818      	ldr	r0, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	681c      	ldr	r4, [r3, #0]
 8008234:	2200      	movs	r2, #0
 8008236:	2104      	movs	r1, #4
 8008238:	f000 fa28 	bl	800868c <xQueueGenericCreate>
 800823c:	4603      	mov	r3, r0
 800823e:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d107      	bne.n	800825c <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4618      	mov	r0, r3
 8008254:	f002 f82e 	bl	800a2b4 <vPortFree>
    return NULL;
 8008258:	2300      	movs	r3, #0
 800825a:	e01a      	b.n	8008292 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	681c      	ldr	r4, [r3, #0]
 8008262:	f107 030c 	add.w	r3, r7, #12
 8008266:	4618      	mov	r0, r3
 8008268:	f7ff febf 	bl	8007fea <osPoolCreate>
 800826c:	4603      	mov	r3, r0
 800826e:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d107      	bne.n	800828c <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4618      	mov	r0, r3
 8008284:	f002 f816 	bl	800a2b4 <vPortFree>
    return NULL;
 8008288:	2300      	movs	r3, #0
 800828a:	e002      	b.n	8008292 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8008292:	4618      	mov	r0, r3
 8008294:	371c      	adds	r7, #28
 8008296:	46bd      	mov	sp, r7
 8008298:	bd90      	pop	{r4, r7, pc}

0800829a <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <osMailAlloc+0x14>
    return NULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	e006      	b.n	80082bc <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7ff fef6 	bl	80080a4 <osPoolAlloc>
 80082b8:	60f8      	str	r0, [r7, #12]
  
  return p;
 80082ba:	68fb      	ldr	r3, [r7, #12]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <osMailPut+0x14>
    return osErrorParameter;
 80082d4:	2380      	movs	r3, #128	; 0x80
 80082d6:	e02c      	b.n	8008332 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 80082d8:	2300      	movs	r3, #0
 80082da:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 80082dc:	f7ff fe0c 	bl	8007ef8 <inHandlerMode>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d018      	beq.n	8008318 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6858      	ldr	r0, [r3, #4]
 80082ea:	f107 020c 	add.w	r2, r7, #12
 80082ee:	4639      	mov	r1, r7
 80082f0:	2300      	movs	r3, #0
 80082f2:	f000 fb23 	bl	800893c <xQueueGenericSendFromISR>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d001      	beq.n	8008300 <osMailPut+0x3c>
      return osErrorOS;
 80082fc:	23ff      	movs	r3, #255	; 0xff
 80082fe:	e018      	b.n	8008332 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d014      	beq.n	8008330 <osMailPut+0x6c>
 8008306:	4b0d      	ldr	r3, [pc, #52]	; (800833c <osMailPut+0x78>)
 8008308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	e00b      	b.n	8008330 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6858      	ldr	r0, [r3, #4]
 800831c:	4639      	mov	r1, r7
 800831e:	2300      	movs	r3, #0
 8008320:	2200      	movs	r2, #0
 8008322:	f000 fa11 	bl	8008748 <xQueueGenericSend>
 8008326:	4603      	mov	r3, r0
 8008328:	2b01      	cmp	r3, #1
 800832a:	d001      	beq.n	8008330 <osMailPut+0x6c>
      return osErrorOS;
 800832c:	23ff      	movs	r3, #255	; 0xff
 800832e:	e000      	b.n	8008332 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	e000ed04 	.word	0xe000ed04

08008340 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8008340:	b590      	push	{r4, r7, lr}
 8008342:	b08b      	sub	sp, #44	; 0x2c
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10a      	bne.n	800836c <osMailGet+0x2c>
    event.status = osErrorParameter;
 8008356:	2380      	movs	r3, #128	; 0x80
 8008358:	617b      	str	r3, [r7, #20]
    return event;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	461c      	mov	r4, r3
 800835e:	f107 0314 	add.w	r3, r7, #20
 8008362:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008366:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800836a:	e056      	b.n	800841a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800836c:	2300      	movs	r3, #0
 800836e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800837a:	d103      	bne.n	8008384 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800837c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
 8008382:	e009      	b.n	8008398 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d006      	beq.n	8008398 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <osMailGet+0x58>
      ticks = 1;
 8008394:	2301      	movs	r3, #1
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008398:	f7ff fdae 	bl	8007ef8 <inHandlerMode>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d01d      	beq.n	80083de <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	6858      	ldr	r0, [r3, #4]
 80083a6:	f107 0220 	add.w	r2, r7, #32
 80083aa:	f107 0314 	add.w	r3, r7, #20
 80083ae:	3304      	adds	r3, #4
 80083b0:	4619      	mov	r1, r3
 80083b2:	f000 fc33 	bl	8008c1c <xQueueReceiveFromISR>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d102      	bne.n	80083c2 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 80083bc:	2320      	movs	r3, #32
 80083be:	617b      	str	r3, [r7, #20]
 80083c0:	e001      	b.n	80083c6 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d01e      	beq.n	800840a <osMailGet+0xca>
 80083cc:	4b15      	ldr	r3, [pc, #84]	; (8008424 <osMailGet+0xe4>)
 80083ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	e015      	b.n	800840a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6858      	ldr	r0, [r3, #4]
 80083e2:	f107 0314 	add.w	r3, r7, #20
 80083e6:	3304      	adds	r3, #4
 80083e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ea:	4619      	mov	r1, r3
 80083ec:	f000 fb3a 	bl	8008a64 <xQueueReceive>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d102      	bne.n	80083fc <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80083f6:	2320      	movs	r3, #32
 80083f8:	617b      	str	r3, [r7, #20]
 80083fa:	e006      	b.n	800840a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <osMailGet+0xc6>
 8008402:	2300      	movs	r3, #0
 8008404:	e000      	b.n	8008408 <osMailGet+0xc8>
 8008406:	2340      	movs	r3, #64	; 0x40
 8008408:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	461c      	mov	r4, r3
 800840e:	f107 0314 	add.w	r3, r7, #20
 8008412:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008416:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	372c      	adds	r7, #44	; 0x2c
 800841e:	46bd      	mov	sp, r7
 8008420:	bd90      	pop	{r4, r7, pc}
 8008422:	bf00      	nop
 8008424:	e000ed04 	.word	0xe000ed04

08008428 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <osMailFree+0x14>
    return osErrorParameter;
 8008438:	2380      	movs	r3, #128	; 0x80
 800843a:	e006      	b.n	800844a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	4618      	mov	r0, r3
 8008444:	f7ff fe90 	bl	8008168 <osPoolFree>
 8008448:	4603      	mov	r3, r0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f103 0208 	add.w	r2, r3, #8
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800846a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f103 0208 	add.w	r2, r3, #8
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f103 0208 	add.w	r2, r3, #8
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	689a      	ldr	r2, [r3, #8]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	601a      	str	r2, [r3, #0]
}
 80084e8:	bf00      	nop
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800850a:	d103      	bne.n	8008514 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	60fb      	str	r3, [r7, #12]
 8008512:	e00c      	b.n	800852e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	3308      	adds	r3, #8
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	e002      	b.n	8008522 <vListInsert+0x2e>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	60fb      	str	r3, [r7, #12]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	429a      	cmp	r2, r3
 800852c:	d2f6      	bcs.n	800851c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	601a      	str	r2, [r3, #0]
}
 800855a:	bf00      	nop
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008566:	b480      	push	{r7}
 8008568:	b085      	sub	sp, #20
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	6892      	ldr	r2, [r2, #8]
 800857c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	6852      	ldr	r2, [r2, #4]
 8008586:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	429a      	cmp	r2, r3
 8008590:	d103      	bne.n	800859a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	689a      	ldr	r2, [r3, #8]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	1e5a      	subs	r2, r3, #1
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
	...

080085bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d109      	bne.n	80085e4 <xQueueGenericReset+0x28>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	60bb      	str	r3, [r7, #8]
 80085e2:	e7fe      	b.n	80085e2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80085e4:	f001 fc8a 	bl	8009efc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f0:	68f9      	ldr	r1, [r7, #12]
 80085f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085f4:	fb01 f303 	mul.w	r3, r1, r3
 80085f8:	441a      	add	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008614:	3b01      	subs	r3, #1
 8008616:	68f9      	ldr	r1, [r7, #12]
 8008618:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800861a:	fb01 f303 	mul.w	r3, r1, r3
 800861e:	441a      	add	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	22ff      	movs	r2, #255	; 0xff
 8008628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	22ff      	movs	r2, #255	; 0xff
 8008630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d114      	bne.n	8008664 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d01a      	beq.n	8008678 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3310      	adds	r3, #16
 8008646:	4618      	mov	r0, r3
 8008648:	f001 f876 	bl	8009738 <xTaskRemoveFromEventList>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d012      	beq.n	8008678 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008652:	4b0d      	ldr	r3, [pc, #52]	; (8008688 <xQueueGenericReset+0xcc>)
 8008654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008658:	601a      	str	r2, [r3, #0]
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	e009      	b.n	8008678 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	3310      	adds	r3, #16
 8008668:	4618      	mov	r0, r3
 800866a:	f7ff fef2 	bl	8008452 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3324      	adds	r3, #36	; 0x24
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff feed 	bl	8008452 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008678:	f001 fc6e 	bl	8009f58 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800867c:	2301      	movs	r3, #1
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	e000ed04 	.word	0xe000ed04

0800868c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800868c:	b580      	push	{r7, lr}
 800868e:	b08a      	sub	sp, #40	; 0x28
 8008690:	af02      	add	r7, sp, #8
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	4613      	mov	r3, r2
 8008698:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d109      	bne.n	80086b4 <xQueueGenericCreate+0x28>
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	613b      	str	r3, [r7, #16]
 80086b2:	e7fe      	b.n	80086b2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d102      	bne.n	80086c0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80086ba:	2300      	movs	r3, #0
 80086bc:	61fb      	str	r3, [r7, #28]
 80086be:	e004      	b.n	80086ca <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	fb02 f303 	mul.w	r3, r2, r3
 80086c8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	3348      	adds	r3, #72	; 0x48
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 fd2e 	bl	800a130 <pvPortMalloc>
 80086d4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d011      	beq.n	8008700 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	3348      	adds	r3, #72	; 0x48
 80086e4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086ee:	79fa      	ldrb	r2, [r7, #7]
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	4613      	mov	r3, r2
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	68b9      	ldr	r1, [r7, #8]
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 f805 	bl	800870a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008700:	69bb      	ldr	r3, [r7, #24]
	}
 8008702:	4618      	mov	r0, r3
 8008704:	3720      	adds	r7, #32
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	607a      	str	r2, [r7, #4]
 8008716:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d103      	bne.n	8008726 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	e002      	b.n	800872c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008738:	2101      	movs	r1, #1
 800873a:	69b8      	ldr	r0, [r7, #24]
 800873c:	f7ff ff3e 	bl	80085bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008740:	bf00      	nop
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b08e      	sub	sp, #56	; 0x38
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
 8008754:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008756:	2300      	movs	r3, #0
 8008758:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008760:	2b00      	cmp	r3, #0
 8008762:	d109      	bne.n	8008778 <xQueueGenericSend+0x30>
 8008764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	62bb      	str	r3, [r7, #40]	; 0x28
 8008776:	e7fe      	b.n	8008776 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d103      	bne.n	8008786 <xQueueGenericSend+0x3e>
 800877e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008782:	2b00      	cmp	r3, #0
 8008784:	d101      	bne.n	800878a <xQueueGenericSend+0x42>
 8008786:	2301      	movs	r3, #1
 8008788:	e000      	b.n	800878c <xQueueGenericSend+0x44>
 800878a:	2300      	movs	r3, #0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d109      	bne.n	80087a4 <xQueueGenericSend+0x5c>
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	627b      	str	r3, [r7, #36]	; 0x24
 80087a2:	e7fe      	b.n	80087a2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d103      	bne.n	80087b2 <xQueueGenericSend+0x6a>
 80087aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d101      	bne.n	80087b6 <xQueueGenericSend+0x6e>
 80087b2:	2301      	movs	r3, #1
 80087b4:	e000      	b.n	80087b8 <xQueueGenericSend+0x70>
 80087b6:	2300      	movs	r3, #0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d109      	bne.n	80087d0 <xQueueGenericSend+0x88>
 80087bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	623b      	str	r3, [r7, #32]
 80087ce:	e7fe      	b.n	80087ce <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087d0:	f001 f968 	bl	8009aa4 <xTaskGetSchedulerState>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d102      	bne.n	80087e0 <xQueueGenericSend+0x98>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <xQueueGenericSend+0x9c>
 80087e0:	2301      	movs	r3, #1
 80087e2:	e000      	b.n	80087e6 <xQueueGenericSend+0x9e>
 80087e4:	2300      	movs	r3, #0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d109      	bne.n	80087fe <xQueueGenericSend+0xb6>
 80087ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	61fb      	str	r3, [r7, #28]
 80087fc:	e7fe      	b.n	80087fc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087fe:	f001 fb7d 	bl	8009efc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800880a:	429a      	cmp	r2, r3
 800880c:	d302      	bcc.n	8008814 <xQueueGenericSend+0xcc>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b02      	cmp	r3, #2
 8008812:	d129      	bne.n	8008868 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	68b9      	ldr	r1, [r7, #8]
 8008818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800881a:	f000 fa7c 	bl	8008d16 <prvCopyDataToQueue>
 800881e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	d010      	beq.n	800884a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882a:	3324      	adds	r3, #36	; 0x24
 800882c:	4618      	mov	r0, r3
 800882e:	f000 ff83 	bl	8009738 <xTaskRemoveFromEventList>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d013      	beq.n	8008860 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008838:	4b3f      	ldr	r3, [pc, #252]	; (8008938 <xQueueGenericSend+0x1f0>)
 800883a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	f3bf 8f4f 	dsb	sy
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	e00a      	b.n	8008860 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800884a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884c:	2b00      	cmp	r3, #0
 800884e:	d007      	beq.n	8008860 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008850:	4b39      	ldr	r3, [pc, #228]	; (8008938 <xQueueGenericSend+0x1f0>)
 8008852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008860:	f001 fb7a 	bl	8009f58 <vPortExitCritical>
				return pdPASS;
 8008864:	2301      	movs	r3, #1
 8008866:	e063      	b.n	8008930 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d103      	bne.n	8008876 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800886e:	f001 fb73 	bl	8009f58 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008872:	2300      	movs	r3, #0
 8008874:	e05c      	b.n	8008930 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008878:	2b00      	cmp	r3, #0
 800887a:	d106      	bne.n	800888a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800887c:	f107 0314 	add.w	r3, r7, #20
 8008880:	4618      	mov	r0, r3
 8008882:	f000 ffbb 	bl	80097fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008886:	2301      	movs	r3, #1
 8008888:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800888a:	f001 fb65 	bl	8009f58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800888e:	f000 fd73 	bl	8009378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008892:	f001 fb33 	bl	8009efc <vPortEnterCritical>
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800889c:	b25b      	sxtb	r3, r3
 800889e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088a2:	d103      	bne.n	80088ac <xQueueGenericSend+0x164>
 80088a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088b2:	b25b      	sxtb	r3, r3
 80088b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088b8:	d103      	bne.n	80088c2 <xQueueGenericSend+0x17a>
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088c2:	f001 fb49 	bl	8009f58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088c6:	1d3a      	adds	r2, r7, #4
 80088c8:	f107 0314 	add.w	r3, r7, #20
 80088cc:	4611      	mov	r1, r2
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 ffaa 	bl	8009828 <xTaskCheckForTimeOut>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d124      	bne.n	8008924 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088dc:	f000 fb13 	bl	8008f06 <prvIsQueueFull>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d018      	beq.n	8008918 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	3310      	adds	r3, #16
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	4611      	mov	r1, r2
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 fefe 	bl	80096f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088f6:	f000 fa9e 	bl	8008e36 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088fa:	f000 fd4b 	bl	8009394 <xTaskResumeAll>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	f47f af7c 	bne.w	80087fe <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008906:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <xQueueGenericSend+0x1f0>)
 8008908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	e772      	b.n	80087fe <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800891a:	f000 fa8c 	bl	8008e36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800891e:	f000 fd39 	bl	8009394 <xTaskResumeAll>
 8008922:	e76c      	b.n	80087fe <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008926:	f000 fa86 	bl	8008e36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800892a:	f000 fd33 	bl	8009394 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800892e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008930:	4618      	mov	r0, r3
 8008932:	3738      	adds	r7, #56	; 0x38
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	e000ed04 	.word	0xe000ed04

0800893c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b08e      	sub	sp, #56	; 0x38
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
 8008948:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	2b00      	cmp	r3, #0
 8008952:	d109      	bne.n	8008968 <xQueueGenericSendFromISR+0x2c>
 8008954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	627b      	str	r3, [r7, #36]	; 0x24
 8008966:	e7fe      	b.n	8008966 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d103      	bne.n	8008976 <xQueueGenericSendFromISR+0x3a>
 800896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <xQueueGenericSendFromISR+0x3e>
 8008976:	2301      	movs	r3, #1
 8008978:	e000      	b.n	800897c <xQueueGenericSendFromISR+0x40>
 800897a:	2300      	movs	r3, #0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d109      	bne.n	8008994 <xQueueGenericSendFromISR+0x58>
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	623b      	str	r3, [r7, #32]
 8008992:	e7fe      	b.n	8008992 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2b02      	cmp	r3, #2
 8008998:	d103      	bne.n	80089a2 <xQueueGenericSendFromISR+0x66>
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d101      	bne.n	80089a6 <xQueueGenericSendFromISR+0x6a>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <xQueueGenericSendFromISR+0x6c>
 80089a6:	2300      	movs	r3, #0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d109      	bne.n	80089c0 <xQueueGenericSendFromISR+0x84>
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	61fb      	str	r3, [r7, #28]
 80089be:	e7fe      	b.n	80089be <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089c0:	f001 fb78 	bl	800a0b4 <vPortValidateInterruptPriority>
	__asm volatile
 80089c4:	f3ef 8211 	mrs	r2, BASEPRI
 80089c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	61ba      	str	r2, [r7, #24]
 80089da:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80089dc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089de:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d302      	bcc.n	80089f2 <xQueueGenericSendFromISR+0xb6>
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d12c      	bne.n	8008a4c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089fc:	683a      	ldr	r2, [r7, #0]
 80089fe:	68b9      	ldr	r1, [r7, #8]
 8008a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a02:	f000 f988 	bl	8008d16 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a06:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a0e:	d112      	bne.n	8008a36 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d016      	beq.n	8008a46 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1a:	3324      	adds	r3, #36	; 0x24
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 fe8b 	bl	8009738 <xTaskRemoveFromEventList>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00e      	beq.n	8008a46 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00b      	beq.n	8008a46 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	e007      	b.n	8008a46 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	b25a      	sxtb	r2, r3
 8008a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a46:	2301      	movs	r3, #1
 8008a48:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008a4a:	e001      	b.n	8008a50 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a52:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3738      	adds	r7, #56	; 0x38
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08c      	sub	sp, #48	; 0x30
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a70:	2300      	movs	r3, #0
 8008a72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d109      	bne.n	8008a92 <xQueueReceive+0x2e>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	623b      	str	r3, [r7, #32]
 8008a90:	e7fe      	b.n	8008a90 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d103      	bne.n	8008aa0 <xQueueReceive+0x3c>
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <xQueueReceive+0x40>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e000      	b.n	8008aa6 <xQueueReceive+0x42>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d109      	bne.n	8008abe <xQueueReceive+0x5a>
 8008aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	61fb      	str	r3, [r7, #28]
 8008abc:	e7fe      	b.n	8008abc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008abe:	f000 fff1 	bl	8009aa4 <xTaskGetSchedulerState>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d102      	bne.n	8008ace <xQueueReceive+0x6a>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <xQueueReceive+0x6e>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e000      	b.n	8008ad4 <xQueueReceive+0x70>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d109      	bne.n	8008aec <xQueueReceive+0x88>
 8008ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	61bb      	str	r3, [r7, #24]
 8008aea:	e7fe      	b.n	8008aea <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008aec:	f001 fa06 	bl	8009efc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d01f      	beq.n	8008b3c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008afc:	68b9      	ldr	r1, [r7, #8]
 8008afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b00:	f000 f973 	bl	8008dea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b06:	1e5a      	subs	r2, r3, #1
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00f      	beq.n	8008b34 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b16:	3310      	adds	r3, #16
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 fe0d 	bl	8009738 <xTaskRemoveFromEventList>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d007      	beq.n	8008b34 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b24:	4b3c      	ldr	r3, [pc, #240]	; (8008c18 <xQueueReceive+0x1b4>)
 8008b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b2a:	601a      	str	r2, [r3, #0]
 8008b2c:	f3bf 8f4f 	dsb	sy
 8008b30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b34:	f001 fa10 	bl	8009f58 <vPortExitCritical>
				return pdPASS;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e069      	b.n	8008c10 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d103      	bne.n	8008b4a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b42:	f001 fa09 	bl	8009f58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b46:	2300      	movs	r3, #0
 8008b48:	e062      	b.n	8008c10 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d106      	bne.n	8008b5e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b50:	f107 0310 	add.w	r3, r7, #16
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fe51 	bl	80097fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b5e:	f001 f9fb 	bl	8009f58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b62:	f000 fc09 	bl	8009378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b66:	f001 f9c9 	bl	8009efc <vPortEnterCritical>
 8008b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b70:	b25b      	sxtb	r3, r3
 8008b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b76:	d103      	bne.n	8008b80 <xQueueReceive+0x11c>
 8008b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b86:	b25b      	sxtb	r3, r3
 8008b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b8c:	d103      	bne.n	8008b96 <xQueueReceive+0x132>
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b96:	f001 f9df 	bl	8009f58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b9a:	1d3a      	adds	r2, r7, #4
 8008b9c:	f107 0310 	add.w	r3, r7, #16
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 fe40 	bl	8009828 <xTaskCheckForTimeOut>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d123      	bne.n	8008bf6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bb0:	f000 f993 	bl	8008eda <prvIsQueueEmpty>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d017      	beq.n	8008bea <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbc:	3324      	adds	r3, #36	; 0x24
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 fd94 	bl	80096f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bca:	f000 f934 	bl	8008e36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bce:	f000 fbe1 	bl	8009394 <xTaskResumeAll>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d189      	bne.n	8008aec <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008bd8:	4b0f      	ldr	r3, [pc, #60]	; (8008c18 <xQueueReceive+0x1b4>)
 8008bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	e780      	b.n	8008aec <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bec:	f000 f923 	bl	8008e36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bf0:	f000 fbd0 	bl	8009394 <xTaskResumeAll>
 8008bf4:	e77a      	b.n	8008aec <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bf8:	f000 f91d 	bl	8008e36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bfc:	f000 fbca 	bl	8009394 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c02:	f000 f96a 	bl	8008eda <prvIsQueueEmpty>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f43f af6f 	beq.w	8008aec <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3730      	adds	r7, #48	; 0x30
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	e000ed04 	.word	0xe000ed04

08008c1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b08e      	sub	sp, #56	; 0x38
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d109      	bne.n	8008c46 <xQueueReceiveFromISR+0x2a>
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	623b      	str	r3, [r7, #32]
 8008c44:	e7fe      	b.n	8008c44 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d103      	bne.n	8008c54 <xQueueReceiveFromISR+0x38>
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <xQueueReceiveFromISR+0x3c>
 8008c54:	2301      	movs	r3, #1
 8008c56:	e000      	b.n	8008c5a <xQueueReceiveFromISR+0x3e>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d109      	bne.n	8008c72 <xQueueReceiveFromISR+0x56>
 8008c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	61fb      	str	r3, [r7, #28]
 8008c70:	e7fe      	b.n	8008c70 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c72:	f001 fa1f 	bl	800a0b4 <vPortValidateInterruptPriority>
	__asm volatile
 8008c76:	f3ef 8211 	mrs	r2, BASEPRI
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	61ba      	str	r2, [r7, #24]
 8008c8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008c8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d02f      	beq.n	8008cfe <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ca8:	68b9      	ldr	r1, [r7, #8]
 8008caa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cac:	f000 f89d 	bl	8008dea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb2:	1e5a      	subs	r2, r3, #1
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008cb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cc0:	d112      	bne.n	8008ce8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d016      	beq.n	8008cf8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ccc:	3310      	adds	r3, #16
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 fd32 	bl	8009738 <xTaskRemoveFromEventList>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00e      	beq.n	8008cf8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00b      	beq.n	8008cf8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	601a      	str	r2, [r3, #0]
 8008ce6:	e007      	b.n	8008cf8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cec:	3301      	adds	r3, #1
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	b25a      	sxtb	r2, r3
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8008cfc:	e001      	b.n	8008d02 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	637b      	str	r3, [r7, #52]	; 0x34
 8008d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3738      	adds	r7, #56	; 0x38
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b086      	sub	sp, #24
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	60f8      	str	r0, [r7, #12]
 8008d1e:	60b9      	str	r1, [r7, #8]
 8008d20:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d22:	2300      	movs	r3, #0
 8008d24:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10d      	bne.n	8008d50 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d14d      	bne.n	8008dd8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 fecd 	bl	8009ae0 <xTaskPriorityDisinherit>
 8008d46:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	609a      	str	r2, [r3, #8]
 8008d4e:	e043      	b.n	8008dd8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d119      	bne.n	8008d8a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6858      	ldr	r0, [r3, #4]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5e:	461a      	mov	r2, r3
 8008d60:	68b9      	ldr	r1, [r7, #8]
 8008d62:	f001 fbe5 	bl	800a530 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	685a      	ldr	r2, [r3, #4]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6e:	441a      	add	r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d32b      	bcc.n	8008dd8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	605a      	str	r2, [r3, #4]
 8008d88:	e026      	b.n	8008dd8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	68d8      	ldr	r0, [r3, #12]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d92:	461a      	mov	r2, r3
 8008d94:	68b9      	ldr	r1, [r7, #8]
 8008d96:	f001 fbcb 	bl	800a530 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	68da      	ldr	r2, [r3, #12]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da2:	425b      	negs	r3, r3
 8008da4:	441a      	add	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	68da      	ldr	r2, [r3, #12]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d207      	bcs.n	8008dc6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	689a      	ldr	r2, [r3, #8]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbe:	425b      	negs	r3, r3
 8008dc0:	441a      	add	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d105      	bne.n	8008dd8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	1c5a      	adds	r2, r3, #1
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008de0:	697b      	ldr	r3, [r7, #20]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d018      	beq.n	8008e2e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	68da      	ldr	r2, [r3, #12]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e04:	441a      	add	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	68da      	ldr	r2, [r3, #12]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d303      	bcc.n	8008e1e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68d9      	ldr	r1, [r3, #12]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e26:	461a      	mov	r2, r3
 8008e28:	6838      	ldr	r0, [r7, #0]
 8008e2a:	f001 fb81 	bl	800a530 <memcpy>
	}
}
 8008e2e:	bf00      	nop
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b084      	sub	sp, #16
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e3e:	f001 f85d 	bl	8009efc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e48:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e4a:	e011      	b.n	8008e70 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d012      	beq.n	8008e7a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	3324      	adds	r3, #36	; 0x24
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 fc6d 	bl	8009738 <xTaskRemoveFromEventList>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e64:	f000 fd40 	bl	80098e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	dce9      	bgt.n	8008e4c <prvUnlockQueue+0x16>
 8008e78:	e000      	b.n	8008e7c <prvUnlockQueue+0x46>
					break;
 8008e7a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	22ff      	movs	r2, #255	; 0xff
 8008e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e84:	f001 f868 	bl	8009f58 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e88:	f001 f838 	bl	8009efc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e92:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e94:	e011      	b.n	8008eba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d012      	beq.n	8008ec4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	3310      	adds	r3, #16
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 fc48 	bl	8009738 <xTaskRemoveFromEventList>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008eae:	f000 fd1b 	bl	80098e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008eba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	dce9      	bgt.n	8008e96 <prvUnlockQueue+0x60>
 8008ec2:	e000      	b.n	8008ec6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008ec4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	22ff      	movs	r2, #255	; 0xff
 8008eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008ece:	f001 f843 	bl	8009f58 <vPortExitCritical>
}
 8008ed2:	bf00      	nop
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b084      	sub	sp, #16
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ee2:	f001 f80b 	bl	8009efc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d102      	bne.n	8008ef4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	e001      	b.n	8008ef8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ef8:	f001 f82e 	bl	8009f58 <vPortExitCritical>

	return xReturn;
 8008efc:	68fb      	ldr	r3, [r7, #12]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b084      	sub	sp, #16
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f0e:	f000 fff5 	bl	8009efc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d102      	bne.n	8008f24 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	60fb      	str	r3, [r7, #12]
 8008f22:	e001      	b.n	8008f28 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f24:	2300      	movs	r3, #0
 8008f26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f28:	f001 f816 	bl	8009f58 <vPortExitCritical>

	return xReturn;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b08e      	sub	sp, #56	; 0x38
 8008f3a:	af04      	add	r7, sp, #16
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	607a      	str	r2, [r7, #4]
 8008f42:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d109      	bne.n	8008f5e <xTaskCreateStatic+0x28>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	623b      	str	r3, [r7, #32]
 8008f5c:	e7fe      	b.n	8008f5c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d109      	bne.n	8008f78 <xTaskCreateStatic+0x42>
 8008f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f68:	f383 8811 	msr	BASEPRI, r3
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	61fb      	str	r3, [r7, #28]
 8008f76:	e7fe      	b.n	8008f76 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f78:	2354      	movs	r3, #84	; 0x54
 8008f7a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	2b54      	cmp	r3, #84	; 0x54
 8008f80:	d009      	beq.n	8008f96 <xTaskCreateStatic+0x60>
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	61bb      	str	r3, [r7, #24]
 8008f94:	e7fe      	b.n	8008f94 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d01e      	beq.n	8008fdc <xTaskCreateStatic+0xa6>
 8008f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d01b      	beq.n	8008fdc <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	9303      	str	r3, [sp, #12]
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	9302      	str	r3, [sp, #8]
 8008fbe:	f107 0314 	add.w	r3, r7, #20
 8008fc2:	9301      	str	r3, [sp, #4]
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	68b9      	ldr	r1, [r7, #8]
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 f850 	bl	8009074 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fd6:	f000 f8d3 	bl	8009180 <prvAddNewTaskToReadyList>
 8008fda:	e001      	b.n	8008fe0 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008fe0:	697b      	ldr	r3, [r7, #20]
	}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3728      	adds	r7, #40	; 0x28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b08c      	sub	sp, #48	; 0x30
 8008fee:	af04      	add	r7, sp, #16
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	603b      	str	r3, [r7, #0]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ffa:	88fb      	ldrh	r3, [r7, #6]
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4618      	mov	r0, r3
 8009000:	f001 f896 	bl	800a130 <pvPortMalloc>
 8009004:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00e      	beq.n	800902a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800900c:	2054      	movs	r0, #84	; 0x54
 800900e:	f001 f88f 	bl	800a130 <pvPortMalloc>
 8009012:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	631a      	str	r2, [r3, #48]	; 0x30
 8009020:	e005      	b.n	800902e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009022:	6978      	ldr	r0, [r7, #20]
 8009024:	f001 f946 	bl	800a2b4 <vPortFree>
 8009028:	e001      	b.n	800902e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800902a:	2300      	movs	r3, #0
 800902c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d017      	beq.n	8009064 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800903c:	88fa      	ldrh	r2, [r7, #6]
 800903e:	2300      	movs	r3, #0
 8009040:	9303      	str	r3, [sp, #12]
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	9302      	str	r3, [sp, #8]
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	9301      	str	r3, [sp, #4]
 800904a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	68b9      	ldr	r1, [r7, #8]
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f000 f80e 	bl	8009074 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009058:	69f8      	ldr	r0, [r7, #28]
 800905a:	f000 f891 	bl	8009180 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800905e:	2301      	movs	r3, #1
 8009060:	61bb      	str	r3, [r7, #24]
 8009062:	e002      	b.n	800906a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009068:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800906a:	69bb      	ldr	r3, [r7, #24]
	}
 800906c:	4618      	mov	r0, r3
 800906e:	3720      	adds	r7, #32
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b088      	sub	sp, #32
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
 8009080:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800908c:	3b01      	subs	r3, #1
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	f023 0307 	bic.w	r3, r3, #7
 800909a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	f003 0307 	and.w	r3, r3, #7
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d009      	beq.n	80090ba <prvInitialiseNewTask+0x46>
 80090a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	e7fe      	b.n	80090b8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d01f      	beq.n	8009100 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090c0:	2300      	movs	r3, #0
 80090c2:	61fb      	str	r3, [r7, #28]
 80090c4:	e012      	b.n	80090ec <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	4413      	add	r3, r2
 80090cc:	7819      	ldrb	r1, [r3, #0]
 80090ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	4413      	add	r3, r2
 80090d4:	3334      	adds	r3, #52	; 0x34
 80090d6:	460a      	mov	r2, r1
 80090d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80090da:	68ba      	ldr	r2, [r7, #8]
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	4413      	add	r3, r2
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d006      	beq.n	80090f4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	3301      	adds	r3, #1
 80090ea:	61fb      	str	r3, [r7, #28]
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	2b0f      	cmp	r3, #15
 80090f0:	d9e9      	bls.n	80090c6 <prvInitialiseNewTask+0x52>
 80090f2:	e000      	b.n	80090f6 <prvInitialiseNewTask+0x82>
			{
				break;
 80090f4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090fe:	e003      	b.n	8009108 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910a:	2b06      	cmp	r3, #6
 800910c:	d901      	bls.n	8009112 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800910e:	2306      	movs	r3, #6
 8009110:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009116:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800911c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009120:	2200      	movs	r2, #0
 8009122:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009126:	3304      	adds	r3, #4
 8009128:	4618      	mov	r0, r3
 800912a:	f7ff f9b2 	bl	8008492 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800912e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009130:	3318      	adds	r3, #24
 8009132:	4618      	mov	r0, r3
 8009134:	f7ff f9ad 	bl	8008492 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800913c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800913e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009140:	f1c3 0207 	rsb	r2, r3, #7
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800914c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800914e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009150:	2200      	movs	r2, #0
 8009152:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	68f9      	ldr	r1, [r7, #12]
 8009160:	69b8      	ldr	r0, [r7, #24]
 8009162:	f000 fda7 	bl	8009cb4 <pxPortInitialiseStack>
 8009166:	4602      	mov	r2, r0
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800916c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916e:	2b00      	cmp	r3, #0
 8009170:	d002      	beq.n	8009178 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009176:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009178:	bf00      	nop
 800917a:	3720      	adds	r7, #32
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009188:	f000 feb8 	bl	8009efc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800918c:	4b2a      	ldr	r3, [pc, #168]	; (8009238 <prvAddNewTaskToReadyList+0xb8>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3301      	adds	r3, #1
 8009192:	4a29      	ldr	r2, [pc, #164]	; (8009238 <prvAddNewTaskToReadyList+0xb8>)
 8009194:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009196:	4b29      	ldr	r3, [pc, #164]	; (800923c <prvAddNewTaskToReadyList+0xbc>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d109      	bne.n	80091b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800919e:	4a27      	ldr	r2, [pc, #156]	; (800923c <prvAddNewTaskToReadyList+0xbc>)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091a4:	4b24      	ldr	r3, [pc, #144]	; (8009238 <prvAddNewTaskToReadyList+0xb8>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d110      	bne.n	80091ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091ac:	f000 fbc0 	bl	8009930 <prvInitialiseTaskLists>
 80091b0:	e00d      	b.n	80091ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80091b2:	4b23      	ldr	r3, [pc, #140]	; (8009240 <prvAddNewTaskToReadyList+0xc0>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d109      	bne.n	80091ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80091ba:	4b20      	ldr	r3, [pc, #128]	; (800923c <prvAddNewTaskToReadyList+0xbc>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d802      	bhi.n	80091ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80091c8:	4a1c      	ldr	r2, [pc, #112]	; (800923c <prvAddNewTaskToReadyList+0xbc>)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80091ce:	4b1d      	ldr	r3, [pc, #116]	; (8009244 <prvAddNewTaskToReadyList+0xc4>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3301      	adds	r3, #1
 80091d4:	4a1b      	ldr	r2, [pc, #108]	; (8009244 <prvAddNewTaskToReadyList+0xc4>)
 80091d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091dc:	2201      	movs	r2, #1
 80091de:	409a      	lsls	r2, r3
 80091e0:	4b19      	ldr	r3, [pc, #100]	; (8009248 <prvAddNewTaskToReadyList+0xc8>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	4a18      	ldr	r2, [pc, #96]	; (8009248 <prvAddNewTaskToReadyList+0xc8>)
 80091e8:	6013      	str	r3, [r2, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ee:	4613      	mov	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4413      	add	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4a15      	ldr	r2, [pc, #84]	; (800924c <prvAddNewTaskToReadyList+0xcc>)
 80091f8:	441a      	add	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	3304      	adds	r3, #4
 80091fe:	4619      	mov	r1, r3
 8009200:	4610      	mov	r0, r2
 8009202:	f7ff f953 	bl	80084ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009206:	f000 fea7 	bl	8009f58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800920a:	4b0d      	ldr	r3, [pc, #52]	; (8009240 <prvAddNewTaskToReadyList+0xc0>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00e      	beq.n	8009230 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009212:	4b0a      	ldr	r3, [pc, #40]	; (800923c <prvAddNewTaskToReadyList+0xbc>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921c:	429a      	cmp	r2, r3
 800921e:	d207      	bcs.n	8009230 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009220:	4b0b      	ldr	r3, [pc, #44]	; (8009250 <prvAddNewTaskToReadyList+0xd0>)
 8009222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009226:	601a      	str	r2, [r3, #0]
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	200003e8 	.word	0x200003e8
 800923c:	200002e8 	.word	0x200002e8
 8009240:	200003f4 	.word	0x200003f4
 8009244:	20000404 	.word	0x20000404
 8009248:	200003f0 	.word	0x200003f0
 800924c:	200002ec 	.word	0x200002ec
 8009250:	e000ed04 	.word	0xe000ed04

08009254 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800925c:	2300      	movs	r3, #0
 800925e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d016      	beq.n	8009294 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009266:	4b13      	ldr	r3, [pc, #76]	; (80092b4 <vTaskDelay+0x60>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d009      	beq.n	8009282 <vTaskDelay+0x2e>
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	60bb      	str	r3, [r7, #8]
 8009280:	e7fe      	b.n	8009280 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009282:	f000 f879 	bl	8009378 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009286:	2100      	movs	r1, #0
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 fcad 	bl	8009be8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800928e:	f000 f881 	bl	8009394 <xTaskResumeAll>
 8009292:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d107      	bne.n	80092aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800929a:	4b07      	ldr	r3, [pc, #28]	; (80092b8 <vTaskDelay+0x64>)
 800929c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092a0:	601a      	str	r2, [r3, #0]
 80092a2:	f3bf 8f4f 	dsb	sy
 80092a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092aa:	bf00      	nop
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	20000410 	.word	0x20000410
 80092b8:	e000ed04 	.word	0xe000ed04

080092bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b08a      	sub	sp, #40	; 0x28
 80092c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80092c2:	2300      	movs	r3, #0
 80092c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80092c6:	2300      	movs	r3, #0
 80092c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092ca:	463a      	mov	r2, r7
 80092cc:	1d39      	adds	r1, r7, #4
 80092ce:	f107 0308 	add.w	r3, r7, #8
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7f7 fe08 	bl	8000ee8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	9202      	str	r2, [sp, #8]
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	2300      	movs	r3, #0
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	2300      	movs	r3, #0
 80092e8:	460a      	mov	r2, r1
 80092ea:	491d      	ldr	r1, [pc, #116]	; (8009360 <vTaskStartScheduler+0xa4>)
 80092ec:	481d      	ldr	r0, [pc, #116]	; (8009364 <vTaskStartScheduler+0xa8>)
 80092ee:	f7ff fe22 	bl	8008f36 <xTaskCreateStatic>
 80092f2:	4602      	mov	r2, r0
 80092f4:	4b1c      	ldr	r3, [pc, #112]	; (8009368 <vTaskStartScheduler+0xac>)
 80092f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80092f8:	4b1b      	ldr	r3, [pc, #108]	; (8009368 <vTaskStartScheduler+0xac>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009300:	2301      	movs	r3, #1
 8009302:	617b      	str	r3, [r7, #20]
 8009304:	e001      	b.n	800930a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009306:	2300      	movs	r3, #0
 8009308:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d115      	bne.n	800933c <vTaskStartScheduler+0x80>
 8009310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009322:	4b12      	ldr	r3, [pc, #72]	; (800936c <vTaskStartScheduler+0xb0>)
 8009324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009328:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800932a:	4b11      	ldr	r3, [pc, #68]	; (8009370 <vTaskStartScheduler+0xb4>)
 800932c:	2201      	movs	r2, #1
 800932e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009330:	4b10      	ldr	r3, [pc, #64]	; (8009374 <vTaskStartScheduler+0xb8>)
 8009332:	2200      	movs	r2, #0
 8009334:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009336:	f000 fd43 	bl	8009dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800933a:	e00d      	b.n	8009358 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009342:	d109      	bne.n	8009358 <vTaskStartScheduler+0x9c>
 8009344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	60fb      	str	r3, [r7, #12]
 8009356:	e7fe      	b.n	8009356 <vTaskStartScheduler+0x9a>
}
 8009358:	bf00      	nop
 800935a:	3718      	adds	r7, #24
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	0800b204 	.word	0x0800b204
 8009364:	08009901 	.word	0x08009901
 8009368:	2000040c 	.word	0x2000040c
 800936c:	20000408 	.word	0x20000408
 8009370:	200003f4 	.word	0x200003f4
 8009374:	200003ec 	.word	0x200003ec

08009378 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009378:	b480      	push	{r7}
 800937a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800937c:	4b04      	ldr	r3, [pc, #16]	; (8009390 <vTaskSuspendAll+0x18>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3301      	adds	r3, #1
 8009382:	4a03      	ldr	r2, [pc, #12]	; (8009390 <vTaskSuspendAll+0x18>)
 8009384:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009386:	bf00      	nop
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	20000410 	.word	0x20000410

08009394 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800939a:	2300      	movs	r3, #0
 800939c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800939e:	2300      	movs	r3, #0
 80093a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093a2:	4b41      	ldr	r3, [pc, #260]	; (80094a8 <xTaskResumeAll+0x114>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d109      	bne.n	80093be <xTaskResumeAll+0x2a>
 80093aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ae:	f383 8811 	msr	BASEPRI, r3
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	603b      	str	r3, [r7, #0]
 80093bc:	e7fe      	b.n	80093bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093be:	f000 fd9d 	bl	8009efc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093c2:	4b39      	ldr	r3, [pc, #228]	; (80094a8 <xTaskResumeAll+0x114>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	3b01      	subs	r3, #1
 80093c8:	4a37      	ldr	r2, [pc, #220]	; (80094a8 <xTaskResumeAll+0x114>)
 80093ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093cc:	4b36      	ldr	r3, [pc, #216]	; (80094a8 <xTaskResumeAll+0x114>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d161      	bne.n	8009498 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80093d4:	4b35      	ldr	r3, [pc, #212]	; (80094ac <xTaskResumeAll+0x118>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d05d      	beq.n	8009498 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093dc:	e02e      	b.n	800943c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093de:	4b34      	ldr	r3, [pc, #208]	; (80094b0 <xTaskResumeAll+0x11c>)
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3318      	adds	r3, #24
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7ff f8bb 	bl	8008566 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	3304      	adds	r3, #4
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7ff f8b6 	bl	8008566 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fe:	2201      	movs	r2, #1
 8009400:	409a      	lsls	r2, r3
 8009402:	4b2c      	ldr	r3, [pc, #176]	; (80094b4 <xTaskResumeAll+0x120>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4313      	orrs	r3, r2
 8009408:	4a2a      	ldr	r2, [pc, #168]	; (80094b4 <xTaskResumeAll+0x120>)
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009410:	4613      	mov	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4413      	add	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4a27      	ldr	r2, [pc, #156]	; (80094b8 <xTaskResumeAll+0x124>)
 800941a:	441a      	add	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3304      	adds	r3, #4
 8009420:	4619      	mov	r1, r3
 8009422:	4610      	mov	r0, r2
 8009424:	f7ff f842 	bl	80084ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800942c:	4b23      	ldr	r3, [pc, #140]	; (80094bc <xTaskResumeAll+0x128>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009432:	429a      	cmp	r2, r3
 8009434:	d302      	bcc.n	800943c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8009436:	4b22      	ldr	r3, [pc, #136]	; (80094c0 <xTaskResumeAll+0x12c>)
 8009438:	2201      	movs	r2, #1
 800943a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800943c:	4b1c      	ldr	r3, [pc, #112]	; (80094b0 <xTaskResumeAll+0x11c>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1cc      	bne.n	80093de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800944a:	f000 fb0b 	bl	8009a64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800944e:	4b1d      	ldr	r3, [pc, #116]	; (80094c4 <xTaskResumeAll+0x130>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d010      	beq.n	800947c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800945a:	f000 f837 	bl	80094cc <xTaskIncrementTick>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009464:	4b16      	ldr	r3, [pc, #88]	; (80094c0 <xTaskResumeAll+0x12c>)
 8009466:	2201      	movs	r2, #1
 8009468:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	3b01      	subs	r3, #1
 800946e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1f1      	bne.n	800945a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8009476:	4b13      	ldr	r3, [pc, #76]	; (80094c4 <xTaskResumeAll+0x130>)
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800947c:	4b10      	ldr	r3, [pc, #64]	; (80094c0 <xTaskResumeAll+0x12c>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d009      	beq.n	8009498 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009484:	2301      	movs	r3, #1
 8009486:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009488:	4b0f      	ldr	r3, [pc, #60]	; (80094c8 <xTaskResumeAll+0x134>)
 800948a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009498:	f000 fd5e 	bl	8009f58 <vPortExitCritical>

	return xAlreadyYielded;
 800949c:	68bb      	ldr	r3, [r7, #8]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	20000410 	.word	0x20000410
 80094ac:	200003e8 	.word	0x200003e8
 80094b0:	200003a8 	.word	0x200003a8
 80094b4:	200003f0 	.word	0x200003f0
 80094b8:	200002ec 	.word	0x200002ec
 80094bc:	200002e8 	.word	0x200002e8
 80094c0:	200003fc 	.word	0x200003fc
 80094c4:	200003f8 	.word	0x200003f8
 80094c8:	e000ed04 	.word	0xe000ed04

080094cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80094d2:	2300      	movs	r3, #0
 80094d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094d6:	4b4e      	ldr	r3, [pc, #312]	; (8009610 <xTaskIncrementTick+0x144>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f040 8087 	bne.w	80095ee <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094e0:	4b4c      	ldr	r3, [pc, #304]	; (8009614 <xTaskIncrementTick+0x148>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	3301      	adds	r3, #1
 80094e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80094e8:	4a4a      	ldr	r2, [pc, #296]	; (8009614 <xTaskIncrementTick+0x148>)
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d11f      	bne.n	8009534 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80094f4:	4b48      	ldr	r3, [pc, #288]	; (8009618 <xTaskIncrementTick+0x14c>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d009      	beq.n	8009512 <xTaskIncrementTick+0x46>
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	603b      	str	r3, [r7, #0]
 8009510:	e7fe      	b.n	8009510 <xTaskIncrementTick+0x44>
 8009512:	4b41      	ldr	r3, [pc, #260]	; (8009618 <xTaskIncrementTick+0x14c>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	60fb      	str	r3, [r7, #12]
 8009518:	4b40      	ldr	r3, [pc, #256]	; (800961c <xTaskIncrementTick+0x150>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a3e      	ldr	r2, [pc, #248]	; (8009618 <xTaskIncrementTick+0x14c>)
 800951e:	6013      	str	r3, [r2, #0]
 8009520:	4a3e      	ldr	r2, [pc, #248]	; (800961c <xTaskIncrementTick+0x150>)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6013      	str	r3, [r2, #0]
 8009526:	4b3e      	ldr	r3, [pc, #248]	; (8009620 <xTaskIncrementTick+0x154>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	3301      	adds	r3, #1
 800952c:	4a3c      	ldr	r2, [pc, #240]	; (8009620 <xTaskIncrementTick+0x154>)
 800952e:	6013      	str	r3, [r2, #0]
 8009530:	f000 fa98 	bl	8009a64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009534:	4b3b      	ldr	r3, [pc, #236]	; (8009624 <xTaskIncrementTick+0x158>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	429a      	cmp	r2, r3
 800953c:	d348      	bcc.n	80095d0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800953e:	4b36      	ldr	r3, [pc, #216]	; (8009618 <xTaskIncrementTick+0x14c>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d104      	bne.n	8009552 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009548:	4b36      	ldr	r3, [pc, #216]	; (8009624 <xTaskIncrementTick+0x158>)
 800954a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800954e:	601a      	str	r2, [r3, #0]
					break;
 8009550:	e03e      	b.n	80095d0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009552:	4b31      	ldr	r3, [pc, #196]	; (8009618 <xTaskIncrementTick+0x14c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	429a      	cmp	r2, r3
 8009568:	d203      	bcs.n	8009572 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800956a:	4a2e      	ldr	r2, [pc, #184]	; (8009624 <xTaskIncrementTick+0x158>)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009570:	e02e      	b.n	80095d0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	3304      	adds	r3, #4
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe fff5 	bl	8008566 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009580:	2b00      	cmp	r3, #0
 8009582:	d004      	beq.n	800958e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	3318      	adds	r3, #24
 8009588:	4618      	mov	r0, r3
 800958a:	f7fe ffec 	bl	8008566 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009592:	2201      	movs	r2, #1
 8009594:	409a      	lsls	r2, r3
 8009596:	4b24      	ldr	r3, [pc, #144]	; (8009628 <xTaskIncrementTick+0x15c>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4313      	orrs	r3, r2
 800959c:	4a22      	ldr	r2, [pc, #136]	; (8009628 <xTaskIncrementTick+0x15c>)
 800959e:	6013      	str	r3, [r2, #0]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a4:	4613      	mov	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	4a1f      	ldr	r2, [pc, #124]	; (800962c <xTaskIncrementTick+0x160>)
 80095ae:	441a      	add	r2, r3
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	3304      	adds	r3, #4
 80095b4:	4619      	mov	r1, r3
 80095b6:	4610      	mov	r0, r2
 80095b8:	f7fe ff78 	bl	80084ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c0:	4b1b      	ldr	r3, [pc, #108]	; (8009630 <xTaskIncrementTick+0x164>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d3b9      	bcc.n	800953e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80095ca:	2301      	movs	r3, #1
 80095cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095ce:	e7b6      	b.n	800953e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80095d0:	4b17      	ldr	r3, [pc, #92]	; (8009630 <xTaskIncrementTick+0x164>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d6:	4915      	ldr	r1, [pc, #84]	; (800962c <xTaskIncrementTick+0x160>)
 80095d8:	4613      	mov	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	440b      	add	r3, r1
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d907      	bls.n	80095f8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80095e8:	2301      	movs	r3, #1
 80095ea:	617b      	str	r3, [r7, #20]
 80095ec:	e004      	b.n	80095f8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80095ee:	4b11      	ldr	r3, [pc, #68]	; (8009634 <xTaskIncrementTick+0x168>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3301      	adds	r3, #1
 80095f4:	4a0f      	ldr	r2, [pc, #60]	; (8009634 <xTaskIncrementTick+0x168>)
 80095f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80095f8:	4b0f      	ldr	r3, [pc, #60]	; (8009638 <xTaskIncrementTick+0x16c>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009600:	2301      	movs	r3, #1
 8009602:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009604:	697b      	ldr	r3, [r7, #20]
}
 8009606:	4618      	mov	r0, r3
 8009608:	3718      	adds	r7, #24
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	20000410 	.word	0x20000410
 8009614:	200003ec 	.word	0x200003ec
 8009618:	200003a0 	.word	0x200003a0
 800961c:	200003a4 	.word	0x200003a4
 8009620:	20000400 	.word	0x20000400
 8009624:	20000408 	.word	0x20000408
 8009628:	200003f0 	.word	0x200003f0
 800962c:	200002ec 	.word	0x200002ec
 8009630:	200002e8 	.word	0x200002e8
 8009634:	200003f8 	.word	0x200003f8
 8009638:	200003fc 	.word	0x200003fc

0800963c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800963c:	b480      	push	{r7}
 800963e:	b087      	sub	sp, #28
 8009640:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009642:	4b26      	ldr	r3, [pc, #152]	; (80096dc <vTaskSwitchContext+0xa0>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d003      	beq.n	8009652 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800964a:	4b25      	ldr	r3, [pc, #148]	; (80096e0 <vTaskSwitchContext+0xa4>)
 800964c:	2201      	movs	r2, #1
 800964e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009650:	e03e      	b.n	80096d0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8009652:	4b23      	ldr	r3, [pc, #140]	; (80096e0 <vTaskSwitchContext+0xa4>)
 8009654:	2200      	movs	r2, #0
 8009656:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009658:	4b22      	ldr	r3, [pc, #136]	; (80096e4 <vTaskSwitchContext+0xa8>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	fab3 f383 	clz	r3, r3
 8009664:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009666:	7afb      	ldrb	r3, [r7, #11]
 8009668:	f1c3 031f 	rsb	r3, r3, #31
 800966c:	617b      	str	r3, [r7, #20]
 800966e:	491e      	ldr	r1, [pc, #120]	; (80096e8 <vTaskSwitchContext+0xac>)
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	4613      	mov	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	440b      	add	r3, r1
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d109      	bne.n	8009696 <vTaskSwitchContext+0x5a>
	__asm volatile
 8009682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009686:	f383 8811 	msr	BASEPRI, r3
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	607b      	str	r3, [r7, #4]
 8009694:	e7fe      	b.n	8009694 <vTaskSwitchContext+0x58>
 8009696:	697a      	ldr	r2, [r7, #20]
 8009698:	4613      	mov	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4a11      	ldr	r2, [pc, #68]	; (80096e8 <vTaskSwitchContext+0xac>)
 80096a2:	4413      	add	r3, r2
 80096a4:	613b      	str	r3, [r7, #16]
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	605a      	str	r2, [r3, #4]
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	685a      	ldr	r2, [r3, #4]
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	3308      	adds	r3, #8
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d104      	bne.n	80096c6 <vTaskSwitchContext+0x8a>
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	685a      	ldr	r2, [r3, #4]
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	605a      	str	r2, [r3, #4]
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	4a07      	ldr	r2, [pc, #28]	; (80096ec <vTaskSwitchContext+0xb0>)
 80096ce:	6013      	str	r3, [r2, #0]
}
 80096d0:	bf00      	nop
 80096d2:	371c      	adds	r7, #28
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	20000410 	.word	0x20000410
 80096e0:	200003fc 	.word	0x200003fc
 80096e4:	200003f0 	.word	0x200003f0
 80096e8:	200002ec 	.word	0x200002ec
 80096ec:	200002e8 	.word	0x200002e8

080096f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d109      	bne.n	8009714 <vTaskPlaceOnEventList+0x24>
 8009700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	60fb      	str	r3, [r7, #12]
 8009712:	e7fe      	b.n	8009712 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009714:	4b07      	ldr	r3, [pc, #28]	; (8009734 <vTaskPlaceOnEventList+0x44>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	3318      	adds	r3, #24
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f7fe fee9 	bl	80084f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009722:	2101      	movs	r1, #1
 8009724:	6838      	ldr	r0, [r7, #0]
 8009726:	f000 fa5f 	bl	8009be8 <prvAddCurrentTaskToDelayedList>
}
 800972a:	bf00      	nop
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	200002e8 	.word	0x200002e8

08009738 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d109      	bne.n	8009762 <xTaskRemoveFromEventList+0x2a>
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	60fb      	str	r3, [r7, #12]
 8009760:	e7fe      	b.n	8009760 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	3318      	adds	r3, #24
 8009766:	4618      	mov	r0, r3
 8009768:	f7fe fefd 	bl	8008566 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800976c:	4b1d      	ldr	r3, [pc, #116]	; (80097e4 <xTaskRemoveFromEventList+0xac>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d11c      	bne.n	80097ae <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	3304      	adds	r3, #4
 8009778:	4618      	mov	r0, r3
 800977a:	f7fe fef4 	bl	8008566 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009782:	2201      	movs	r2, #1
 8009784:	409a      	lsls	r2, r3
 8009786:	4b18      	ldr	r3, [pc, #96]	; (80097e8 <xTaskRemoveFromEventList+0xb0>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4313      	orrs	r3, r2
 800978c:	4a16      	ldr	r2, [pc, #88]	; (80097e8 <xTaskRemoveFromEventList+0xb0>)
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009794:	4613      	mov	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	4a13      	ldr	r2, [pc, #76]	; (80097ec <xTaskRemoveFromEventList+0xb4>)
 800979e:	441a      	add	r2, r3
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	3304      	adds	r3, #4
 80097a4:	4619      	mov	r1, r3
 80097a6:	4610      	mov	r0, r2
 80097a8:	f7fe fe80 	bl	80084ac <vListInsertEnd>
 80097ac:	e005      	b.n	80097ba <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	3318      	adds	r3, #24
 80097b2:	4619      	mov	r1, r3
 80097b4:	480e      	ldr	r0, [pc, #56]	; (80097f0 <xTaskRemoveFromEventList+0xb8>)
 80097b6:	f7fe fe79 	bl	80084ac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097be:	4b0d      	ldr	r3, [pc, #52]	; (80097f4 <xTaskRemoveFromEventList+0xbc>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d905      	bls.n	80097d4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80097c8:	2301      	movs	r3, #1
 80097ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80097cc:	4b0a      	ldr	r3, [pc, #40]	; (80097f8 <xTaskRemoveFromEventList+0xc0>)
 80097ce:	2201      	movs	r2, #1
 80097d0:	601a      	str	r2, [r3, #0]
 80097d2:	e001      	b.n	80097d8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80097d4:	2300      	movs	r3, #0
 80097d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097d8:	697b      	ldr	r3, [r7, #20]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3718      	adds	r7, #24
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20000410 	.word	0x20000410
 80097e8:	200003f0 	.word	0x200003f0
 80097ec:	200002ec 	.word	0x200002ec
 80097f0:	200003a8 	.word	0x200003a8
 80097f4:	200002e8 	.word	0x200002e8
 80097f8:	200003fc 	.word	0x200003fc

080097fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009804:	4b06      	ldr	r3, [pc, #24]	; (8009820 <vTaskInternalSetTimeOutState+0x24>)
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800980c:	4b05      	ldr	r3, [pc, #20]	; (8009824 <vTaskInternalSetTimeOutState+0x28>)
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	605a      	str	r2, [r3, #4]
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	20000400 	.word	0x20000400
 8009824:	200003ec 	.word	0x200003ec

08009828 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d109      	bne.n	800984c <xTaskCheckForTimeOut+0x24>
 8009838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	613b      	str	r3, [r7, #16]
 800984a:	e7fe      	b.n	800984a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d109      	bne.n	8009866 <xTaskCheckForTimeOut+0x3e>
 8009852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	60fb      	str	r3, [r7, #12]
 8009864:	e7fe      	b.n	8009864 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009866:	f000 fb49 	bl	8009efc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800986a:	4b1d      	ldr	r3, [pc, #116]	; (80098e0 <xTaskCheckForTimeOut+0xb8>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	69ba      	ldr	r2, [r7, #24]
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009882:	d102      	bne.n	800988a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009884:	2300      	movs	r3, #0
 8009886:	61fb      	str	r3, [r7, #28]
 8009888:	e023      	b.n	80098d2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	4b15      	ldr	r3, [pc, #84]	; (80098e4 <xTaskCheckForTimeOut+0xbc>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	429a      	cmp	r2, r3
 8009894:	d007      	beq.n	80098a6 <xTaskCheckForTimeOut+0x7e>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	69ba      	ldr	r2, [r7, #24]
 800989c:	429a      	cmp	r2, r3
 800989e:	d302      	bcc.n	80098a6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80098a0:	2301      	movs	r3, #1
 80098a2:	61fb      	str	r3, [r7, #28]
 80098a4:	e015      	b.n	80098d2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d20b      	bcs.n	80098c8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	1ad2      	subs	r2, r2, r3
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7ff ff9d 	bl	80097fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80098c2:	2300      	movs	r3, #0
 80098c4:	61fb      	str	r3, [r7, #28]
 80098c6:	e004      	b.n	80098d2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2200      	movs	r2, #0
 80098cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80098ce:	2301      	movs	r3, #1
 80098d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80098d2:	f000 fb41 	bl	8009f58 <vPortExitCritical>

	return xReturn;
 80098d6:	69fb      	ldr	r3, [r7, #28]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3720      	adds	r7, #32
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	200003ec 	.word	0x200003ec
 80098e4:	20000400 	.word	0x20000400

080098e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098e8:	b480      	push	{r7}
 80098ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80098ec:	4b03      	ldr	r3, [pc, #12]	; (80098fc <vTaskMissedYield+0x14>)
 80098ee:	2201      	movs	r2, #1
 80098f0:	601a      	str	r2, [r3, #0]
}
 80098f2:	bf00      	nop
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	200003fc 	.word	0x200003fc

08009900 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009908:	f000 f852 	bl	80099b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800990c:	4b06      	ldr	r3, [pc, #24]	; (8009928 <prvIdleTask+0x28>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d9f9      	bls.n	8009908 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009914:	4b05      	ldr	r3, [pc, #20]	; (800992c <prvIdleTask+0x2c>)
 8009916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009924:	e7f0      	b.n	8009908 <prvIdleTask+0x8>
 8009926:	bf00      	nop
 8009928:	200002ec 	.word	0x200002ec
 800992c:	e000ed04 	.word	0xe000ed04

08009930 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009936:	2300      	movs	r3, #0
 8009938:	607b      	str	r3, [r7, #4]
 800993a:	e00c      	b.n	8009956 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	4613      	mov	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4a12      	ldr	r2, [pc, #72]	; (8009990 <prvInitialiseTaskLists+0x60>)
 8009948:	4413      	add	r3, r2
 800994a:	4618      	mov	r0, r3
 800994c:	f7fe fd81 	bl	8008452 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	3301      	adds	r3, #1
 8009954:	607b      	str	r3, [r7, #4]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b06      	cmp	r3, #6
 800995a:	d9ef      	bls.n	800993c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800995c:	480d      	ldr	r0, [pc, #52]	; (8009994 <prvInitialiseTaskLists+0x64>)
 800995e:	f7fe fd78 	bl	8008452 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009962:	480d      	ldr	r0, [pc, #52]	; (8009998 <prvInitialiseTaskLists+0x68>)
 8009964:	f7fe fd75 	bl	8008452 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009968:	480c      	ldr	r0, [pc, #48]	; (800999c <prvInitialiseTaskLists+0x6c>)
 800996a:	f7fe fd72 	bl	8008452 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800996e:	480c      	ldr	r0, [pc, #48]	; (80099a0 <prvInitialiseTaskLists+0x70>)
 8009970:	f7fe fd6f 	bl	8008452 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009974:	480b      	ldr	r0, [pc, #44]	; (80099a4 <prvInitialiseTaskLists+0x74>)
 8009976:	f7fe fd6c 	bl	8008452 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800997a:	4b0b      	ldr	r3, [pc, #44]	; (80099a8 <prvInitialiseTaskLists+0x78>)
 800997c:	4a05      	ldr	r2, [pc, #20]	; (8009994 <prvInitialiseTaskLists+0x64>)
 800997e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009980:	4b0a      	ldr	r3, [pc, #40]	; (80099ac <prvInitialiseTaskLists+0x7c>)
 8009982:	4a05      	ldr	r2, [pc, #20]	; (8009998 <prvInitialiseTaskLists+0x68>)
 8009984:	601a      	str	r2, [r3, #0]
}
 8009986:	bf00      	nop
 8009988:	3708      	adds	r7, #8
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	200002ec 	.word	0x200002ec
 8009994:	20000378 	.word	0x20000378
 8009998:	2000038c 	.word	0x2000038c
 800999c:	200003a8 	.word	0x200003a8
 80099a0:	200003bc 	.word	0x200003bc
 80099a4:	200003d4 	.word	0x200003d4
 80099a8:	200003a0 	.word	0x200003a0
 80099ac:	200003a4 	.word	0x200003a4

080099b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099b6:	e019      	b.n	80099ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80099b8:	f000 faa0 	bl	8009efc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099bc:	4b0f      	ldr	r3, [pc, #60]	; (80099fc <prvCheckTasksWaitingTermination+0x4c>)
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	3304      	adds	r3, #4
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fe fdcc 	bl	8008566 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80099ce:	4b0c      	ldr	r3, [pc, #48]	; (8009a00 <prvCheckTasksWaitingTermination+0x50>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	4a0a      	ldr	r2, [pc, #40]	; (8009a00 <prvCheckTasksWaitingTermination+0x50>)
 80099d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80099d8:	4b0a      	ldr	r3, [pc, #40]	; (8009a04 <prvCheckTasksWaitingTermination+0x54>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	3b01      	subs	r3, #1
 80099de:	4a09      	ldr	r2, [pc, #36]	; (8009a04 <prvCheckTasksWaitingTermination+0x54>)
 80099e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80099e2:	f000 fab9 	bl	8009f58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f80e 	bl	8009a08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099ec:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <prvCheckTasksWaitingTermination+0x54>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1e1      	bne.n	80099b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80099f4:	bf00      	nop
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	200003bc 	.word	0x200003bc
 8009a00:	200003e8 	.word	0x200003e8
 8009a04:	200003d0 	.word	0x200003d0

08009a08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d108      	bne.n	8009a2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 fc48 	bl	800a2b4 <vPortFree>
				vPortFree( pxTCB );
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fc45 	bl	800a2b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a2a:	e017      	b.n	8009a5c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d103      	bne.n	8009a3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fc3c 	bl	800a2b4 <vPortFree>
	}
 8009a3c:	e00e      	b.n	8009a5c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d009      	beq.n	8009a5c <prvDeleteTCB+0x54>
 8009a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4c:	f383 8811 	msr	BASEPRI, r3
 8009a50:	f3bf 8f6f 	isb	sy
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	60fb      	str	r3, [r7, #12]
 8009a5a:	e7fe      	b.n	8009a5a <prvDeleteTCB+0x52>
	}
 8009a5c:	bf00      	nop
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a6a:	4b0c      	ldr	r3, [pc, #48]	; (8009a9c <prvResetNextTaskUnblockTime+0x38>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d104      	bne.n	8009a7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a74:	4b0a      	ldr	r3, [pc, #40]	; (8009aa0 <prvResetNextTaskUnblockTime+0x3c>)
 8009a76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a7c:	e008      	b.n	8009a90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a7e:	4b07      	ldr	r3, [pc, #28]	; (8009a9c <prvResetNextTaskUnblockTime+0x38>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	4a04      	ldr	r2, [pc, #16]	; (8009aa0 <prvResetNextTaskUnblockTime+0x3c>)
 8009a8e:	6013      	str	r3, [r2, #0]
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	200003a0 	.word	0x200003a0
 8009aa0:	20000408 	.word	0x20000408

08009aa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009aaa:	4b0b      	ldr	r3, [pc, #44]	; (8009ad8 <xTaskGetSchedulerState+0x34>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d102      	bne.n	8009ab8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	607b      	str	r3, [r7, #4]
 8009ab6:	e008      	b.n	8009aca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ab8:	4b08      	ldr	r3, [pc, #32]	; (8009adc <xTaskGetSchedulerState+0x38>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d102      	bne.n	8009ac6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	607b      	str	r3, [r7, #4]
 8009ac4:	e001      	b.n	8009aca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009aca:	687b      	ldr	r3, [r7, #4]
	}
 8009acc:	4618      	mov	r0, r3
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr
 8009ad8:	200003f4 	.word	0x200003f4
 8009adc:	20000410 	.word	0x20000410

08009ae0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009aec:	2300      	movs	r3, #0
 8009aee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d06c      	beq.n	8009bd0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009af6:	4b39      	ldr	r3, [pc, #228]	; (8009bdc <xTaskPriorityDisinherit+0xfc>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d009      	beq.n	8009b14 <xTaskPriorityDisinherit+0x34>
 8009b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	60fb      	str	r3, [r7, #12]
 8009b12:	e7fe      	b.n	8009b12 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d109      	bne.n	8009b30 <xTaskPriorityDisinherit+0x50>
 8009b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	60bb      	str	r3, [r7, #8]
 8009b2e:	e7fe      	b.n	8009b2e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b34:	1e5a      	subs	r2, r3, #1
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d044      	beq.n	8009bd0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d140      	bne.n	8009bd0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	3304      	adds	r3, #4
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fe fd07 	bl	8008566 <uxListRemove>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d115      	bne.n	8009b8a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b62:	491f      	ldr	r1, [pc, #124]	; (8009be0 <xTaskPriorityDisinherit+0x100>)
 8009b64:	4613      	mov	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	440b      	add	r3, r1
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <xTaskPriorityDisinherit+0xaa>
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b78:	2201      	movs	r2, #1
 8009b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7e:	43da      	mvns	r2, r3
 8009b80:	4b18      	ldr	r3, [pc, #96]	; (8009be4 <xTaskPriorityDisinherit+0x104>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4013      	ands	r3, r2
 8009b86:	4a17      	ldr	r2, [pc, #92]	; (8009be4 <xTaskPriorityDisinherit+0x104>)
 8009b88:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b96:	f1c3 0207 	rsb	r2, r3, #7
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	409a      	lsls	r2, r3
 8009ba6:	4b0f      	ldr	r3, [pc, #60]	; (8009be4 <xTaskPriorityDisinherit+0x104>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	4a0d      	ldr	r2, [pc, #52]	; (8009be4 <xTaskPriorityDisinherit+0x104>)
 8009bae:	6013      	str	r3, [r2, #0]
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4a08      	ldr	r2, [pc, #32]	; (8009be0 <xTaskPriorityDisinherit+0x100>)
 8009bbe:	441a      	add	r2, r3
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	3304      	adds	r3, #4
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	f7fe fc70 	bl	80084ac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bd0:	697b      	ldr	r3, [r7, #20]
	}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3718      	adds	r7, #24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	200002e8 	.word	0x200002e8
 8009be0:	200002ec 	.word	0x200002ec
 8009be4:	200003f0 	.word	0x200003f0

08009be8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009bf2:	4b29      	ldr	r3, [pc, #164]	; (8009c98 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bf8:	4b28      	ldr	r3, [pc, #160]	; (8009c9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fe fcb1 	bl	8008566 <uxListRemove>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10b      	bne.n	8009c22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009c0a:	4b24      	ldr	r3, [pc, #144]	; (8009c9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c10:	2201      	movs	r2, #1
 8009c12:	fa02 f303 	lsl.w	r3, r2, r3
 8009c16:	43da      	mvns	r2, r3
 8009c18:	4b21      	ldr	r3, [pc, #132]	; (8009ca0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	4a20      	ldr	r2, [pc, #128]	; (8009ca0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c28:	d10a      	bne.n	8009c40 <prvAddCurrentTaskToDelayedList+0x58>
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d007      	beq.n	8009c40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c30:	4b1a      	ldr	r3, [pc, #104]	; (8009c9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	3304      	adds	r3, #4
 8009c36:	4619      	mov	r1, r3
 8009c38:	481a      	ldr	r0, [pc, #104]	; (8009ca4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009c3a:	f7fe fc37 	bl	80084ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c3e:	e026      	b.n	8009c8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4413      	add	r3, r2
 8009c46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c48:	4b14      	ldr	r3, [pc, #80]	; (8009c9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d209      	bcs.n	8009c6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c58:	4b13      	ldr	r3, [pc, #76]	; (8009ca8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	4b0f      	ldr	r3, [pc, #60]	; (8009c9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3304      	adds	r3, #4
 8009c62:	4619      	mov	r1, r3
 8009c64:	4610      	mov	r0, r2
 8009c66:	f7fe fc45 	bl	80084f4 <vListInsert>
}
 8009c6a:	e010      	b.n	8009c8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c6c:	4b0f      	ldr	r3, [pc, #60]	; (8009cac <prvAddCurrentTaskToDelayedList+0xc4>)
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	4b0a      	ldr	r3, [pc, #40]	; (8009c9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3304      	adds	r3, #4
 8009c76:	4619      	mov	r1, r3
 8009c78:	4610      	mov	r0, r2
 8009c7a:	f7fe fc3b 	bl	80084f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c7e:	4b0c      	ldr	r3, [pc, #48]	; (8009cb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d202      	bcs.n	8009c8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009c88:	4a09      	ldr	r2, [pc, #36]	; (8009cb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	6013      	str	r3, [r2, #0]
}
 8009c8e:	bf00      	nop
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	200003ec 	.word	0x200003ec
 8009c9c:	200002e8 	.word	0x200002e8
 8009ca0:	200003f0 	.word	0x200003f0
 8009ca4:	200003d4 	.word	0x200003d4
 8009ca8:	200003a4 	.word	0x200003a4
 8009cac:	200003a0 	.word	0x200003a0
 8009cb0:	20000408 	.word	0x20000408

08009cb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	3b04      	subs	r3, #4
 8009cc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ccc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	3b04      	subs	r3, #4
 8009cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	f023 0201 	bic.w	r2, r3, #1
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	3b04      	subs	r3, #4
 8009ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ce4:	4a0c      	ldr	r2, [pc, #48]	; (8009d18 <pxPortInitialiseStack+0x64>)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	3b14      	subs	r3, #20
 8009cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	3b04      	subs	r3, #4
 8009cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f06f 0202 	mvn.w	r2, #2
 8009d02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	3b20      	subs	r3, #32
 8009d08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	08009d1d 	.word	0x08009d1d

08009d1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d22:	2300      	movs	r3, #0
 8009d24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d26:	4b11      	ldr	r3, [pc, #68]	; (8009d6c <prvTaskExitError+0x50>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d2e:	d009      	beq.n	8009d44 <prvTaskExitError+0x28>
 8009d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	60fb      	str	r3, [r7, #12]
 8009d42:	e7fe      	b.n	8009d42 <prvTaskExitError+0x26>
 8009d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d48:	f383 8811 	msr	BASEPRI, r3
 8009d4c:	f3bf 8f6f 	isb	sy
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d56:	bf00      	nop
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d0fc      	beq.n	8009d58 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d5e:	bf00      	nop
 8009d60:	3714      	adds	r7, #20
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	2000000c 	.word	0x2000000c

08009d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d70:	4b07      	ldr	r3, [pc, #28]	; (8009d90 <pxCurrentTCBConst2>)
 8009d72:	6819      	ldr	r1, [r3, #0]
 8009d74:	6808      	ldr	r0, [r1, #0]
 8009d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7a:	f380 8809 	msr	PSP, r0
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f04f 0000 	mov.w	r0, #0
 8009d86:	f380 8811 	msr	BASEPRI, r0
 8009d8a:	4770      	bx	lr
 8009d8c:	f3af 8000 	nop.w

08009d90 <pxCurrentTCBConst2>:
 8009d90:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d94:	bf00      	nop
 8009d96:	bf00      	nop

08009d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d98:	4808      	ldr	r0, [pc, #32]	; (8009dbc <prvPortStartFirstTask+0x24>)
 8009d9a:	6800      	ldr	r0, [r0, #0]
 8009d9c:	6800      	ldr	r0, [r0, #0]
 8009d9e:	f380 8808 	msr	MSP, r0
 8009da2:	f04f 0000 	mov.w	r0, #0
 8009da6:	f380 8814 	msr	CONTROL, r0
 8009daa:	b662      	cpsie	i
 8009dac:	b661      	cpsie	f
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	df00      	svc	0
 8009db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009dba:	bf00      	nop
 8009dbc:	e000ed08 	.word	0xe000ed08

08009dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009dc6:	4b44      	ldr	r3, [pc, #272]	; (8009ed8 <xPortStartScheduler+0x118>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a44      	ldr	r2, [pc, #272]	; (8009edc <xPortStartScheduler+0x11c>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d109      	bne.n	8009de4 <xPortStartScheduler+0x24>
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	613b      	str	r3, [r7, #16]
 8009de2:	e7fe      	b.n	8009de2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009de4:	4b3c      	ldr	r3, [pc, #240]	; (8009ed8 <xPortStartScheduler+0x118>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a3d      	ldr	r2, [pc, #244]	; (8009ee0 <xPortStartScheduler+0x120>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d109      	bne.n	8009e02 <xPortStartScheduler+0x42>
 8009dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	e7fe      	b.n	8009e00 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e02:	4b38      	ldr	r3, [pc, #224]	; (8009ee4 <xPortStartScheduler+0x124>)
 8009e04:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	22ff      	movs	r2, #255	; 0xff
 8009e12:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e1c:	78fb      	ldrb	r3, [r7, #3]
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e24:	b2da      	uxtb	r2, r3
 8009e26:	4b30      	ldr	r3, [pc, #192]	; (8009ee8 <xPortStartScheduler+0x128>)
 8009e28:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e2a:	4b30      	ldr	r3, [pc, #192]	; (8009eec <xPortStartScheduler+0x12c>)
 8009e2c:	2207      	movs	r2, #7
 8009e2e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e30:	e009      	b.n	8009e46 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009e32:	4b2e      	ldr	r3, [pc, #184]	; (8009eec <xPortStartScheduler+0x12c>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3b01      	subs	r3, #1
 8009e38:	4a2c      	ldr	r2, [pc, #176]	; (8009eec <xPortStartScheduler+0x12c>)
 8009e3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e3c:	78fb      	ldrb	r3, [r7, #3]
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	005b      	lsls	r3, r3, #1
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e46:	78fb      	ldrb	r3, [r7, #3]
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e4e:	2b80      	cmp	r3, #128	; 0x80
 8009e50:	d0ef      	beq.n	8009e32 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e52:	4b26      	ldr	r3, [pc, #152]	; (8009eec <xPortStartScheduler+0x12c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f1c3 0307 	rsb	r3, r3, #7
 8009e5a:	2b04      	cmp	r3, #4
 8009e5c:	d009      	beq.n	8009e72 <xPortStartScheduler+0xb2>
 8009e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	60bb      	str	r3, [r7, #8]
 8009e70:	e7fe      	b.n	8009e70 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e72:	4b1e      	ldr	r3, [pc, #120]	; (8009eec <xPortStartScheduler+0x12c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	021b      	lsls	r3, r3, #8
 8009e78:	4a1c      	ldr	r2, [pc, #112]	; (8009eec <xPortStartScheduler+0x12c>)
 8009e7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e7c:	4b1b      	ldr	r3, [pc, #108]	; (8009eec <xPortStartScheduler+0x12c>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e84:	4a19      	ldr	r2, [pc, #100]	; (8009eec <xPortStartScheduler+0x12c>)
 8009e86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e90:	4b17      	ldr	r3, [pc, #92]	; (8009ef0 <xPortStartScheduler+0x130>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a16      	ldr	r2, [pc, #88]	; (8009ef0 <xPortStartScheduler+0x130>)
 8009e96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e9c:	4b14      	ldr	r3, [pc, #80]	; (8009ef0 <xPortStartScheduler+0x130>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a13      	ldr	r2, [pc, #76]	; (8009ef0 <xPortStartScheduler+0x130>)
 8009ea2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009ea6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ea8:	f000 f8d6 	bl	800a058 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009eac:	4b11      	ldr	r3, [pc, #68]	; (8009ef4 <xPortStartScheduler+0x134>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009eb2:	f000 f8f5 	bl	800a0a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009eb6:	4b10      	ldr	r3, [pc, #64]	; (8009ef8 <xPortStartScheduler+0x138>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a0f      	ldr	r2, [pc, #60]	; (8009ef8 <xPortStartScheduler+0x138>)
 8009ebc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ec0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ec2:	f7ff ff69 	bl	8009d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ec6:	f7ff fbb9 	bl	800963c <vTaskSwitchContext>
	prvTaskExitError();
 8009eca:	f7ff ff27 	bl	8009d1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3718      	adds	r7, #24
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	e000ed00 	.word	0xe000ed00
 8009edc:	410fc271 	.word	0x410fc271
 8009ee0:	410fc270 	.word	0x410fc270
 8009ee4:	e000e400 	.word	0xe000e400
 8009ee8:	20000414 	.word	0x20000414
 8009eec:	20000418 	.word	0x20000418
 8009ef0:	e000ed20 	.word	0xe000ed20
 8009ef4:	2000000c 	.word	0x2000000c
 8009ef8:	e000ef34 	.word	0xe000ef34

08009efc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f14:	4b0e      	ldr	r3, [pc, #56]	; (8009f50 <vPortEnterCritical+0x54>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	4a0d      	ldr	r2, [pc, #52]	; (8009f50 <vPortEnterCritical+0x54>)
 8009f1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f1e:	4b0c      	ldr	r3, [pc, #48]	; (8009f50 <vPortEnterCritical+0x54>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d10e      	bne.n	8009f44 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f26:	4b0b      	ldr	r3, [pc, #44]	; (8009f54 <vPortEnterCritical+0x58>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d009      	beq.n	8009f44 <vPortEnterCritical+0x48>
 8009f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	603b      	str	r3, [r7, #0]
 8009f42:	e7fe      	b.n	8009f42 <vPortEnterCritical+0x46>
	}
}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	2000000c 	.word	0x2000000c
 8009f54:	e000ed04 	.word	0xe000ed04

08009f58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f5e:	4b11      	ldr	r3, [pc, #68]	; (8009fa4 <vPortExitCritical+0x4c>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d109      	bne.n	8009f7a <vPortExitCritical+0x22>
 8009f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6a:	f383 8811 	msr	BASEPRI, r3
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f3bf 8f4f 	dsb	sy
 8009f76:	607b      	str	r3, [r7, #4]
 8009f78:	e7fe      	b.n	8009f78 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009f7a:	4b0a      	ldr	r3, [pc, #40]	; (8009fa4 <vPortExitCritical+0x4c>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	4a08      	ldr	r2, [pc, #32]	; (8009fa4 <vPortExitCritical+0x4c>)
 8009f82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f84:	4b07      	ldr	r3, [pc, #28]	; (8009fa4 <vPortExitCritical+0x4c>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d104      	bne.n	8009f96 <vPortExitCritical+0x3e>
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f96:	bf00      	nop
 8009f98:	370c      	adds	r7, #12
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	2000000c 	.word	0x2000000c
	...

08009fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009fb0:	f3ef 8009 	mrs	r0, PSP
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	4b15      	ldr	r3, [pc, #84]	; (800a010 <pxCurrentTCBConst>)
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	f01e 0f10 	tst.w	lr, #16
 8009fc0:	bf08      	it	eq
 8009fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fca:	6010      	str	r0, [r2, #0]
 8009fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009fd4:	f380 8811 	msr	BASEPRI, r0
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f7ff fb2c 	bl	800963c <vTaskSwitchContext>
 8009fe4:	f04f 0000 	mov.w	r0, #0
 8009fe8:	f380 8811 	msr	BASEPRI, r0
 8009fec:	bc09      	pop	{r0, r3}
 8009fee:	6819      	ldr	r1, [r3, #0]
 8009ff0:	6808      	ldr	r0, [r1, #0]
 8009ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff6:	f01e 0f10 	tst.w	lr, #16
 8009ffa:	bf08      	it	eq
 8009ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a000:	f380 8809 	msr	PSP, r0
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	f3af 8000 	nop.w

0800a010 <pxCurrentTCBConst>:
 800a010:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop

0800a018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a030:	f7ff fa4c 	bl	80094cc <xTaskIncrementTick>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a03a:	4b06      	ldr	r3, [pc, #24]	; (800a054 <xPortSysTickHandler+0x3c>)
 800a03c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	2300      	movs	r3, #0
 800a044:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a04c:	bf00      	nop
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	e000ed04 	.word	0xe000ed04

0800a058 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a058:	b480      	push	{r7}
 800a05a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a05c:	4b0b      	ldr	r3, [pc, #44]	; (800a08c <vPortSetupTimerInterrupt+0x34>)
 800a05e:	2200      	movs	r2, #0
 800a060:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a062:	4b0b      	ldr	r3, [pc, #44]	; (800a090 <vPortSetupTimerInterrupt+0x38>)
 800a064:	2200      	movs	r2, #0
 800a066:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a068:	4b0a      	ldr	r3, [pc, #40]	; (800a094 <vPortSetupTimerInterrupt+0x3c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a0a      	ldr	r2, [pc, #40]	; (800a098 <vPortSetupTimerInterrupt+0x40>)
 800a06e:	fba2 2303 	umull	r2, r3, r2, r3
 800a072:	099b      	lsrs	r3, r3, #6
 800a074:	4a09      	ldr	r2, [pc, #36]	; (800a09c <vPortSetupTimerInterrupt+0x44>)
 800a076:	3b01      	subs	r3, #1
 800a078:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a07a:	4b04      	ldr	r3, [pc, #16]	; (800a08c <vPortSetupTimerInterrupt+0x34>)
 800a07c:	2207      	movs	r2, #7
 800a07e:	601a      	str	r2, [r3, #0]
}
 800a080:	bf00      	nop
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	e000e010 	.word	0xe000e010
 800a090:	e000e018 	.word	0xe000e018
 800a094:	20000000 	.word	0x20000000
 800a098:	10624dd3 	.word	0x10624dd3
 800a09c:	e000e014 	.word	0xe000e014

0800a0a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a0a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a0b0 <vPortEnableVFP+0x10>
 800a0a4:	6801      	ldr	r1, [r0, #0]
 800a0a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a0aa:	6001      	str	r1, [r0, #0]
 800a0ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0ae:	bf00      	nop
 800a0b0:	e000ed88 	.word	0xe000ed88

0800a0b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0ba:	f3ef 8305 	mrs	r3, IPSR
 800a0be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b0f      	cmp	r3, #15
 800a0c4:	d913      	bls.n	800a0ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0c6:	4a16      	ldr	r2, [pc, #88]	; (800a120 <vPortValidateInterruptPriority+0x6c>)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0d0:	4b14      	ldr	r3, [pc, #80]	; (800a124 <vPortValidateInterruptPriority+0x70>)
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	7afa      	ldrb	r2, [r7, #11]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d209      	bcs.n	800a0ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	607b      	str	r3, [r7, #4]
 800a0ec:	e7fe      	b.n	800a0ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0ee:	4b0e      	ldr	r3, [pc, #56]	; (800a128 <vPortValidateInterruptPriority+0x74>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a0f6:	4b0d      	ldr	r3, [pc, #52]	; (800a12c <vPortValidateInterruptPriority+0x78>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d909      	bls.n	800a112 <vPortValidateInterruptPriority+0x5e>
 800a0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	603b      	str	r3, [r7, #0]
 800a110:	e7fe      	b.n	800a110 <vPortValidateInterruptPriority+0x5c>
	}
 800a112:	bf00      	nop
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	e000e3f0 	.word	0xe000e3f0
 800a124:	20000414 	.word	0x20000414
 800a128:	e000ed0c 	.word	0xe000ed0c
 800a12c:	20000418 	.word	0x20000418

0800a130 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b08a      	sub	sp, #40	; 0x28
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a138:	2300      	movs	r3, #0
 800a13a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a13c:	f7ff f91c 	bl	8009378 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a140:	4b57      	ldr	r3, [pc, #348]	; (800a2a0 <pvPortMalloc+0x170>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d101      	bne.n	800a14c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a148:	f000 f90c 	bl	800a364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a14c:	4b55      	ldr	r3, [pc, #340]	; (800a2a4 <pvPortMalloc+0x174>)
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4013      	ands	r3, r2
 800a154:	2b00      	cmp	r3, #0
 800a156:	f040 808c 	bne.w	800a272 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d01c      	beq.n	800a19a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a160:	2208      	movs	r2, #8
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4413      	add	r3, r2
 800a166:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f003 0307 	and.w	r3, r3, #7
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d013      	beq.n	800a19a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f023 0307 	bic.w	r3, r3, #7
 800a178:	3308      	adds	r3, #8
 800a17a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f003 0307 	and.w	r3, r3, #7
 800a182:	2b00      	cmp	r3, #0
 800a184:	d009      	beq.n	800a19a <pvPortMalloc+0x6a>
 800a186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	e7fe      	b.n	800a198 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d068      	beq.n	800a272 <pvPortMalloc+0x142>
 800a1a0:	4b41      	ldr	r3, [pc, #260]	; (800a2a8 <pvPortMalloc+0x178>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d863      	bhi.n	800a272 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1aa:	4b40      	ldr	r3, [pc, #256]	; (800a2ac <pvPortMalloc+0x17c>)
 800a1ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1ae:	4b3f      	ldr	r3, [pc, #252]	; (800a2ac <pvPortMalloc+0x17c>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1b4:	e004      	b.n	800a1c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d903      	bls.n	800a1d2 <pvPortMalloc+0xa2>
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1f1      	bne.n	800a1b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1d2:	4b33      	ldr	r3, [pc, #204]	; (800a2a0 <pvPortMalloc+0x170>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d04a      	beq.n	800a272 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1dc:	6a3b      	ldr	r3, [r7, #32]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2208      	movs	r2, #8
 800a1e2:	4413      	add	r3, r2
 800a1e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	1ad2      	subs	r2, r2, r3
 800a1f6:	2308      	movs	r3, #8
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d91e      	bls.n	800a23c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4413      	add	r3, r2
 800a204:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	f003 0307 	and.w	r3, r3, #7
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d009      	beq.n	800a224 <pvPortMalloc+0xf4>
 800a210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	613b      	str	r3, [r7, #16]
 800a222:	e7fe      	b.n	800a222 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a226:	685a      	ldr	r2, [r3, #4]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	1ad2      	subs	r2, r2, r3
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a236:	69b8      	ldr	r0, [r7, #24]
 800a238:	f000 f8f6 	bl	800a428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a23c:	4b1a      	ldr	r3, [pc, #104]	; (800a2a8 <pvPortMalloc+0x178>)
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	4a18      	ldr	r2, [pc, #96]	; (800a2a8 <pvPortMalloc+0x178>)
 800a248:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a24a:	4b17      	ldr	r3, [pc, #92]	; (800a2a8 <pvPortMalloc+0x178>)
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	4b18      	ldr	r3, [pc, #96]	; (800a2b0 <pvPortMalloc+0x180>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	429a      	cmp	r2, r3
 800a254:	d203      	bcs.n	800a25e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a256:	4b14      	ldr	r3, [pc, #80]	; (800a2a8 <pvPortMalloc+0x178>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a15      	ldr	r2, [pc, #84]	; (800a2b0 <pvPortMalloc+0x180>)
 800a25c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a260:	685a      	ldr	r2, [r3, #4]
 800a262:	4b10      	ldr	r3, [pc, #64]	; (800a2a4 <pvPortMalloc+0x174>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	431a      	orrs	r2, r3
 800a268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	2200      	movs	r2, #0
 800a270:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a272:	f7ff f88f 	bl	8009394 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	f003 0307 	and.w	r3, r3, #7
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d009      	beq.n	800a294 <pvPortMalloc+0x164>
 800a280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	60fb      	str	r3, [r7, #12]
 800a292:	e7fe      	b.n	800a292 <pvPortMalloc+0x162>
	return pvReturn;
 800a294:	69fb      	ldr	r3, [r7, #28]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3728      	adds	r7, #40	; 0x28
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20004024 	.word	0x20004024
 800a2a4:	20004030 	.word	0x20004030
 800a2a8:	20004028 	.word	0x20004028
 800a2ac:	2000401c 	.word	0x2000401c
 800a2b0:	2000402c 	.word	0x2000402c

0800a2b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d046      	beq.n	800a354 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2c6:	2308      	movs	r3, #8
 800a2c8:	425b      	negs	r3, r3
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	685a      	ldr	r2, [r3, #4]
 800a2d8:	4b20      	ldr	r3, [pc, #128]	; (800a35c <vPortFree+0xa8>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4013      	ands	r3, r2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d109      	bne.n	800a2f6 <vPortFree+0x42>
 800a2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e6:	f383 8811 	msr	BASEPRI, r3
 800a2ea:	f3bf 8f6f 	isb	sy
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	60fb      	str	r3, [r7, #12]
 800a2f4:	e7fe      	b.n	800a2f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d009      	beq.n	800a312 <vPortFree+0x5e>
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	60bb      	str	r3, [r7, #8]
 800a310:	e7fe      	b.n	800a310 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	685a      	ldr	r2, [r3, #4]
 800a316:	4b11      	ldr	r3, [pc, #68]	; (800a35c <vPortFree+0xa8>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4013      	ands	r3, r2
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d019      	beq.n	800a354 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d115      	bne.n	800a354 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	685a      	ldr	r2, [r3, #4]
 800a32c:	4b0b      	ldr	r3, [pc, #44]	; (800a35c <vPortFree+0xa8>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	43db      	mvns	r3, r3
 800a332:	401a      	ands	r2, r3
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a338:	f7ff f81e 	bl	8009378 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	4b07      	ldr	r3, [pc, #28]	; (800a360 <vPortFree+0xac>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4413      	add	r3, r2
 800a346:	4a06      	ldr	r2, [pc, #24]	; (800a360 <vPortFree+0xac>)
 800a348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a34a:	6938      	ldr	r0, [r7, #16]
 800a34c:	f000 f86c 	bl	800a428 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a350:	f7ff f820 	bl	8009394 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a354:	bf00      	nop
 800a356:	3718      	adds	r7, #24
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	20004030 	.word	0x20004030
 800a360:	20004028 	.word	0x20004028

0800a364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a36a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a36e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a370:	4b27      	ldr	r3, [pc, #156]	; (800a410 <prvHeapInit+0xac>)
 800a372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f003 0307 	and.w	r3, r3, #7
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00c      	beq.n	800a398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3307      	adds	r3, #7
 800a382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f023 0307 	bic.w	r3, r3, #7
 800a38a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	1ad3      	subs	r3, r2, r3
 800a392:	4a1f      	ldr	r2, [pc, #124]	; (800a410 <prvHeapInit+0xac>)
 800a394:	4413      	add	r3, r2
 800a396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a39c:	4a1d      	ldr	r2, [pc, #116]	; (800a414 <prvHeapInit+0xb0>)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3a2:	4b1c      	ldr	r3, [pc, #112]	; (800a414 <prvHeapInit+0xb0>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3b0:	2208      	movs	r2, #8
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	1a9b      	subs	r3, r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f023 0307 	bic.w	r3, r3, #7
 800a3be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4a15      	ldr	r2, [pc, #84]	; (800a418 <prvHeapInit+0xb4>)
 800a3c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3c6:	4b14      	ldr	r3, [pc, #80]	; (800a418 <prvHeapInit+0xb4>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3ce:	4b12      	ldr	r3, [pc, #72]	; (800a418 <prvHeapInit+0xb4>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	1ad2      	subs	r2, r2, r3
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3e4:	4b0c      	ldr	r3, [pc, #48]	; (800a418 <prvHeapInit+0xb4>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	4a0a      	ldr	r2, [pc, #40]	; (800a41c <prvHeapInit+0xb8>)
 800a3f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	4a09      	ldr	r2, [pc, #36]	; (800a420 <prvHeapInit+0xbc>)
 800a3fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a3fc:	4b09      	ldr	r3, [pc, #36]	; (800a424 <prvHeapInit+0xc0>)
 800a3fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a402:	601a      	str	r2, [r3, #0]
}
 800a404:	bf00      	nop
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	2000041c 	.word	0x2000041c
 800a414:	2000401c 	.word	0x2000401c
 800a418:	20004024 	.word	0x20004024
 800a41c:	2000402c 	.word	0x2000402c
 800a420:	20004028 	.word	0x20004028
 800a424:	20004030 	.word	0x20004030

0800a428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a430:	4b28      	ldr	r3, [pc, #160]	; (800a4d4 <prvInsertBlockIntoFreeList+0xac>)
 800a432:	60fb      	str	r3, [r7, #12]
 800a434:	e002      	b.n	800a43c <prvInsertBlockIntoFreeList+0x14>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	60fb      	str	r3, [r7, #12]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	429a      	cmp	r2, r3
 800a444:	d8f7      	bhi.n	800a436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	4413      	add	r3, r2
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	429a      	cmp	r2, r3
 800a456:	d108      	bne.n	800a46a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	441a      	add	r2, r3
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	441a      	add	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d118      	bne.n	800a4b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	4b15      	ldr	r3, [pc, #84]	; (800a4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	429a      	cmp	r2, r3
 800a488:	d00d      	beq.n	800a4a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	685a      	ldr	r2, [r3, #4]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	441a      	add	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	e008      	b.n	800a4b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4a6:	4b0c      	ldr	r3, [pc, #48]	; (800a4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	601a      	str	r2, [r3, #0]
 800a4ae:	e003      	b.n	800a4b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d002      	beq.n	800a4c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4c6:	bf00      	nop
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	2000401c 	.word	0x2000401c
 800a4d8:	20004024 	.word	0x20004024

0800a4dc <__errno>:
 800a4dc:	4b01      	ldr	r3, [pc, #4]	; (800a4e4 <__errno+0x8>)
 800a4de:	6818      	ldr	r0, [r3, #0]
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	20000010 	.word	0x20000010

0800a4e8 <__libc_init_array>:
 800a4e8:	b570      	push	{r4, r5, r6, lr}
 800a4ea:	4e0d      	ldr	r6, [pc, #52]	; (800a520 <__libc_init_array+0x38>)
 800a4ec:	4c0d      	ldr	r4, [pc, #52]	; (800a524 <__libc_init_array+0x3c>)
 800a4ee:	1ba4      	subs	r4, r4, r6
 800a4f0:	10a4      	asrs	r4, r4, #2
 800a4f2:	2500      	movs	r5, #0
 800a4f4:	42a5      	cmp	r5, r4
 800a4f6:	d109      	bne.n	800a50c <__libc_init_array+0x24>
 800a4f8:	4e0b      	ldr	r6, [pc, #44]	; (800a528 <__libc_init_array+0x40>)
 800a4fa:	4c0c      	ldr	r4, [pc, #48]	; (800a52c <__libc_init_array+0x44>)
 800a4fc:	f000 fe34 	bl	800b168 <_init>
 800a500:	1ba4      	subs	r4, r4, r6
 800a502:	10a4      	asrs	r4, r4, #2
 800a504:	2500      	movs	r5, #0
 800a506:	42a5      	cmp	r5, r4
 800a508:	d105      	bne.n	800a516 <__libc_init_array+0x2e>
 800a50a:	bd70      	pop	{r4, r5, r6, pc}
 800a50c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a510:	4798      	blx	r3
 800a512:	3501      	adds	r5, #1
 800a514:	e7ee      	b.n	800a4f4 <__libc_init_array+0xc>
 800a516:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a51a:	4798      	blx	r3
 800a51c:	3501      	adds	r5, #1
 800a51e:	e7f2      	b.n	800a506 <__libc_init_array+0x1e>
 800a520:	0800b2d4 	.word	0x0800b2d4
 800a524:	0800b2d4 	.word	0x0800b2d4
 800a528:	0800b2d4 	.word	0x0800b2d4
 800a52c:	0800b2d8 	.word	0x0800b2d8

0800a530 <memcpy>:
 800a530:	b510      	push	{r4, lr}
 800a532:	1e43      	subs	r3, r0, #1
 800a534:	440a      	add	r2, r1
 800a536:	4291      	cmp	r1, r2
 800a538:	d100      	bne.n	800a53c <memcpy+0xc>
 800a53a:	bd10      	pop	{r4, pc}
 800a53c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a540:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a544:	e7f7      	b.n	800a536 <memcpy+0x6>

0800a546 <memset>:
 800a546:	4402      	add	r2, r0
 800a548:	4603      	mov	r3, r0
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d100      	bne.n	800a550 <memset+0xa>
 800a54e:	4770      	bx	lr
 800a550:	f803 1b01 	strb.w	r1, [r3], #1
 800a554:	e7f9      	b.n	800a54a <memset+0x4>
	...

0800a558 <atan>:
 800a558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	ec55 4b10 	vmov	r4, r5, d0
 800a560:	4bc3      	ldr	r3, [pc, #780]	; (800a870 <atan+0x318>)
 800a562:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a566:	429e      	cmp	r6, r3
 800a568:	46ab      	mov	fp, r5
 800a56a:	dd18      	ble.n	800a59e <atan+0x46>
 800a56c:	4bc1      	ldr	r3, [pc, #772]	; (800a874 <atan+0x31c>)
 800a56e:	429e      	cmp	r6, r3
 800a570:	dc01      	bgt.n	800a576 <atan+0x1e>
 800a572:	d109      	bne.n	800a588 <atan+0x30>
 800a574:	b144      	cbz	r4, 800a588 <atan+0x30>
 800a576:	4622      	mov	r2, r4
 800a578:	462b      	mov	r3, r5
 800a57a:	4620      	mov	r0, r4
 800a57c:	4629      	mov	r1, r5
 800a57e:	f7f5 fe35 	bl	80001ec <__adddf3>
 800a582:	4604      	mov	r4, r0
 800a584:	460d      	mov	r5, r1
 800a586:	e006      	b.n	800a596 <atan+0x3e>
 800a588:	f1bb 0f00 	cmp.w	fp, #0
 800a58c:	f340 8131 	ble.w	800a7f2 <atan+0x29a>
 800a590:	a59b      	add	r5, pc, #620	; (adr r5, 800a800 <atan+0x2a8>)
 800a592:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a596:	ec45 4b10 	vmov	d0, r4, r5
 800a59a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59e:	4bb6      	ldr	r3, [pc, #728]	; (800a878 <atan+0x320>)
 800a5a0:	429e      	cmp	r6, r3
 800a5a2:	dc14      	bgt.n	800a5ce <atan+0x76>
 800a5a4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a5a8:	429e      	cmp	r6, r3
 800a5aa:	dc0d      	bgt.n	800a5c8 <atan+0x70>
 800a5ac:	a396      	add	r3, pc, #600	; (adr r3, 800a808 <atan+0x2b0>)
 800a5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b2:	ee10 0a10 	vmov	r0, s0
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	f7f5 fe18 	bl	80001ec <__adddf3>
 800a5bc:	2200      	movs	r2, #0
 800a5be:	4baf      	ldr	r3, [pc, #700]	; (800a87c <atan+0x324>)
 800a5c0:	f7f6 fa5a 	bl	8000a78 <__aeabi_dcmpgt>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	d1e6      	bne.n	800a596 <atan+0x3e>
 800a5c8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a5cc:	e02b      	b.n	800a626 <atan+0xce>
 800a5ce:	f000 f963 	bl	800a898 <fabs>
 800a5d2:	4bab      	ldr	r3, [pc, #684]	; (800a880 <atan+0x328>)
 800a5d4:	429e      	cmp	r6, r3
 800a5d6:	ec55 4b10 	vmov	r4, r5, d0
 800a5da:	f300 80bf 	bgt.w	800a75c <atan+0x204>
 800a5de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a5e2:	429e      	cmp	r6, r3
 800a5e4:	f300 80a0 	bgt.w	800a728 <atan+0x1d0>
 800a5e8:	ee10 2a10 	vmov	r2, s0
 800a5ec:	ee10 0a10 	vmov	r0, s0
 800a5f0:	462b      	mov	r3, r5
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	f7f5 fdfa 	bl	80001ec <__adddf3>
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	4ba0      	ldr	r3, [pc, #640]	; (800a87c <atan+0x324>)
 800a5fc:	f7f5 fdf4 	bl	80001e8 <__aeabi_dsub>
 800a600:	2200      	movs	r2, #0
 800a602:	4606      	mov	r6, r0
 800a604:	460f      	mov	r7, r1
 800a606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a60a:	4620      	mov	r0, r4
 800a60c:	4629      	mov	r1, r5
 800a60e:	f7f5 fded 	bl	80001ec <__adddf3>
 800a612:	4602      	mov	r2, r0
 800a614:	460b      	mov	r3, r1
 800a616:	4630      	mov	r0, r6
 800a618:	4639      	mov	r1, r7
 800a61a:	f7f6 f8c7 	bl	80007ac <__aeabi_ddiv>
 800a61e:	f04f 0a00 	mov.w	sl, #0
 800a622:	4604      	mov	r4, r0
 800a624:	460d      	mov	r5, r1
 800a626:	4622      	mov	r2, r4
 800a628:	462b      	mov	r3, r5
 800a62a:	4620      	mov	r0, r4
 800a62c:	4629      	mov	r1, r5
 800a62e:	f7f5 ff93 	bl	8000558 <__aeabi_dmul>
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
 800a636:	4680      	mov	r8, r0
 800a638:	4689      	mov	r9, r1
 800a63a:	f7f5 ff8d 	bl	8000558 <__aeabi_dmul>
 800a63e:	a374      	add	r3, pc, #464	; (adr r3, 800a810 <atan+0x2b8>)
 800a640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a644:	4606      	mov	r6, r0
 800a646:	460f      	mov	r7, r1
 800a648:	f7f5 ff86 	bl	8000558 <__aeabi_dmul>
 800a64c:	a372      	add	r3, pc, #456	; (adr r3, 800a818 <atan+0x2c0>)
 800a64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a652:	f7f5 fdcb 	bl	80001ec <__adddf3>
 800a656:	4632      	mov	r2, r6
 800a658:	463b      	mov	r3, r7
 800a65a:	f7f5 ff7d 	bl	8000558 <__aeabi_dmul>
 800a65e:	a370      	add	r3, pc, #448	; (adr r3, 800a820 <atan+0x2c8>)
 800a660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a664:	f7f5 fdc2 	bl	80001ec <__adddf3>
 800a668:	4632      	mov	r2, r6
 800a66a:	463b      	mov	r3, r7
 800a66c:	f7f5 ff74 	bl	8000558 <__aeabi_dmul>
 800a670:	a36d      	add	r3, pc, #436	; (adr r3, 800a828 <atan+0x2d0>)
 800a672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a676:	f7f5 fdb9 	bl	80001ec <__adddf3>
 800a67a:	4632      	mov	r2, r6
 800a67c:	463b      	mov	r3, r7
 800a67e:	f7f5 ff6b 	bl	8000558 <__aeabi_dmul>
 800a682:	a36b      	add	r3, pc, #428	; (adr r3, 800a830 <atan+0x2d8>)
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	f7f5 fdb0 	bl	80001ec <__adddf3>
 800a68c:	4632      	mov	r2, r6
 800a68e:	463b      	mov	r3, r7
 800a690:	f7f5 ff62 	bl	8000558 <__aeabi_dmul>
 800a694:	a368      	add	r3, pc, #416	; (adr r3, 800a838 <atan+0x2e0>)
 800a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69a:	f7f5 fda7 	bl	80001ec <__adddf3>
 800a69e:	4642      	mov	r2, r8
 800a6a0:	464b      	mov	r3, r9
 800a6a2:	f7f5 ff59 	bl	8000558 <__aeabi_dmul>
 800a6a6:	a366      	add	r3, pc, #408	; (adr r3, 800a840 <atan+0x2e8>)
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	4680      	mov	r8, r0
 800a6ae:	4689      	mov	r9, r1
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	4639      	mov	r1, r7
 800a6b4:	f7f5 ff50 	bl	8000558 <__aeabi_dmul>
 800a6b8:	a363      	add	r3, pc, #396	; (adr r3, 800a848 <atan+0x2f0>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	f7f5 fd93 	bl	80001e8 <__aeabi_dsub>
 800a6c2:	4632      	mov	r2, r6
 800a6c4:	463b      	mov	r3, r7
 800a6c6:	f7f5 ff47 	bl	8000558 <__aeabi_dmul>
 800a6ca:	a361      	add	r3, pc, #388	; (adr r3, 800a850 <atan+0x2f8>)
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	f7f5 fd8a 	bl	80001e8 <__aeabi_dsub>
 800a6d4:	4632      	mov	r2, r6
 800a6d6:	463b      	mov	r3, r7
 800a6d8:	f7f5 ff3e 	bl	8000558 <__aeabi_dmul>
 800a6dc:	a35e      	add	r3, pc, #376	; (adr r3, 800a858 <atan+0x300>)
 800a6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e2:	f7f5 fd81 	bl	80001e8 <__aeabi_dsub>
 800a6e6:	4632      	mov	r2, r6
 800a6e8:	463b      	mov	r3, r7
 800a6ea:	f7f5 ff35 	bl	8000558 <__aeabi_dmul>
 800a6ee:	a35c      	add	r3, pc, #368	; (adr r3, 800a860 <atan+0x308>)
 800a6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f4:	f7f5 fd78 	bl	80001e8 <__aeabi_dsub>
 800a6f8:	4632      	mov	r2, r6
 800a6fa:	463b      	mov	r3, r7
 800a6fc:	f7f5 ff2c 	bl	8000558 <__aeabi_dmul>
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	4640      	mov	r0, r8
 800a706:	4649      	mov	r1, r9
 800a708:	f7f5 fd70 	bl	80001ec <__adddf3>
 800a70c:	4622      	mov	r2, r4
 800a70e:	462b      	mov	r3, r5
 800a710:	f7f5 ff22 	bl	8000558 <__aeabi_dmul>
 800a714:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	d14b      	bne.n	800a7b6 <atan+0x25e>
 800a71e:	4620      	mov	r0, r4
 800a720:	4629      	mov	r1, r5
 800a722:	f7f5 fd61 	bl	80001e8 <__aeabi_dsub>
 800a726:	e72c      	b.n	800a582 <atan+0x2a>
 800a728:	ee10 0a10 	vmov	r0, s0
 800a72c:	2200      	movs	r2, #0
 800a72e:	4b53      	ldr	r3, [pc, #332]	; (800a87c <atan+0x324>)
 800a730:	4629      	mov	r1, r5
 800a732:	f7f5 fd59 	bl	80001e8 <__aeabi_dsub>
 800a736:	2200      	movs	r2, #0
 800a738:	4606      	mov	r6, r0
 800a73a:	460f      	mov	r7, r1
 800a73c:	4b4f      	ldr	r3, [pc, #316]	; (800a87c <atan+0x324>)
 800a73e:	4620      	mov	r0, r4
 800a740:	4629      	mov	r1, r5
 800a742:	f7f5 fd53 	bl	80001ec <__adddf3>
 800a746:	4602      	mov	r2, r0
 800a748:	460b      	mov	r3, r1
 800a74a:	4630      	mov	r0, r6
 800a74c:	4639      	mov	r1, r7
 800a74e:	f7f6 f82d 	bl	80007ac <__aeabi_ddiv>
 800a752:	f04f 0a01 	mov.w	sl, #1
 800a756:	4604      	mov	r4, r0
 800a758:	460d      	mov	r5, r1
 800a75a:	e764      	b.n	800a626 <atan+0xce>
 800a75c:	4b49      	ldr	r3, [pc, #292]	; (800a884 <atan+0x32c>)
 800a75e:	429e      	cmp	r6, r3
 800a760:	dc1d      	bgt.n	800a79e <atan+0x246>
 800a762:	ee10 0a10 	vmov	r0, s0
 800a766:	2200      	movs	r2, #0
 800a768:	4b47      	ldr	r3, [pc, #284]	; (800a888 <atan+0x330>)
 800a76a:	4629      	mov	r1, r5
 800a76c:	f7f5 fd3c 	bl	80001e8 <__aeabi_dsub>
 800a770:	2200      	movs	r2, #0
 800a772:	4606      	mov	r6, r0
 800a774:	460f      	mov	r7, r1
 800a776:	4b44      	ldr	r3, [pc, #272]	; (800a888 <atan+0x330>)
 800a778:	4620      	mov	r0, r4
 800a77a:	4629      	mov	r1, r5
 800a77c:	f7f5 feec 	bl	8000558 <__aeabi_dmul>
 800a780:	2200      	movs	r2, #0
 800a782:	4b3e      	ldr	r3, [pc, #248]	; (800a87c <atan+0x324>)
 800a784:	f7f5 fd32 	bl	80001ec <__adddf3>
 800a788:	4602      	mov	r2, r0
 800a78a:	460b      	mov	r3, r1
 800a78c:	4630      	mov	r0, r6
 800a78e:	4639      	mov	r1, r7
 800a790:	f7f6 f80c 	bl	80007ac <__aeabi_ddiv>
 800a794:	f04f 0a02 	mov.w	sl, #2
 800a798:	4604      	mov	r4, r0
 800a79a:	460d      	mov	r5, r1
 800a79c:	e743      	b.n	800a626 <atan+0xce>
 800a79e:	462b      	mov	r3, r5
 800a7a0:	ee10 2a10 	vmov	r2, s0
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	4939      	ldr	r1, [pc, #228]	; (800a88c <atan+0x334>)
 800a7a8:	f7f6 f800 	bl	80007ac <__aeabi_ddiv>
 800a7ac:	f04f 0a03 	mov.w	sl, #3
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	460d      	mov	r5, r1
 800a7b4:	e737      	b.n	800a626 <atan+0xce>
 800a7b6:	4b36      	ldr	r3, [pc, #216]	; (800a890 <atan+0x338>)
 800a7b8:	4e36      	ldr	r6, [pc, #216]	; (800a894 <atan+0x33c>)
 800a7ba:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800a7be:	4456      	add	r6, sl
 800a7c0:	449a      	add	sl, r3
 800a7c2:	e9da 2300 	ldrd	r2, r3, [sl]
 800a7c6:	f7f5 fd0f 	bl	80001e8 <__aeabi_dsub>
 800a7ca:	4622      	mov	r2, r4
 800a7cc:	462b      	mov	r3, r5
 800a7ce:	f7f5 fd0b 	bl	80001e8 <__aeabi_dsub>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a7da:	f7f5 fd05 	bl	80001e8 <__aeabi_dsub>
 800a7de:	f1bb 0f00 	cmp.w	fp, #0
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	460d      	mov	r5, r1
 800a7e6:	f6bf aed6 	bge.w	800a596 <atan+0x3e>
 800a7ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7ee:	461d      	mov	r5, r3
 800a7f0:	e6d1      	b.n	800a596 <atan+0x3e>
 800a7f2:	a51d      	add	r5, pc, #116	; (adr r5, 800a868 <atan+0x310>)
 800a7f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a7f8:	e6cd      	b.n	800a596 <atan+0x3e>
 800a7fa:	bf00      	nop
 800a7fc:	f3af 8000 	nop.w
 800a800:	54442d18 	.word	0x54442d18
 800a804:	3ff921fb 	.word	0x3ff921fb
 800a808:	8800759c 	.word	0x8800759c
 800a80c:	7e37e43c 	.word	0x7e37e43c
 800a810:	e322da11 	.word	0xe322da11
 800a814:	3f90ad3a 	.word	0x3f90ad3a
 800a818:	24760deb 	.word	0x24760deb
 800a81c:	3fa97b4b 	.word	0x3fa97b4b
 800a820:	a0d03d51 	.word	0xa0d03d51
 800a824:	3fb10d66 	.word	0x3fb10d66
 800a828:	c54c206e 	.word	0xc54c206e
 800a82c:	3fb745cd 	.word	0x3fb745cd
 800a830:	920083ff 	.word	0x920083ff
 800a834:	3fc24924 	.word	0x3fc24924
 800a838:	5555550d 	.word	0x5555550d
 800a83c:	3fd55555 	.word	0x3fd55555
 800a840:	2c6a6c2f 	.word	0x2c6a6c2f
 800a844:	bfa2b444 	.word	0xbfa2b444
 800a848:	52defd9a 	.word	0x52defd9a
 800a84c:	3fadde2d 	.word	0x3fadde2d
 800a850:	af749a6d 	.word	0xaf749a6d
 800a854:	3fb3b0f2 	.word	0x3fb3b0f2
 800a858:	fe231671 	.word	0xfe231671
 800a85c:	3fbc71c6 	.word	0x3fbc71c6
 800a860:	9998ebc4 	.word	0x9998ebc4
 800a864:	3fc99999 	.word	0x3fc99999
 800a868:	54442d18 	.word	0x54442d18
 800a86c:	bff921fb 	.word	0xbff921fb
 800a870:	440fffff 	.word	0x440fffff
 800a874:	7ff00000 	.word	0x7ff00000
 800a878:	3fdbffff 	.word	0x3fdbffff
 800a87c:	3ff00000 	.word	0x3ff00000
 800a880:	3ff2ffff 	.word	0x3ff2ffff
 800a884:	40037fff 	.word	0x40037fff
 800a888:	3ff80000 	.word	0x3ff80000
 800a88c:	bff00000 	.word	0xbff00000
 800a890:	0800b2a0 	.word	0x0800b2a0
 800a894:	0800b280 	.word	0x0800b280

0800a898 <fabs>:
 800a898:	ec51 0b10 	vmov	r0, r1, d0
 800a89c:	ee10 2a10 	vmov	r2, s0
 800a8a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a8a4:	ec43 2b10 	vmov	d0, r2, r3
 800a8a8:	4770      	bx	lr
	...

0800a8ac <asin>:
 800a8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ae:	ed2d 8b02 	vpush	{d8}
 800a8b2:	4e26      	ldr	r6, [pc, #152]	; (800a94c <asin+0xa0>)
 800a8b4:	b08b      	sub	sp, #44	; 0x2c
 800a8b6:	ec55 4b10 	vmov	r4, r5, d0
 800a8ba:	f000 f8ad 	bl	800aa18 <__ieee754_asin>
 800a8be:	f996 3000 	ldrsb.w	r3, [r6]
 800a8c2:	eeb0 8a40 	vmov.f32	s16, s0
 800a8c6:	eef0 8a60 	vmov.f32	s17, s1
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	d036      	beq.n	800a93c <asin+0x90>
 800a8ce:	4622      	mov	r2, r4
 800a8d0:	462b      	mov	r3, r5
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	4629      	mov	r1, r5
 800a8d6:	f7f6 f8d9 	bl	8000a8c <__aeabi_dcmpun>
 800a8da:	4607      	mov	r7, r0
 800a8dc:	bb70      	cbnz	r0, 800a93c <asin+0x90>
 800a8de:	ec45 4b10 	vmov	d0, r4, r5
 800a8e2:	f7ff ffd9 	bl	800a898 <fabs>
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	4b19      	ldr	r3, [pc, #100]	; (800a950 <asin+0xa4>)
 800a8ea:	ec51 0b10 	vmov	r0, r1, d0
 800a8ee:	f7f6 f8c3 	bl	8000a78 <__aeabi_dcmpgt>
 800a8f2:	b318      	cbz	r0, 800a93c <asin+0x90>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	4816      	ldr	r0, [pc, #88]	; (800a954 <asin+0xa8>)
 800a8fa:	4b17      	ldr	r3, [pc, #92]	; (800a958 <asin+0xac>)
 800a8fc:	9301      	str	r3, [sp, #4]
 800a8fe:	9708      	str	r7, [sp, #32]
 800a900:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a904:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a908:	f000 fc26 	bl	800b158 <nan>
 800a90c:	f996 3000 	ldrsb.w	r3, [r6]
 800a910:	2b02      	cmp	r3, #2
 800a912:	ed8d 0b06 	vstr	d0, [sp, #24]
 800a916:	d104      	bne.n	800a922 <asin+0x76>
 800a918:	f7ff fde0 	bl	800a4dc <__errno>
 800a91c:	2321      	movs	r3, #33	; 0x21
 800a91e:	6003      	str	r3, [r0, #0]
 800a920:	e004      	b.n	800a92c <asin+0x80>
 800a922:	4668      	mov	r0, sp
 800a924:	f000 fc16 	bl	800b154 <matherr>
 800a928:	2800      	cmp	r0, #0
 800a92a:	d0f5      	beq.n	800a918 <asin+0x6c>
 800a92c:	9b08      	ldr	r3, [sp, #32]
 800a92e:	b11b      	cbz	r3, 800a938 <asin+0x8c>
 800a930:	f7ff fdd4 	bl	800a4dc <__errno>
 800a934:	9b08      	ldr	r3, [sp, #32]
 800a936:	6003      	str	r3, [r0, #0]
 800a938:	ed9d 8b06 	vldr	d8, [sp, #24]
 800a93c:	eeb0 0a48 	vmov.f32	s0, s16
 800a940:	eef0 0a68 	vmov.f32	s1, s17
 800a944:	b00b      	add	sp, #44	; 0x2c
 800a946:	ecbd 8b02 	vpop	{d8}
 800a94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a94c:	20000074 	.word	0x20000074
 800a950:	3ff00000 	.word	0x3ff00000
 800a954:	0800b2c4 	.word	0x0800b2c4
 800a958:	0800b2c0 	.word	0x0800b2c0

0800a95c <atan2>:
 800a95c:	f000 ba6c 	b.w	800ae38 <__ieee754_atan2>

0800a960 <sqrt>:
 800a960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a964:	ed2d 8b02 	vpush	{d8}
 800a968:	b08b      	sub	sp, #44	; 0x2c
 800a96a:	ec55 4b10 	vmov	r4, r5, d0
 800a96e:	f000 fb41 	bl	800aff4 <__ieee754_sqrt>
 800a972:	4b26      	ldr	r3, [pc, #152]	; (800aa0c <sqrt+0xac>)
 800a974:	eeb0 8a40 	vmov.f32	s16, s0
 800a978:	eef0 8a60 	vmov.f32	s17, s1
 800a97c:	f993 6000 	ldrsb.w	r6, [r3]
 800a980:	1c73      	adds	r3, r6, #1
 800a982:	d02a      	beq.n	800a9da <sqrt+0x7a>
 800a984:	4622      	mov	r2, r4
 800a986:	462b      	mov	r3, r5
 800a988:	4620      	mov	r0, r4
 800a98a:	4629      	mov	r1, r5
 800a98c:	f7f6 f87e 	bl	8000a8c <__aeabi_dcmpun>
 800a990:	4607      	mov	r7, r0
 800a992:	bb10      	cbnz	r0, 800a9da <sqrt+0x7a>
 800a994:	f04f 0800 	mov.w	r8, #0
 800a998:	f04f 0900 	mov.w	r9, #0
 800a99c:	4642      	mov	r2, r8
 800a99e:	464b      	mov	r3, r9
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	4629      	mov	r1, r5
 800a9a4:	f7f6 f84a 	bl	8000a3c <__aeabi_dcmplt>
 800a9a8:	b1b8      	cbz	r0, 800a9da <sqrt+0x7a>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	4b18      	ldr	r3, [pc, #96]	; (800aa10 <sqrt+0xb0>)
 800a9b0:	9301      	str	r3, [sp, #4]
 800a9b2:	9708      	str	r7, [sp, #32]
 800a9b4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a9b8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a9bc:	b9b6      	cbnz	r6, 800a9ec <sqrt+0x8c>
 800a9be:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a9c2:	4668      	mov	r0, sp
 800a9c4:	f000 fbc6 	bl	800b154 <matherr>
 800a9c8:	b1d0      	cbz	r0, 800aa00 <sqrt+0xa0>
 800a9ca:	9b08      	ldr	r3, [sp, #32]
 800a9cc:	b11b      	cbz	r3, 800a9d6 <sqrt+0x76>
 800a9ce:	f7ff fd85 	bl	800a4dc <__errno>
 800a9d2:	9b08      	ldr	r3, [sp, #32]
 800a9d4:	6003      	str	r3, [r0, #0]
 800a9d6:	ed9d 8b06 	vldr	d8, [sp, #24]
 800a9da:	eeb0 0a48 	vmov.f32	s0, s16
 800a9de:	eef0 0a68 	vmov.f32	s1, s17
 800a9e2:	b00b      	add	sp, #44	; 0x2c
 800a9e4:	ecbd 8b02 	vpop	{d8}
 800a9e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9ec:	4642      	mov	r2, r8
 800a9ee:	464b      	mov	r3, r9
 800a9f0:	4640      	mov	r0, r8
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	f7f5 feda 	bl	80007ac <__aeabi_ddiv>
 800a9f8:	2e02      	cmp	r6, #2
 800a9fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a9fe:	d1e0      	bne.n	800a9c2 <sqrt+0x62>
 800aa00:	f7ff fd6c 	bl	800a4dc <__errno>
 800aa04:	2321      	movs	r3, #33	; 0x21
 800aa06:	6003      	str	r3, [r0, #0]
 800aa08:	e7df      	b.n	800a9ca <sqrt+0x6a>
 800aa0a:	bf00      	nop
 800aa0c:	20000074 	.word	0x20000074
 800aa10:	0800b2c5 	.word	0x0800b2c5
 800aa14:	00000000 	.word	0x00000000

0800aa18 <__ieee754_asin>:
 800aa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	ec55 4b10 	vmov	r4, r5, d0
 800aa20:	4bcb      	ldr	r3, [pc, #812]	; (800ad50 <__ieee754_asin+0x338>)
 800aa22:	b087      	sub	sp, #28
 800aa24:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800aa28:	429f      	cmp	r7, r3
 800aa2a:	9501      	str	r5, [sp, #4]
 800aa2c:	dd31      	ble.n	800aa92 <__ieee754_asin+0x7a>
 800aa2e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800aa32:	ee10 3a10 	vmov	r3, s0
 800aa36:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800aa3a:	433b      	orrs	r3, r7
 800aa3c:	d117      	bne.n	800aa6e <__ieee754_asin+0x56>
 800aa3e:	a3aa      	add	r3, pc, #680	; (adr r3, 800ace8 <__ieee754_asin+0x2d0>)
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	ee10 0a10 	vmov	r0, s0
 800aa48:	4629      	mov	r1, r5
 800aa4a:	f7f5 fd85 	bl	8000558 <__aeabi_dmul>
 800aa4e:	a3a8      	add	r3, pc, #672	; (adr r3, 800acf0 <__ieee754_asin+0x2d8>)
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	4606      	mov	r6, r0
 800aa56:	460f      	mov	r7, r1
 800aa58:	4620      	mov	r0, r4
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	f7f5 fd7c 	bl	8000558 <__aeabi_dmul>
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	4630      	mov	r0, r6
 800aa66:	4639      	mov	r1, r7
 800aa68:	f7f5 fbc0 	bl	80001ec <__adddf3>
 800aa6c:	e00a      	b.n	800aa84 <__ieee754_asin+0x6c>
 800aa6e:	ee10 2a10 	vmov	r2, s0
 800aa72:	462b      	mov	r3, r5
 800aa74:	4620      	mov	r0, r4
 800aa76:	4629      	mov	r1, r5
 800aa78:	f7f5 fbb6 	bl	80001e8 <__aeabi_dsub>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	460b      	mov	r3, r1
 800aa80:	f7f5 fe94 	bl	80007ac <__aeabi_ddiv>
 800aa84:	4604      	mov	r4, r0
 800aa86:	460d      	mov	r5, r1
 800aa88:	ec45 4b10 	vmov	d0, r4, r5
 800aa8c:	b007      	add	sp, #28
 800aa8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa92:	4bb0      	ldr	r3, [pc, #704]	; (800ad54 <__ieee754_asin+0x33c>)
 800aa94:	429f      	cmp	r7, r3
 800aa96:	dc11      	bgt.n	800aabc <__ieee754_asin+0xa4>
 800aa98:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800aa9c:	f280 80ae 	bge.w	800abfc <__ieee754_asin+0x1e4>
 800aaa0:	a395      	add	r3, pc, #596	; (adr r3, 800acf8 <__ieee754_asin+0x2e0>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	ee10 0a10 	vmov	r0, s0
 800aaaa:	4629      	mov	r1, r5
 800aaac:	f7f5 fb9e 	bl	80001ec <__adddf3>
 800aab0:	2200      	movs	r2, #0
 800aab2:	4ba9      	ldr	r3, [pc, #676]	; (800ad58 <__ieee754_asin+0x340>)
 800aab4:	f7f5 ffe0 	bl	8000a78 <__aeabi_dcmpgt>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d1e5      	bne.n	800aa88 <__ieee754_asin+0x70>
 800aabc:	ec45 4b10 	vmov	d0, r4, r5
 800aac0:	f7ff feea 	bl	800a898 <fabs>
 800aac4:	2000      	movs	r0, #0
 800aac6:	ec53 2b10 	vmov	r2, r3, d0
 800aaca:	49a3      	ldr	r1, [pc, #652]	; (800ad58 <__ieee754_asin+0x340>)
 800aacc:	f7f5 fb8c 	bl	80001e8 <__aeabi_dsub>
 800aad0:	2200      	movs	r2, #0
 800aad2:	4ba2      	ldr	r3, [pc, #648]	; (800ad5c <__ieee754_asin+0x344>)
 800aad4:	f7f5 fd40 	bl	8000558 <__aeabi_dmul>
 800aad8:	a389      	add	r3, pc, #548	; (adr r3, 800ad00 <__ieee754_asin+0x2e8>)
 800aada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aade:	4604      	mov	r4, r0
 800aae0:	460d      	mov	r5, r1
 800aae2:	f7f5 fd39 	bl	8000558 <__aeabi_dmul>
 800aae6:	a388      	add	r3, pc, #544	; (adr r3, 800ad08 <__ieee754_asin+0x2f0>)
 800aae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaec:	f7f5 fb7e 	bl	80001ec <__adddf3>
 800aaf0:	4622      	mov	r2, r4
 800aaf2:	462b      	mov	r3, r5
 800aaf4:	f7f5 fd30 	bl	8000558 <__aeabi_dmul>
 800aaf8:	a385      	add	r3, pc, #532	; (adr r3, 800ad10 <__ieee754_asin+0x2f8>)
 800aafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafe:	f7f5 fb73 	bl	80001e8 <__aeabi_dsub>
 800ab02:	4622      	mov	r2, r4
 800ab04:	462b      	mov	r3, r5
 800ab06:	f7f5 fd27 	bl	8000558 <__aeabi_dmul>
 800ab0a:	a383      	add	r3, pc, #524	; (adr r3, 800ad18 <__ieee754_asin+0x300>)
 800ab0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab10:	f7f5 fb6c 	bl	80001ec <__adddf3>
 800ab14:	4622      	mov	r2, r4
 800ab16:	462b      	mov	r3, r5
 800ab18:	f7f5 fd1e 	bl	8000558 <__aeabi_dmul>
 800ab1c:	a380      	add	r3, pc, #512	; (adr r3, 800ad20 <__ieee754_asin+0x308>)
 800ab1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab22:	f7f5 fb61 	bl	80001e8 <__aeabi_dsub>
 800ab26:	4622      	mov	r2, r4
 800ab28:	462b      	mov	r3, r5
 800ab2a:	f7f5 fd15 	bl	8000558 <__aeabi_dmul>
 800ab2e:	a37e      	add	r3, pc, #504	; (adr r3, 800ad28 <__ieee754_asin+0x310>)
 800ab30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab34:	f7f5 fb5a 	bl	80001ec <__adddf3>
 800ab38:	4622      	mov	r2, r4
 800ab3a:	462b      	mov	r3, r5
 800ab3c:	f7f5 fd0c 	bl	8000558 <__aeabi_dmul>
 800ab40:	a37b      	add	r3, pc, #492	; (adr r3, 800ad30 <__ieee754_asin+0x318>)
 800ab42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab46:	4680      	mov	r8, r0
 800ab48:	4689      	mov	r9, r1
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	4629      	mov	r1, r5
 800ab4e:	f7f5 fd03 	bl	8000558 <__aeabi_dmul>
 800ab52:	a379      	add	r3, pc, #484	; (adr r3, 800ad38 <__ieee754_asin+0x320>)
 800ab54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab58:	f7f5 fb46 	bl	80001e8 <__aeabi_dsub>
 800ab5c:	4622      	mov	r2, r4
 800ab5e:	462b      	mov	r3, r5
 800ab60:	f7f5 fcfa 	bl	8000558 <__aeabi_dmul>
 800ab64:	a376      	add	r3, pc, #472	; (adr r3, 800ad40 <__ieee754_asin+0x328>)
 800ab66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6a:	f7f5 fb3f 	bl	80001ec <__adddf3>
 800ab6e:	4622      	mov	r2, r4
 800ab70:	462b      	mov	r3, r5
 800ab72:	f7f5 fcf1 	bl	8000558 <__aeabi_dmul>
 800ab76:	a374      	add	r3, pc, #464	; (adr r3, 800ad48 <__ieee754_asin+0x330>)
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	f7f5 fb34 	bl	80001e8 <__aeabi_dsub>
 800ab80:	4622      	mov	r2, r4
 800ab82:	462b      	mov	r3, r5
 800ab84:	f7f5 fce8 	bl	8000558 <__aeabi_dmul>
 800ab88:	4b73      	ldr	r3, [pc, #460]	; (800ad58 <__ieee754_asin+0x340>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f7f5 fb2e 	bl	80001ec <__adddf3>
 800ab90:	ec45 4b10 	vmov	d0, r4, r5
 800ab94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab98:	f000 fa2c 	bl	800aff4 <__ieee754_sqrt>
 800ab9c:	4b70      	ldr	r3, [pc, #448]	; (800ad60 <__ieee754_asin+0x348>)
 800ab9e:	429f      	cmp	r7, r3
 800aba0:	ec5b ab10 	vmov	sl, fp, d0
 800aba4:	f340 80de 	ble.w	800ad64 <__ieee754_asin+0x34c>
 800aba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abac:	4640      	mov	r0, r8
 800abae:	4649      	mov	r1, r9
 800abb0:	f7f5 fdfc 	bl	80007ac <__aeabi_ddiv>
 800abb4:	4652      	mov	r2, sl
 800abb6:	465b      	mov	r3, fp
 800abb8:	f7f5 fcce 	bl	8000558 <__aeabi_dmul>
 800abbc:	4652      	mov	r2, sl
 800abbe:	465b      	mov	r3, fp
 800abc0:	f7f5 fb14 	bl	80001ec <__adddf3>
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	f7f5 fb10 	bl	80001ec <__adddf3>
 800abcc:	a348      	add	r3, pc, #288	; (adr r3, 800acf0 <__ieee754_asin+0x2d8>)
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	f7f5 fb09 	bl	80001e8 <__aeabi_dsub>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	a143      	add	r1, pc, #268	; (adr r1, 800ace8 <__ieee754_asin+0x2d0>)
 800abdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abe0:	f7f5 fb02 	bl	80001e8 <__aeabi_dsub>
 800abe4:	9b01      	ldr	r3, [sp, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	bfdc      	itt	le
 800abea:	4602      	movle	r2, r0
 800abec:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800abf0:	4604      	mov	r4, r0
 800abf2:	460d      	mov	r5, r1
 800abf4:	bfdc      	itt	le
 800abf6:	4614      	movle	r4, r2
 800abf8:	461d      	movle	r5, r3
 800abfa:	e745      	b.n	800aa88 <__ieee754_asin+0x70>
 800abfc:	ee10 2a10 	vmov	r2, s0
 800ac00:	ee10 0a10 	vmov	r0, s0
 800ac04:	462b      	mov	r3, r5
 800ac06:	4629      	mov	r1, r5
 800ac08:	f7f5 fca6 	bl	8000558 <__aeabi_dmul>
 800ac0c:	a33c      	add	r3, pc, #240	; (adr r3, 800ad00 <__ieee754_asin+0x2e8>)
 800ac0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac12:	4606      	mov	r6, r0
 800ac14:	460f      	mov	r7, r1
 800ac16:	f7f5 fc9f 	bl	8000558 <__aeabi_dmul>
 800ac1a:	a33b      	add	r3, pc, #236	; (adr r3, 800ad08 <__ieee754_asin+0x2f0>)
 800ac1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac20:	f7f5 fae4 	bl	80001ec <__adddf3>
 800ac24:	4632      	mov	r2, r6
 800ac26:	463b      	mov	r3, r7
 800ac28:	f7f5 fc96 	bl	8000558 <__aeabi_dmul>
 800ac2c:	a338      	add	r3, pc, #224	; (adr r3, 800ad10 <__ieee754_asin+0x2f8>)
 800ac2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac32:	f7f5 fad9 	bl	80001e8 <__aeabi_dsub>
 800ac36:	4632      	mov	r2, r6
 800ac38:	463b      	mov	r3, r7
 800ac3a:	f7f5 fc8d 	bl	8000558 <__aeabi_dmul>
 800ac3e:	a336      	add	r3, pc, #216	; (adr r3, 800ad18 <__ieee754_asin+0x300>)
 800ac40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac44:	f7f5 fad2 	bl	80001ec <__adddf3>
 800ac48:	4632      	mov	r2, r6
 800ac4a:	463b      	mov	r3, r7
 800ac4c:	f7f5 fc84 	bl	8000558 <__aeabi_dmul>
 800ac50:	a333      	add	r3, pc, #204	; (adr r3, 800ad20 <__ieee754_asin+0x308>)
 800ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac56:	f7f5 fac7 	bl	80001e8 <__aeabi_dsub>
 800ac5a:	4632      	mov	r2, r6
 800ac5c:	463b      	mov	r3, r7
 800ac5e:	f7f5 fc7b 	bl	8000558 <__aeabi_dmul>
 800ac62:	a331      	add	r3, pc, #196	; (adr r3, 800ad28 <__ieee754_asin+0x310>)
 800ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac68:	f7f5 fac0 	bl	80001ec <__adddf3>
 800ac6c:	4632      	mov	r2, r6
 800ac6e:	463b      	mov	r3, r7
 800ac70:	f7f5 fc72 	bl	8000558 <__aeabi_dmul>
 800ac74:	a32e      	add	r3, pc, #184	; (adr r3, 800ad30 <__ieee754_asin+0x318>)
 800ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7a:	4680      	mov	r8, r0
 800ac7c:	4689      	mov	r9, r1
 800ac7e:	4630      	mov	r0, r6
 800ac80:	4639      	mov	r1, r7
 800ac82:	f7f5 fc69 	bl	8000558 <__aeabi_dmul>
 800ac86:	a32c      	add	r3, pc, #176	; (adr r3, 800ad38 <__ieee754_asin+0x320>)
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	f7f5 faac 	bl	80001e8 <__aeabi_dsub>
 800ac90:	4632      	mov	r2, r6
 800ac92:	463b      	mov	r3, r7
 800ac94:	f7f5 fc60 	bl	8000558 <__aeabi_dmul>
 800ac98:	a329      	add	r3, pc, #164	; (adr r3, 800ad40 <__ieee754_asin+0x328>)
 800ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9e:	f7f5 faa5 	bl	80001ec <__adddf3>
 800aca2:	4632      	mov	r2, r6
 800aca4:	463b      	mov	r3, r7
 800aca6:	f7f5 fc57 	bl	8000558 <__aeabi_dmul>
 800acaa:	a327      	add	r3, pc, #156	; (adr r3, 800ad48 <__ieee754_asin+0x330>)
 800acac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb0:	f7f5 fa9a 	bl	80001e8 <__aeabi_dsub>
 800acb4:	4632      	mov	r2, r6
 800acb6:	463b      	mov	r3, r7
 800acb8:	f7f5 fc4e 	bl	8000558 <__aeabi_dmul>
 800acbc:	2200      	movs	r2, #0
 800acbe:	4b26      	ldr	r3, [pc, #152]	; (800ad58 <__ieee754_asin+0x340>)
 800acc0:	f7f5 fa94 	bl	80001ec <__adddf3>
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	4640      	mov	r0, r8
 800acca:	4649      	mov	r1, r9
 800accc:	f7f5 fd6e 	bl	80007ac <__aeabi_ddiv>
 800acd0:	4622      	mov	r2, r4
 800acd2:	462b      	mov	r3, r5
 800acd4:	f7f5 fc40 	bl	8000558 <__aeabi_dmul>
 800acd8:	4602      	mov	r2, r0
 800acda:	460b      	mov	r3, r1
 800acdc:	4620      	mov	r0, r4
 800acde:	4629      	mov	r1, r5
 800ace0:	e6c2      	b.n	800aa68 <__ieee754_asin+0x50>
 800ace2:	bf00      	nop
 800ace4:	f3af 8000 	nop.w
 800ace8:	54442d18 	.word	0x54442d18
 800acec:	3ff921fb 	.word	0x3ff921fb
 800acf0:	33145c07 	.word	0x33145c07
 800acf4:	3c91a626 	.word	0x3c91a626
 800acf8:	8800759c 	.word	0x8800759c
 800acfc:	7e37e43c 	.word	0x7e37e43c
 800ad00:	0dfdf709 	.word	0x0dfdf709
 800ad04:	3f023de1 	.word	0x3f023de1
 800ad08:	7501b288 	.word	0x7501b288
 800ad0c:	3f49efe0 	.word	0x3f49efe0
 800ad10:	b5688f3b 	.word	0xb5688f3b
 800ad14:	3fa48228 	.word	0x3fa48228
 800ad18:	0e884455 	.word	0x0e884455
 800ad1c:	3fc9c155 	.word	0x3fc9c155
 800ad20:	03eb6f7d 	.word	0x03eb6f7d
 800ad24:	3fd4d612 	.word	0x3fd4d612
 800ad28:	55555555 	.word	0x55555555
 800ad2c:	3fc55555 	.word	0x3fc55555
 800ad30:	b12e9282 	.word	0xb12e9282
 800ad34:	3fb3b8c5 	.word	0x3fb3b8c5
 800ad38:	1b8d0159 	.word	0x1b8d0159
 800ad3c:	3fe6066c 	.word	0x3fe6066c
 800ad40:	9c598ac8 	.word	0x9c598ac8
 800ad44:	40002ae5 	.word	0x40002ae5
 800ad48:	1c8a2d4b 	.word	0x1c8a2d4b
 800ad4c:	40033a27 	.word	0x40033a27
 800ad50:	3fefffff 	.word	0x3fefffff
 800ad54:	3fdfffff 	.word	0x3fdfffff
 800ad58:	3ff00000 	.word	0x3ff00000
 800ad5c:	3fe00000 	.word	0x3fe00000
 800ad60:	3fef3332 	.word	0x3fef3332
 800ad64:	ee10 2a10 	vmov	r2, s0
 800ad68:	ee10 0a10 	vmov	r0, s0
 800ad6c:	465b      	mov	r3, fp
 800ad6e:	4659      	mov	r1, fp
 800ad70:	f7f5 fa3c 	bl	80001ec <__adddf3>
 800ad74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad7c:	4640      	mov	r0, r8
 800ad7e:	4649      	mov	r1, r9
 800ad80:	f7f5 fd14 	bl	80007ac <__aeabi_ddiv>
 800ad84:	4602      	mov	r2, r0
 800ad86:	460b      	mov	r3, r1
 800ad88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad8c:	f7f5 fbe4 	bl	8000558 <__aeabi_dmul>
 800ad90:	2600      	movs	r6, #0
 800ad92:	4680      	mov	r8, r0
 800ad94:	4689      	mov	r9, r1
 800ad96:	4632      	mov	r2, r6
 800ad98:	465b      	mov	r3, fp
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	4659      	mov	r1, fp
 800ad9e:	f7f5 fbdb 	bl	8000558 <__aeabi_dmul>
 800ada2:	4602      	mov	r2, r0
 800ada4:	460b      	mov	r3, r1
 800ada6:	4620      	mov	r0, r4
 800ada8:	4629      	mov	r1, r5
 800adaa:	f7f5 fa1d 	bl	80001e8 <__aeabi_dsub>
 800adae:	4632      	mov	r2, r6
 800adb0:	4604      	mov	r4, r0
 800adb2:	460d      	mov	r5, r1
 800adb4:	465b      	mov	r3, fp
 800adb6:	4650      	mov	r0, sl
 800adb8:	4659      	mov	r1, fp
 800adba:	f7f5 fa17 	bl	80001ec <__adddf3>
 800adbe:	4602      	mov	r2, r0
 800adc0:	460b      	mov	r3, r1
 800adc2:	4620      	mov	r0, r4
 800adc4:	4629      	mov	r1, r5
 800adc6:	f7f5 fcf1 	bl	80007ac <__aeabi_ddiv>
 800adca:	4602      	mov	r2, r0
 800adcc:	460b      	mov	r3, r1
 800adce:	f7f5 fa0d 	bl	80001ec <__adddf3>
 800add2:	4602      	mov	r2, r0
 800add4:	460b      	mov	r3, r1
 800add6:	a114      	add	r1, pc, #80	; (adr r1, 800ae28 <__ieee754_asin+0x410>)
 800add8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800addc:	f7f5 fa04 	bl	80001e8 <__aeabi_dsub>
 800ade0:	4602      	mov	r2, r0
 800ade2:	460b      	mov	r3, r1
 800ade4:	4640      	mov	r0, r8
 800ade6:	4649      	mov	r1, r9
 800ade8:	f7f5 f9fe 	bl	80001e8 <__aeabi_dsub>
 800adec:	465f      	mov	r7, fp
 800adee:	4604      	mov	r4, r0
 800adf0:	460d      	mov	r5, r1
 800adf2:	4632      	mov	r2, r6
 800adf4:	465b      	mov	r3, fp
 800adf6:	4630      	mov	r0, r6
 800adf8:	4639      	mov	r1, r7
 800adfa:	f7f5 f9f7 	bl	80001ec <__adddf3>
 800adfe:	4602      	mov	r2, r0
 800ae00:	460b      	mov	r3, r1
 800ae02:	a10b      	add	r1, pc, #44	; (adr r1, 800ae30 <__ieee754_asin+0x418>)
 800ae04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae08:	f7f5 f9ee 	bl	80001e8 <__aeabi_dsub>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	4620      	mov	r0, r4
 800ae12:	4629      	mov	r1, r5
 800ae14:	f7f5 f9e8 	bl	80001e8 <__aeabi_dsub>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	a104      	add	r1, pc, #16	; (adr r1, 800ae30 <__ieee754_asin+0x418>)
 800ae1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae22:	e6dd      	b.n	800abe0 <__ieee754_asin+0x1c8>
 800ae24:	f3af 8000 	nop.w
 800ae28:	33145c07 	.word	0x33145c07
 800ae2c:	3c91a626 	.word	0x3c91a626
 800ae30:	54442d18 	.word	0x54442d18
 800ae34:	3fe921fb 	.word	0x3fe921fb

0800ae38 <__ieee754_atan2>:
 800ae38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae3c:	ec57 6b11 	vmov	r6, r7, d1
 800ae40:	4273      	negs	r3, r6
 800ae42:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ae46:	4333      	orrs	r3, r6
 800ae48:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800aff0 <__ieee754_atan2+0x1b8>
 800ae4c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ae50:	4573      	cmp	r3, lr
 800ae52:	ec51 0b10 	vmov	r0, r1, d0
 800ae56:	ee11 8a10 	vmov	r8, s2
 800ae5a:	d80a      	bhi.n	800ae72 <__ieee754_atan2+0x3a>
 800ae5c:	4244      	negs	r4, r0
 800ae5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae62:	4304      	orrs	r4, r0
 800ae64:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ae68:	4574      	cmp	r4, lr
 800ae6a:	468c      	mov	ip, r1
 800ae6c:	ee10 9a10 	vmov	r9, s0
 800ae70:	d907      	bls.n	800ae82 <__ieee754_atan2+0x4a>
 800ae72:	4632      	mov	r2, r6
 800ae74:	463b      	mov	r3, r7
 800ae76:	f7f5 f9b9 	bl	80001ec <__adddf3>
 800ae7a:	ec41 0b10 	vmov	d0, r0, r1
 800ae7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae82:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ae86:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ae8a:	4334      	orrs	r4, r6
 800ae8c:	d103      	bne.n	800ae96 <__ieee754_atan2+0x5e>
 800ae8e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae92:	f7ff bb61 	b.w	800a558 <atan>
 800ae96:	17bc      	asrs	r4, r7, #30
 800ae98:	f004 0402 	and.w	r4, r4, #2
 800ae9c:	ea53 0909 	orrs.w	r9, r3, r9
 800aea0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800aea4:	d107      	bne.n	800aeb6 <__ieee754_atan2+0x7e>
 800aea6:	2c02      	cmp	r4, #2
 800aea8:	d073      	beq.n	800af92 <__ieee754_atan2+0x15a>
 800aeaa:	2c03      	cmp	r4, #3
 800aeac:	d1e5      	bne.n	800ae7a <__ieee754_atan2+0x42>
 800aeae:	a13e      	add	r1, pc, #248	; (adr r1, 800afa8 <__ieee754_atan2+0x170>)
 800aeb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeb4:	e7e1      	b.n	800ae7a <__ieee754_atan2+0x42>
 800aeb6:	ea52 0808 	orrs.w	r8, r2, r8
 800aeba:	d106      	bne.n	800aeca <__ieee754_atan2+0x92>
 800aebc:	f1bc 0f00 	cmp.w	ip, #0
 800aec0:	da6b      	bge.n	800af9a <__ieee754_atan2+0x162>
 800aec2:	a13b      	add	r1, pc, #236	; (adr r1, 800afb0 <__ieee754_atan2+0x178>)
 800aec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aec8:	e7d7      	b.n	800ae7a <__ieee754_atan2+0x42>
 800aeca:	4572      	cmp	r2, lr
 800aecc:	d120      	bne.n	800af10 <__ieee754_atan2+0xd8>
 800aece:	4293      	cmp	r3, r2
 800aed0:	d111      	bne.n	800aef6 <__ieee754_atan2+0xbe>
 800aed2:	2c02      	cmp	r4, #2
 800aed4:	d007      	beq.n	800aee6 <__ieee754_atan2+0xae>
 800aed6:	2c03      	cmp	r4, #3
 800aed8:	d009      	beq.n	800aeee <__ieee754_atan2+0xb6>
 800aeda:	2c01      	cmp	r4, #1
 800aedc:	d155      	bne.n	800af8a <__ieee754_atan2+0x152>
 800aede:	a136      	add	r1, pc, #216	; (adr r1, 800afb8 <__ieee754_atan2+0x180>)
 800aee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aee4:	e7c9      	b.n	800ae7a <__ieee754_atan2+0x42>
 800aee6:	a136      	add	r1, pc, #216	; (adr r1, 800afc0 <__ieee754_atan2+0x188>)
 800aee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeec:	e7c5      	b.n	800ae7a <__ieee754_atan2+0x42>
 800aeee:	a136      	add	r1, pc, #216	; (adr r1, 800afc8 <__ieee754_atan2+0x190>)
 800aef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aef4:	e7c1      	b.n	800ae7a <__ieee754_atan2+0x42>
 800aef6:	2c02      	cmp	r4, #2
 800aef8:	d04b      	beq.n	800af92 <__ieee754_atan2+0x15a>
 800aefa:	2c03      	cmp	r4, #3
 800aefc:	d0d7      	beq.n	800aeae <__ieee754_atan2+0x76>
 800aefe:	2c01      	cmp	r4, #1
 800af00:	f04f 0000 	mov.w	r0, #0
 800af04:	d102      	bne.n	800af0c <__ieee754_atan2+0xd4>
 800af06:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800af0a:	e7b6      	b.n	800ae7a <__ieee754_atan2+0x42>
 800af0c:	2100      	movs	r1, #0
 800af0e:	e7b4      	b.n	800ae7a <__ieee754_atan2+0x42>
 800af10:	4573      	cmp	r3, lr
 800af12:	d0d3      	beq.n	800aebc <__ieee754_atan2+0x84>
 800af14:	1a9b      	subs	r3, r3, r2
 800af16:	151b      	asrs	r3, r3, #20
 800af18:	2b3c      	cmp	r3, #60	; 0x3c
 800af1a:	dc1e      	bgt.n	800af5a <__ieee754_atan2+0x122>
 800af1c:	2f00      	cmp	r7, #0
 800af1e:	da01      	bge.n	800af24 <__ieee754_atan2+0xec>
 800af20:	333c      	adds	r3, #60	; 0x3c
 800af22:	db1e      	blt.n	800af62 <__ieee754_atan2+0x12a>
 800af24:	4632      	mov	r2, r6
 800af26:	463b      	mov	r3, r7
 800af28:	f7f5 fc40 	bl	80007ac <__aeabi_ddiv>
 800af2c:	ec41 0b10 	vmov	d0, r0, r1
 800af30:	f7ff fcb2 	bl	800a898 <fabs>
 800af34:	f7ff fb10 	bl	800a558 <atan>
 800af38:	ec51 0b10 	vmov	r0, r1, d0
 800af3c:	2c01      	cmp	r4, #1
 800af3e:	d013      	beq.n	800af68 <__ieee754_atan2+0x130>
 800af40:	2c02      	cmp	r4, #2
 800af42:	d015      	beq.n	800af70 <__ieee754_atan2+0x138>
 800af44:	2c00      	cmp	r4, #0
 800af46:	d098      	beq.n	800ae7a <__ieee754_atan2+0x42>
 800af48:	a321      	add	r3, pc, #132	; (adr r3, 800afd0 <__ieee754_atan2+0x198>)
 800af4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4e:	f7f5 f94b 	bl	80001e8 <__aeabi_dsub>
 800af52:	a321      	add	r3, pc, #132	; (adr r3, 800afd8 <__ieee754_atan2+0x1a0>)
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	e014      	b.n	800af84 <__ieee754_atan2+0x14c>
 800af5a:	a121      	add	r1, pc, #132	; (adr r1, 800afe0 <__ieee754_atan2+0x1a8>)
 800af5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af60:	e7ec      	b.n	800af3c <__ieee754_atan2+0x104>
 800af62:	2000      	movs	r0, #0
 800af64:	2100      	movs	r1, #0
 800af66:	e7e9      	b.n	800af3c <__ieee754_atan2+0x104>
 800af68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af6c:	4619      	mov	r1, r3
 800af6e:	e784      	b.n	800ae7a <__ieee754_atan2+0x42>
 800af70:	a317      	add	r3, pc, #92	; (adr r3, 800afd0 <__ieee754_atan2+0x198>)
 800af72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af76:	f7f5 f937 	bl	80001e8 <__aeabi_dsub>
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	a116      	add	r1, pc, #88	; (adr r1, 800afd8 <__ieee754_atan2+0x1a0>)
 800af80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af84:	f7f5 f930 	bl	80001e8 <__aeabi_dsub>
 800af88:	e777      	b.n	800ae7a <__ieee754_atan2+0x42>
 800af8a:	a117      	add	r1, pc, #92	; (adr r1, 800afe8 <__ieee754_atan2+0x1b0>)
 800af8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af90:	e773      	b.n	800ae7a <__ieee754_atan2+0x42>
 800af92:	a111      	add	r1, pc, #68	; (adr r1, 800afd8 <__ieee754_atan2+0x1a0>)
 800af94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af98:	e76f      	b.n	800ae7a <__ieee754_atan2+0x42>
 800af9a:	a111      	add	r1, pc, #68	; (adr r1, 800afe0 <__ieee754_atan2+0x1a8>)
 800af9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afa0:	e76b      	b.n	800ae7a <__ieee754_atan2+0x42>
 800afa2:	bf00      	nop
 800afa4:	f3af 8000 	nop.w
 800afa8:	54442d18 	.word	0x54442d18
 800afac:	c00921fb 	.word	0xc00921fb
 800afb0:	54442d18 	.word	0x54442d18
 800afb4:	bff921fb 	.word	0xbff921fb
 800afb8:	54442d18 	.word	0x54442d18
 800afbc:	bfe921fb 	.word	0xbfe921fb
 800afc0:	7f3321d2 	.word	0x7f3321d2
 800afc4:	4002d97c 	.word	0x4002d97c
 800afc8:	7f3321d2 	.word	0x7f3321d2
 800afcc:	c002d97c 	.word	0xc002d97c
 800afd0:	33145c07 	.word	0x33145c07
 800afd4:	3ca1a626 	.word	0x3ca1a626
 800afd8:	54442d18 	.word	0x54442d18
 800afdc:	400921fb 	.word	0x400921fb
 800afe0:	54442d18 	.word	0x54442d18
 800afe4:	3ff921fb 	.word	0x3ff921fb
 800afe8:	54442d18 	.word	0x54442d18
 800afec:	3fe921fb 	.word	0x3fe921fb
 800aff0:	7ff00000 	.word	0x7ff00000

0800aff4 <__ieee754_sqrt>:
 800aff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff8:	4955      	ldr	r1, [pc, #340]	; (800b150 <__ieee754_sqrt+0x15c>)
 800affa:	ec55 4b10 	vmov	r4, r5, d0
 800affe:	43a9      	bics	r1, r5
 800b000:	462b      	mov	r3, r5
 800b002:	462a      	mov	r2, r5
 800b004:	d112      	bne.n	800b02c <__ieee754_sqrt+0x38>
 800b006:	ee10 2a10 	vmov	r2, s0
 800b00a:	ee10 0a10 	vmov	r0, s0
 800b00e:	4629      	mov	r1, r5
 800b010:	f7f5 faa2 	bl	8000558 <__aeabi_dmul>
 800b014:	4602      	mov	r2, r0
 800b016:	460b      	mov	r3, r1
 800b018:	4620      	mov	r0, r4
 800b01a:	4629      	mov	r1, r5
 800b01c:	f7f5 f8e6 	bl	80001ec <__adddf3>
 800b020:	4604      	mov	r4, r0
 800b022:	460d      	mov	r5, r1
 800b024:	ec45 4b10 	vmov	d0, r4, r5
 800b028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b02c:	2d00      	cmp	r5, #0
 800b02e:	ee10 0a10 	vmov	r0, s0
 800b032:	4621      	mov	r1, r4
 800b034:	dc0f      	bgt.n	800b056 <__ieee754_sqrt+0x62>
 800b036:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b03a:	4330      	orrs	r0, r6
 800b03c:	d0f2      	beq.n	800b024 <__ieee754_sqrt+0x30>
 800b03e:	b155      	cbz	r5, 800b056 <__ieee754_sqrt+0x62>
 800b040:	ee10 2a10 	vmov	r2, s0
 800b044:	4620      	mov	r0, r4
 800b046:	4629      	mov	r1, r5
 800b048:	f7f5 f8ce 	bl	80001e8 <__aeabi_dsub>
 800b04c:	4602      	mov	r2, r0
 800b04e:	460b      	mov	r3, r1
 800b050:	f7f5 fbac 	bl	80007ac <__aeabi_ddiv>
 800b054:	e7e4      	b.n	800b020 <__ieee754_sqrt+0x2c>
 800b056:	151b      	asrs	r3, r3, #20
 800b058:	d073      	beq.n	800b142 <__ieee754_sqrt+0x14e>
 800b05a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b05e:	07dd      	lsls	r5, r3, #31
 800b060:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b064:	bf48      	it	mi
 800b066:	0fc8      	lsrmi	r0, r1, #31
 800b068:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b06c:	bf44      	itt	mi
 800b06e:	0049      	lslmi	r1, r1, #1
 800b070:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800b074:	2500      	movs	r5, #0
 800b076:	1058      	asrs	r0, r3, #1
 800b078:	0fcb      	lsrs	r3, r1, #31
 800b07a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800b07e:	0049      	lsls	r1, r1, #1
 800b080:	2316      	movs	r3, #22
 800b082:	462c      	mov	r4, r5
 800b084:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b088:	19a7      	adds	r7, r4, r6
 800b08a:	4297      	cmp	r7, r2
 800b08c:	bfde      	ittt	le
 800b08e:	19bc      	addle	r4, r7, r6
 800b090:	1bd2      	suble	r2, r2, r7
 800b092:	19ad      	addle	r5, r5, r6
 800b094:	0fcf      	lsrs	r7, r1, #31
 800b096:	3b01      	subs	r3, #1
 800b098:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800b09c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b0a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b0a4:	d1f0      	bne.n	800b088 <__ieee754_sqrt+0x94>
 800b0a6:	f04f 0c20 	mov.w	ip, #32
 800b0aa:	469e      	mov	lr, r3
 800b0ac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b0b0:	42a2      	cmp	r2, r4
 800b0b2:	eb06 070e 	add.w	r7, r6, lr
 800b0b6:	dc02      	bgt.n	800b0be <__ieee754_sqrt+0xca>
 800b0b8:	d112      	bne.n	800b0e0 <__ieee754_sqrt+0xec>
 800b0ba:	428f      	cmp	r7, r1
 800b0bc:	d810      	bhi.n	800b0e0 <__ieee754_sqrt+0xec>
 800b0be:	2f00      	cmp	r7, #0
 800b0c0:	eb07 0e06 	add.w	lr, r7, r6
 800b0c4:	da42      	bge.n	800b14c <__ieee754_sqrt+0x158>
 800b0c6:	f1be 0f00 	cmp.w	lr, #0
 800b0ca:	db3f      	blt.n	800b14c <__ieee754_sqrt+0x158>
 800b0cc:	f104 0801 	add.w	r8, r4, #1
 800b0d0:	1b12      	subs	r2, r2, r4
 800b0d2:	428f      	cmp	r7, r1
 800b0d4:	bf88      	it	hi
 800b0d6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800b0da:	1bc9      	subs	r1, r1, r7
 800b0dc:	4433      	add	r3, r6
 800b0de:	4644      	mov	r4, r8
 800b0e0:	0052      	lsls	r2, r2, #1
 800b0e2:	f1bc 0c01 	subs.w	ip, ip, #1
 800b0e6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800b0ea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b0ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b0f2:	d1dd      	bne.n	800b0b0 <__ieee754_sqrt+0xbc>
 800b0f4:	430a      	orrs	r2, r1
 800b0f6:	d006      	beq.n	800b106 <__ieee754_sqrt+0x112>
 800b0f8:	1c5c      	adds	r4, r3, #1
 800b0fa:	bf13      	iteet	ne
 800b0fc:	3301      	addne	r3, #1
 800b0fe:	3501      	addeq	r5, #1
 800b100:	4663      	moveq	r3, ip
 800b102:	f023 0301 	bicne.w	r3, r3, #1
 800b106:	106a      	asrs	r2, r5, #1
 800b108:	085b      	lsrs	r3, r3, #1
 800b10a:	07e9      	lsls	r1, r5, #31
 800b10c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b110:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b114:	bf48      	it	mi
 800b116:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b11a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800b11e:	461c      	mov	r4, r3
 800b120:	e780      	b.n	800b024 <__ieee754_sqrt+0x30>
 800b122:	0aca      	lsrs	r2, r1, #11
 800b124:	3815      	subs	r0, #21
 800b126:	0549      	lsls	r1, r1, #21
 800b128:	2a00      	cmp	r2, #0
 800b12a:	d0fa      	beq.n	800b122 <__ieee754_sqrt+0x12e>
 800b12c:	02d6      	lsls	r6, r2, #11
 800b12e:	d50a      	bpl.n	800b146 <__ieee754_sqrt+0x152>
 800b130:	f1c3 0420 	rsb	r4, r3, #32
 800b134:	fa21 f404 	lsr.w	r4, r1, r4
 800b138:	1e5d      	subs	r5, r3, #1
 800b13a:	4099      	lsls	r1, r3
 800b13c:	4322      	orrs	r2, r4
 800b13e:	1b43      	subs	r3, r0, r5
 800b140:	e78b      	b.n	800b05a <__ieee754_sqrt+0x66>
 800b142:	4618      	mov	r0, r3
 800b144:	e7f0      	b.n	800b128 <__ieee754_sqrt+0x134>
 800b146:	0052      	lsls	r2, r2, #1
 800b148:	3301      	adds	r3, #1
 800b14a:	e7ef      	b.n	800b12c <__ieee754_sqrt+0x138>
 800b14c:	46a0      	mov	r8, r4
 800b14e:	e7bf      	b.n	800b0d0 <__ieee754_sqrt+0xdc>
 800b150:	7ff00000 	.word	0x7ff00000

0800b154 <matherr>:
 800b154:	2000      	movs	r0, #0
 800b156:	4770      	bx	lr

0800b158 <nan>:
 800b158:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b160 <nan+0x8>
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	00000000 	.word	0x00000000
 800b164:	7ff80000 	.word	0x7ff80000

0800b168 <_init>:
 800b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16a:	bf00      	nop
 800b16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b16e:	bc08      	pop	{r3}
 800b170:	469e      	mov	lr, r3
 800b172:	4770      	bx	lr

0800b174 <_fini>:
 800b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b176:	bf00      	nop
 800b178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b17a:	bc08      	pop	{r3}
 800b17c:	469e      	mov	lr, r3
 800b17e:	4770      	bx	lr
